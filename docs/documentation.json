{
  "global": {
    "basic": {
      "ans": {
        "name": "ans",
        "kind": "member",
        "description": "Stores the result of the last evaluated expression.",
        "source_filename": "basic.js",
        "source_lineno": 27,
        "source_range": [
          658,
          666
        ]
      },
      "clear": {
        "name": "clear",
        "kind": "function",
        "description": "Clears all defined variables in the current context.",
        "source_filename": "basic.js",
        "source_lineno": 29
      },
      "clc": {
        "name": "clc",
        "kind": "function",
        "description": "Clears the console screen.",
        "source_filename": "basic.js",
        "source_lineno": 37
      },
      "cls": {
        "name": "cls",
        "kind": "function",
        "description": "Clears the console screen. Alias for `clc`.",
        "source_filename": "basic.js",
        "source_lineno": 45
      },
      "version": {
        "name": "version",
        "kind": "member",
        "description": "Returns the current version of the JSLAB.",
        "source_filename": "basic.js",
        "source_lineno": 53
      },
      "platform": {
        "name": "platform",
        "kind": "member",
        "description": "Returns the platform on which JSLAB is running.",
        "source_filename": "basic.js",
        "source_lineno": 61
      },
      "jsl_file_name": {
        "name": "jsl_file_name",
        "kind": "member",
        "description": "Returns the file name of the current JSLAB script.",
        "source_filename": "basic.js",
        "source_lineno": 69
      },
      "info": {
        "name": "info",
        "kind": "function",
        "description": "Provides information about the current environment.",
        "source_filename": "basic.js",
        "source_lineno": 77
      },
      "settings": {
        "name": "settings",
        "kind": "function",
        "description": "Accesses or modifies the user settings for JSLAB.",
        "source_filename": "basic.js",
        "source_lineno": 85
      },
      "cmd_help": {
        "name": "cmd_help",
        "kind": "function",
        "description": "Provides help information for JSLAB commands.",
        "source_filename": "basic.js",
        "source_lineno": 93
      },
      "editor": {
        "name": "editor",
        "kind": "function",
        "description": "Accesses the code editor interface within JSLAB.",
        "source_filename": "basic.js",
        "source_lineno": 101
      },
      "pwd": {
        "name": "pwd",
        "kind": "member",
        "description": "Returns the current working directory.",
        "source_filename": "basic.js",
        "source_lineno": 109
      },
      "breakpoint": {
        "name": "breakpoint",
        "kind": "function",
        "description": "Sets a breakpoint in the code for debugging.",
        "source_filename": "basic.js",
        "source_lineno": 117
      },
      "debug_flag": {
        "name": "debug_flag",
        "kind": "member",
        "description": "Returns the current debug flag status.",
        "source_filename": "basic.js",
        "source_lineno": 125
      },
      "debug": {
        "name": "debug",
        "kind": "member",
        "description": "Enables or disables debug mode.",
        "source_filename": "basic.js",
        "source_lineno": 133
      },
      "pause": {
        "name": "pause",
        "kind": "function",
        "description": "Pauses the execution of the current script.",
        "source_filename": "basic.js",
        "source_lineno": 141
      },
      "stoppoint": {
        "name": "stoppoint",
        "kind": "function",
        "description": "Sets a stop point in the script execution.",
        "source_filename": "basic.js",
        "source_lineno": 149
      },
      "logpoint": {
        "name": "logpoint",
        "kind": "function",
        "description": "Sets a log point to record information during execution.",
        "source_filename": "basic.js",
        "source_lineno": 157
      },
      "updatepoint": {
        "name": "updatepoint",
        "kind": "function",
        "description": "Updates specific points in the script during execution.",
        "source_filename": "basic.js",
        "source_lineno": 165
      },
      "checkStop": {
        "name": "checkStop",
        "kind": "function",
        "description": "Checks if the execution should stop based on conditions.",
        "source_filename": "basic.js",
        "source_lineno": 173
      },
      "endPoint": {
        "name": "endPoint",
        "kind": "function",
        "description": "Marks the endpoint of a script or process.",
        "source_filename": "basic.js",
        "source_lineno": 181
      },
      "run": {
        "name": "run",
        "kind": "function",
        "description": "Runs a script from a specified path, optionally focusing on specific lines and controlling output visibility.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The path to the script to run.",
            "name": "script_path"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An array of line numbers to run or focus on within the script.",
            "name": "lines"
          },
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "optional": true,
            "defaultvalue": false,
            "description": "Whether to suppress output from the script execution.",
            "name": "silent"
          },
          {
            "type": {
              "names": [
                "Boolean"
              ]
            },
            "optional": true,
            "defaultvalue": false,
            "description": "If true, forces the script to run even if stop conditions are met.",
            "name": "force_run"
          }
        ],
        "async": true,
        "source_filename": "basic.js",
        "source_lineno": 197,
        "source_range": [
          6176,
          6608
        ]
      },
      "helpToJSON": {
        "name": "helpToJSON",
        "kind": "function",
        "description": "Retrieves documentation in JSON format based on the provided name and type.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "description": "The name of the documentation item.",
            "name": "name"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "description": "The type of the documentation (e.g., 'category').",
            "name": "type"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string",
                "undefined"
              ]
            },
            "description": "The JSON string of the documentation or undefined if not found."
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 215,
        "source_range": [
          6950,
          8270
        ]
      },
      "help": {
        "name": "help",
        "kind": "function",
        "description": "Retrieves documentation based on the provided name and type.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The name of the documentation item.",
            "name": "name"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The type of the documentation.",
            "name": "type"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string",
                "undefined"
              ]
            },
            "description": "The JSON string of the documentation or undefined if not found."
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 263,
        "source_range": [
          8574,
          8636
        ]
      },
      "doc": {
        "name": "doc",
        "kind": "function",
        "description": "Retrieves documentation based on the provided name and type.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The name of the documentation item.",
            "name": "name"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The type of the documentation.",
            "name": "type"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string",
                "undefined"
              ]
            },
            "description": "The JSON string of the documentation or undefined if not found."
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 273,
        "source_range": [
          8940,
          8995
        ]
      },
      "documentation": {
        "name": "documentation",
        "kind": "function",
        "description": "Retrieves documentation based on the provided name and type.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The name of the documentation item.",
            "name": "name"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The type of the documentation.",
            "name": "type"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string",
                "undefined"
              ]
            },
            "description": "The JSON string of the documentation or undefined if not found."
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 283,
        "source_range": [
          9299,
          9364
        ]
      },
      "helpSearch": {
        "name": "helpSearch",
        "kind": "function",
        "description": "Searches the documentation for methods that match all words in the given query, regardless of order.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The search query containing keywords to match within the documentation.",
            "name": "query"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<Object>"
              ]
            },
            "description": "Array of matching documentation entries, each entry containing `type` and `category` properties."
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 292,
        "source_range": [
          9716,
          10427
        ]
      },
      "docSearch": {
        "name": "docSearch",
        "kind": "function",
        "description": "Searches the documentation for methods that match all words in the given query, regardless of order.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The search query containing keywords to match within the documentation.",
            "name": "query"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<Object>"
              ]
            },
            "description": "Array of matching documentation entries, each entry containing `type` and `category` properties."
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 318,
        "source_range": [
          10779,
          10836
        ]
      },
      "documentationSearch": {
        "name": "documentationSearch",
        "kind": "function",
        "description": "Searches the documentation for methods that match all words in the given query, regardless of order.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The search query containing keywords to match within the documentation.",
            "name": "query"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<Object>"
              ]
            },
            "description": "Array of matching documentation entries, each entry containing `type` and `category` properties."
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 327,
        "source_range": [
          11188,
          11255
        ]
      },
      "source": {
        "name": "source",
        "kind": "function",
        "description": "Opens the source file and navigates to the specified line based on the provided name.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The name of the source to locate.",
            "name": "name"
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 335,
        "source_range": [
          11426,
          12302
        ]
      },
      "jslFileName": {
        "name": "jslFileName",
        "kind": "function",
        "description": "Retrieves the file name of the currently active JSL script.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The file name of the JSL script."
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 366,
        "source_range": [
          12441,
          12495
        ]
      },
      "clearStorage": {
        "name": "clearStorage",
        "kind": "function",
        "description": "Clears the application's local storage.",
        "params": [],
        "source_filename": "basic.js",
        "source_lineno": 373,
        "source_range": [
          12556,
          12616
        ]
      },
      "savePath": {
        "name": "savePath",
        "kind": "function",
        "description": "Saves a path to the application's list of saved paths.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The path to save.",
            "name": "new_path"
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 381,
        "source_range": [
          12740,
          12968
        ]
      },
      "removePath": {
        "name": "removePath",
        "kind": "function",
        "description": "Removes a previously saved path from the application's list of saved paths.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The path to remove.",
            "name": "saved_path"
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 394,
        "source_range": [
          13117,
          13358
        ]
      },
      "cd": {
        "name": "cd",
        "kind": "function",
        "description": "Changes the current working directory to the specified path.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The new path to set as the current working directory.",
            "name": "new_path"
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 442,
        "source_range": [
          14167,
          14311
        ]
      },
      "workspace": {
        "name": "workspace",
        "kind": "function",
        "description": "Retrieves the current workspace.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The current workspace object."
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 485,
        "source_range": [
          15149,
          15202
        ]
      },
      "updateWorkspace": {
        "name": "updateWorkspace",
        "kind": "function",
        "description": "Updates the workspace display based on the current state.",
        "params": [],
        "source_filename": "basic.js",
        "source_lineno": 492,
        "source_range": [
          15281,
          15403
        ]
      },
      "updateFileBrowser": {
        "name": "updateFileBrowser",
        "kind": "function",
        "description": "Updates the file browser display based on the current state.",
        "params": [],
        "source_filename": "basic.js",
        "source_lineno": 501,
        "source_range": [
          15487,
          15613
        ]
      },
      "error": {
        "name": "error",
        "kind": "function",
        "description": "Displays an error message.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The error message to display.",
            "name": "msg"
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 527,
        "source_range": [
          15942,
          16050
        ]
      },
      "disp": {
        "name": "disp",
        "kind": "function",
        "description": "Displays a general message.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The message to display.",
            "name": "msg"
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 537,
        "source_range": [
          16148,
          16275
        ]
      },
      "dispMonospaced": {
        "name": "dispMonospaced",
        "kind": "function",
        "description": "Displays a general message with monospaced font.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The message to display.",
            "name": "msg"
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 548,
        "source_range": [
          16394,
          16541
        ]
      },
      "warn": {
        "name": "warn",
        "kind": "function",
        "description": "Displays a warning message.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The warning message to display.",
            "name": "msg"
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 559,
        "source_range": [
          16649,
          16755
        ]
      },
      "checkStopLoop": {
        "name": "checkStopLoop",
        "kind": "function",
        "description": "Verifies if a loop within the script execution should be terminated, typically used to avoid infinite or lengthy unnecessary execution.",
        "params": [],
        "source_filename": "basic.js",
        "source_lineno": 653,
        "source_range": [
          19668,
          19813
        ]
      },
      "edit": {
        "name": "edit",
        "kind": "function",
        "description": "Opens a specified file in an editor or opens the editor to a default or previously specified file.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "description": "Path to the file to be opened in the editor.",
            "name": "filepath"
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 664,
        "source_range": [
          20014,
          20057
        ]
      },
      "getExamples": {
        "name": "getExamples",
        "kind": "function",
        "description": "Returns a list of all example scripts available within a predefined directory.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<string>"
              ]
            },
            "description": "An array of paths to the example scripts."
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 672,
        "source_range": [
          20228,
          20452
        ]
      },
      "openExample": {
        "name": "openExample",
        "kind": "function",
        "description": "Opens a specified example script in the editor window.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Name of the example file to open.",
            "name": "filename"
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 682,
        "source_range": [
          20594,
          20756
        ]
      },
      "openExamplesFolder": {
        "name": "openExamplesFolder",
        "kind": "function",
        "description": "Opens examples folder in File Explorer",
        "params": [],
        "source_filename": "basic.js",
        "source_lineno": 692,
        "source_range": [
          20816,
          20896
        ]
      },
      "goToExamplesFolder": {
        "name": "goToExamplesFolder",
        "kind": "function",
        "description": "Opens examples folder in File Explorer",
        "params": [],
        "source_filename": "basic.js",
        "source_lineno": 699,
        "source_range": [
          20956,
          21028
        ]
      },
      "showMessageBox": {
        "name": "showMessageBox",
        "kind": "function",
        "description": "Displays a synchronous message box to the user and waits for their response.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Configuration options for the message box.",
            "name": "options"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The index of the button clicked by the user."
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 708,
        "source_range": [
          21269,
          21347
        ]
      },
      "save": {
        "name": "save",
        "kind": "function",
        "description": "Saves specified variables to a JSON file.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Path where the JSON file will be saved.",
            "name": "file_path"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "variable": true,
            "description": "Variables to save. If 'all' is specified, saves all available variables.",
            "name": "args"
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 717,
        "source_range": [
          21587,
          22392
        ]
      },
      "load": {
        "name": "load",
        "kind": "function",
        "description": "Loads variables from a specified JSON file into the specified scope or the default script context.\nIf an error occurs during file reading or parsing, it logs an error message.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "variable": true,
            "description": "A single filename or a scope and filename to specify where to load the variables.",
            "name": "args"
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 746,
        "source_range": [
          22702,
          23263
        ]
      },
      "system": {
        "name": "system",
        "kind": "function",
        "description": "Executes a system shell command.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "variable": true,
            "description": "The command and its arguments to be executed.",
            "name": "arg"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The output of the executed command."
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 775,
        "source_range": [
          23446,
          23631
        ]
      },
      "getCompletions": {
        "name": "getCompletions",
        "kind": "function",
        "description": "Retrieves completion suggestions based on the current context and input.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "Data containing the start of the string to complete, context, and keywords.",
            "name": "data"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<string>"
              ]
            },
            "description": "An array of completion suggestions."
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 788,
        "source_range": [
          23893,
          26235
        ]
      },
      "getObjectByProp": {
        "name": "getObjectByProp",
        "kind": "function",
        "description": "Retrieves an object by matching a specific property value.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The object to search through.",
            "name": "obj"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The property name to match.",
            "name": "prop"
          },
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to match against the property.",
            "name": "val"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object",
                "null"
              ]
            },
            "description": "The found object with key and value, or null if not found."
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 852,
        "source_range": [
          26582,
          26758
        ]
      },
      "getObjectsByProp": {
        "name": "getObjectsByProp",
        "kind": "function",
        "description": "Retrieves multiple objects from a parent object by matching a specific property value.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The parent object to search through.",
            "name": "obj"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The property name to match.",
            "name": "prop"
          },
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to match against the property.",
            "name": "val"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "An object containing all matched key-value pairs."
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 864,
        "source_range": [
          27122,
          27282
        ]
      },
      "strcmp": {
        "name": "strcmp",
        "kind": "function",
        "description": "Compares two strings lexicographically.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The first string.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The second string.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The result of the comparison."
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 875,
        "source_range": [
          27482,
          27548
        ]
      },
      "unrequire": {
        "name": "unrequire",
        "kind": "function",
        "description": "Unloads a previously required module from the cache.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The module to unrequire.",
            "name": "module"
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 883,
        "source_range": [
          27677,
          27987
        ]
      },
      "resetApp": {
        "name": "resetApp",
        "kind": "function",
        "description": "Resets app.",
        "params": [],
        "source_filename": "basic.js",
        "source_lineno": 897,
        "source_range": [
          28022,
          28067
        ]
      },
      "resetSandbox": {
        "name": "resetSandbox",
        "kind": "function",
        "description": "Resets the sandbox environment to its initial state.",
        "params": [],
        "source_filename": "basic.js",
        "source_lineno": 904,
        "source_range": [
          28143,
          28196
        ]
      },
      "openDevTools": {
        "name": "openDevTools",
        "kind": "function",
        "description": "Opens the developer tools for the sandbox environment in the current context.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "void"
              ]
            }
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 912,
        "source_range": [
          28316,
          28376
        ]
      },
      "compileNapi": {
        "name": "compileNapi",
        "kind": "function",
        "description": "Compiles a N-API module located at the specified path.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The path to the N-API module.",
            "name": "path"
          },
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "optional": true,
            "defaultvalue": true,
            "description": "Whether to show output in the command window.",
            "name": "show_output"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "An array containing the result of the compilation and targets."
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 922,
        "source_range": [
          28685,
          31416
        ]
      },
      "installModule": {
        "name": "installModule",
        "kind": "function",
        "description": "Installs a module located at the specified path.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The path to the module.",
            "name": "path"
          },
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "optional": true,
            "defaultvalue": true,
            "description": "Whether to show output in the command window.",
            "name": "show_output"
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 997,
        "source_range": [
          31629,
          32662
        ]
      },
      "addForCleanup": {
        "name": "addForCleanup",
        "kind": "function",
        "description": "Registers an object for cleanup with a specified cleanup function.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The object to be registered for cleanup.",
            "name": "obj"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The function to execute during cleanup.",
            "name": "fun"
          }
        ],
        "source_filename": "basic.js",
        "source_lineno": 1034,
        "source_range": [
          32889,
          32954
        ]
      }
    },
    "math": {
      "Pi": {
        "name": "Pi",
        "kind": "member",
        "description": "Pi number.",
        "source_filename": "math.js",
        "source_lineno": 28,
        "source_range": [
          582,
          612
        ]
      },
      "d2r": {
        "name": "d2r",
        "kind": "member",
        "description": "Coefficient for converting degrees to radians.",
        "source_filename": "math.js",
        "source_lineno": 34,
        "source_range": [
          728,
          763
        ]
      },
      "r2d": {
        "name": "r2d",
        "kind": "member",
        "description": "Coefficient for converting radians to degrees.",
        "source_filename": "math.js",
        "source_lineno": 40,
        "source_range": [
          879,
          900
        ]
      },
      "eps": {
        "name": "eps",
        "kind": "member",
        "description": "Floating-point relative accuracy",
        "source_filename": "math.js",
        "source_lineno": 47,
        "source_range": [
          996,
          1011
        ]
      },
      "EPS": {
        "name": "EPS",
        "kind": "member",
        "description": "Floating-point relative accuracy",
        "source_filename": "math.js",
        "source_lineno": 53,
        "source_range": [
          1101,
          1120
        ]
      },
      "seedRandom": {
        "name": "seedRandom",
        "kind": "function",
        "description": "Seeds the random number generator with the provided arguments.",
        "params": [
          {
            "type": {
              "names": [
                "any"
              ]
            },
            "variable": true,
            "description": "Arguments used to seed the random generator.",
            "name": "args"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "any"
              ]
            },
            "description": "The result from the seeded random generator."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 61,
        "source_range": [
          1350,
          1420
        ]
      },
      "interp": {
        "name": "interp",
        "kind": "function",
        "description": "Performs linear interpolation on a set of data points.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The x-values of the data points.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The y-values of the data points, corresponding to each x-value.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "Number",
                "Array"
              ]
            },
            "description": "The x-value(s) for which to interpolate a y-value.",
            "name": "xq"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The mode of interpolation. Use 'extrap' for extrapolation.",
            "name": "mode",
            "defaultvalue": "none"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Number",
                "Array"
              ]
            },
            "description": "The interpolated y-value(s) at xq."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 73,
        "source_range": [
          1871,
          3449
        ]
      },
      "gridGradient": {
        "name": "gridGradient",
        "kind": "function",
        "description": "Computes the gradient of a 2D grid.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "X coordinates.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "Y coordinates.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "Array.<Array>"
              ]
            },
            "description": "2D data array.",
            "name": "z"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 11,
            "description": "Neighborhood size.",
            "name": "N_a"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<Array>"
              ]
            },
            "description": "Gradient components [dz_x, dz_y]."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 131,
        "source_range": [
          3734,
          7935
        ]
      },
      "gridData": {
        "name": "gridData",
        "kind": "function",
        "description": "Interpolates grid data using the specified method.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "X coordinates.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "Y coordinates.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "Data values.",
            "name": "z"
          },
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "Query X coordinates.",
            "name": "xq"
          },
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "Query Y coordinates.",
            "name": "yq"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "defaultvalue": "\"linear\"",
            "description": "Interpolation method.",
            "name": "method"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "description": "Optional settings.",
            "name": "opts_in"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<Array>"
              ]
            },
            "description": "Interpolated grid [xq, yq, zq]."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 270,
        "source_range": [
          8387,
          13072
        ]
      },
      "bilinearFunction": {
        "name": "bilinearFunction",
        "kind": "function",
        "description": "Calculates the output of a bilinear function based on input value, midpoint, and mid-value.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The input value for the function.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The midpoint of the function where the slope changes.",
            "name": "midPoint"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The value of the function at the midpoint.",
            "name": "midValue"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The output value of the bilinear function."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 417,
        "source_range": [
          13473,
          13767
        ]
      },
      "random": {
        "name": "random",
        "kind": "function",
        "description": "Generates a random number between a specified range.",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "The lower bound of the range.",
            "name": "min"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "optional": true,
            "description": "The upper bound of the range.",
            "name": "max"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "A random number within the specified range."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 436,
        "source_range": [
          14024,
          14177
        ]
      },
      "randInt": {
        "name": "randInt",
        "kind": "function",
        "description": "Generates a random integer within a specified range.",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "The lower bound of the range.",
            "name": "min"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "optional": true,
            "description": "The upper bound of the range.",
            "name": "max"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "A random integer within the specified range."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 448,
        "source_range": [
          14435,
          14595
        ]
      },
      "acosd": {
        "name": "acosd",
        "kind": "function",
        "description": "Computes the arc cosine of x, with the result in degrees.",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The value to compute the arc cosine for.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The arc cosine of x in degrees."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 459,
        "source_range": [
          14793,
          14886
        ]
      },
      "acotd": {
        "name": "acotd",
        "kind": "function",
        "description": "Computes the arc cotangent of x, with the result in degrees.",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The value to compute the arc cotangent for.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The arc cotangent of x in degrees."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 468,
        "source_range": [
          15093,
          15186
        ]
      },
      "acscd": {
        "name": "acscd",
        "kind": "function",
        "description": "Computes the arc cosecant of x, with the result in degrees.",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The value to compute the arc cosecant for.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The arc cosecant of x in degrees."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 477,
        "source_range": [
          15390,
          15483
        ]
      },
      "asecd": {
        "name": "asecd",
        "kind": "function",
        "description": "Computes the arc secant of x, with the result in degrees.",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The value to compute the arc secant for.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The arc secant of x in degrees."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 486,
        "source_range": [
          15681,
          15774
        ]
      },
      "asind": {
        "name": "asind",
        "kind": "function",
        "description": "Computes the arc sine of x, with the result in degrees.",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The value to compute the arc sine for.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The arc sine of x in degrees."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 495,
        "source_range": [
          15966,
          16059
        ]
      },
      "atand": {
        "name": "atand",
        "kind": "function",
        "description": "Computes the arc tangent of x, with the result in degrees.",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The value to compute the arc tangent for.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The arc tangent of x in degrees."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 504,
        "source_range": [
          16260,
          16353
        ]
      },
      "atan2d": {
        "name": "atan2d",
        "kind": "function",
        "description": "Computes the arc tangent of the quotient of its arguments, with the result in degrees.",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The y coordinate.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The x coordinate.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The arc tangent of y/x in degrees."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 514,
        "source_range": [
          16601,
          16702
        ]
      },
      "cosd": {
        "name": "cosd",
        "kind": "function",
        "description": "Computes the cosine of x, where x is in degrees.",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The angle in degrees.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The cosine of x in degrees."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 523,
        "source_range": [
          16868,
          16959
        ]
      },
      "cotd": {
        "name": "cotd",
        "kind": "function",
        "description": "Computes the cotangent of x, where x is in degrees.",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The angle in degrees.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The cotangent of x."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 532,
        "source_range": [
          17120,
          17211
        ]
      },
      "cscd": {
        "name": "cscd",
        "kind": "function",
        "description": "Computes the cosecant of x, where x is in degrees.",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The angle in degrees.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The cosecant of x."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 541,
        "source_range": [
          17370,
          17461
        ]
      },
      "secd": {
        "name": "secd",
        "kind": "function",
        "description": "Computes the secant of x, where x is in degrees.",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The angle in degrees.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The secant of x."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 550,
        "source_range": [
          17616,
          17707
        ]
      },
      "sind": {
        "name": "sind",
        "kind": "function",
        "description": "Computes the sine of x, where x is in degrees.",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The angle in degrees.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The sine of x."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 559,
        "source_range": [
          17858,
          17949
        ]
      },
      "tand": {
        "name": "tand",
        "kind": "function",
        "description": "Computes the tangent of x, where x is in degrees.",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The angle in degrees.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The tangent of x."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 568,
        "source_range": [
          18106,
          18197
        ]
      },
      "poly": {
        "name": "poly",
        "kind": "function",
        "description": "Computes the characteristic polynomial of a matrix or the polynomial from roots.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "If `A` is a matrix (2D array), computes its characteristic polynomial.\n                   If `A` is an array of roots, computes the polynomial with those roots.",
            "name": "A"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "- Coefficients of the resulting polynomial."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 578,
        "source_range": [
          18557,
          18828
        ]
      },
      "polyfit": {
        "name": "polyfit",
        "kind": "function",
        "description": "Fits a polynomial of degree n to the given data points and returns the coefficients (highest degree first).",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The array of x-values.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The array of y-values corresponding to each x-value.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The degree of the polynomial to fit.",
            "name": "n"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The coefficients of the fitted polynomial in descending order."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 601,
        "source_range": [
          19237,
          19403
        ]
      },
      "polyval": {
        "name": "polyval",
        "kind": "function",
        "description": "Evaluates a polynomial with given coefficients at specified x-values.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The coefficients of the polynomial in descending order.",
            "name": "p"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The array of x-values at which to evaluate the polynomial.",
            "name": "x_in"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The resulting y-values after evaluating the polynomial at x_in."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 612,
        "source_range": [
          19755,
          20018
        ]
      },
      "roots": {
        "name": "roots",
        "kind": "function",
        "description": "Computes the roots of a polynomial with the given coefficients.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Array of polynomial coefficients, ordered from highest degree to constant term.",
            "name": "p"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Array of roots (real or complex) of the polynomial."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 630,
        "source_range": [
          20287,
          20349
        ]
      },
      "polystr": {
        "name": "polystr",
        "kind": "function",
        "description": "Generates a string representation of a polynomial based on the provided coefficients and options.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An array of polynomial coefficients, ordered from highest degree to constant term.",
            "name": "p"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "description": "Optional settings for the polynomial string.",
            "name": "opts"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "defaultvalue": "'x'",
            "description": "The symbol to use for the variable x.",
            "name": "opts.x_symbol"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "defaultvalue": "'y'",
            "description": "The symbol to use for the variable y.",
            "name": "opts.y_symbol"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 7,
            "description": "The number of decimal places for coefficients.",
            "name": "opts.precision"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "description": "The language format for the output ('tex', 'c', etc.).",
            "name": "opts.lang"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The formatted polynomial string."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 644,
        "source_range": [
          21050,
          23090
        ]
      },
      "polystrc": {
        "name": "polystrc",
        "kind": "function",
        "description": "Generates a C language formatted string representation of a polynomial.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An array of polynomial coefficients, ordered from highest degree to constant term.",
            "name": "p"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "description": "Optional settings for the polynomial string.",
            "name": "opts"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The polynomial string formatted for C language."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 722,
        "source_range": [
          23441,
          23576
        ]
      },
      "polystrtex": {
        "name": "polystrtex",
        "kind": "function",
        "description": "Generates a LaTeX formatted string representation of a polynomial.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An array of polynomial coefficients, ordered from highest degree to constant term.",
            "name": "p"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "description": "Optional settings for the polynomial string.",
            "name": "opts"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The polynomial string formatted for LaTeX."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 737,
        "source_range": [
          23915,
          24056
        ]
      },
      "spikeFilter": {
        "name": "spikeFilter",
        "kind": "function",
        "description": "Filters out spikes in a sequence by replacing sudden large changes with the previous value.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The input sequence of numbers.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The maximum allowed difference between consecutive elements before considering it a spike.",
            "name": "dx_max"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The maximum number of consecutive spikes to correct.",
            "name": "n"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The filtered sequence with spikes removed."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 753,
        "source_range": [
          24494,
          24774
        ]
      },
      "magnitude": {
        "name": "magnitude",
        "kind": "function",
        "description": "Calculates the magnitude (absolute value) of a complex number or a real number.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Object"
              ]
            },
            "description": "A real number or an object with 'real' and 'imag' properties.",
            "name": "num"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The magnitude of the number."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 774,
        "source_range": [
          25028,
          25226
        ]
      },
      "compareComplex": {
        "name": "compareComplex",
        "kind": "function",
        "description": "Compares two numbers (real or complex) according to Octave's rules.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Object"
              ]
            },
            "description": "First number to compare.",
            "name": "a"
          },
          {
            "type": {
              "names": [
                "number",
                "Object"
              ]
            },
            "description": "Second number to compare.",
            "name": "b"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "-1 if a < b, 1 if a > b, 0 if equal."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 789,
        "source_range": [
          25495,
          26162
        ]
      },
      "min": {
        "name": "min",
        "kind": "function",
        "description": "Finds the minimum value in an array of numbers, which can include both real numbers and complex numbers.\nComplex numbers are represented as objects with 'real' and 'imag' properties.\nThe comparison follows Octave's rules:\n1. Compare magnitudes (absolute values) of the numbers.\n2. If magnitudes are equal, compare real parts.\n3. If real parts are equal, compare imaginary parts.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<(number|Object)>"
              ]
            },
            "description": "An array of numbers or complex number objects.",
            "name": "arr"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Object"
              ]
            },
            "description": "The minimum value found in the array."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 826,
        "source_range": [
          26805,
          28012
        ]
      },
      "max": {
        "name": "max",
        "kind": "function",
        "description": "Finds the maximum value in an array of numbers, which can include both real numbers and complex numbers.\nComplex numbers are represented as objects with 'real' and 'imag' properties.\nThe comparison follows Octave's rules:\n1. Compare magnitudes (absolute values) of the numbers.\n2. If magnitudes are equal, compare real parts.\n3. If real parts are equal, compare imaginary parts.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<(number|Object)>"
              ]
            },
            "description": "An array of numbers or complex number objects.",
            "name": "arr"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Object"
              ]
            },
            "description": "The maximum value found in the array."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 877,
        "source_range": [
          28657,
          29864
        ]
      },
      "real": {
        "name": "real",
        "kind": "function",
        "description": "Extracts the real part of a number or an array of numbers.\nHandles mixed inputs containing both real numbers and complex numbers.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Object",
                "Array.<(number|Object)>"
              ]
            },
            "description": "A number, complex number object, or array thereof.",
            "name": "input"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Array.<number>"
              ]
            },
            "description": "The real part(s) of the input."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 924,
        "source_range": [
          30291,
          30639
        ]
      },
      "imag": {
        "name": "imag",
        "kind": "function",
        "description": "Extracts the imaginary part of a number or an array of numbers.\nHandles mixed inputs containing both real numbers and complex numbers.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Object",
                "Array.<(number|Object)>"
              ]
            },
            "description": "A number, complex number object, or array thereof.",
            "name": "input"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Array.<number>"
              ]
            },
            "description": "The imaginary part(s) of the input."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 944,
        "source_range": [
          31074,
          31436
        ]
      },
      "cumtrapz": {
        "name": "cumtrapz",
        "kind": "function",
        "description": "Performs cumulative trapezoidal integration on the provided data.",
        "params": [
          {
            "type": {
              "names": [
                "any"
              ]
            },
            "variable": true,
            "description": "Arguments required for cumulative trapezoidal integration.",
            "name": "args"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "any"
              ]
            },
            "description": "The result of the cumulative trapezoidal integration."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 962,
        "source_range": [
          31686,
          31766
        ]
      },
      "trapz": {
        "name": "trapz",
        "kind": "function",
        "description": "Performs trapezoidal integration on the provided data.",
        "params": [
          {
            "type": {
              "names": [
                "any"
              ]
            },
            "variable": true,
            "description": "Arguments required for trapezoidal integration.",
            "name": "args"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "any"
              ]
            },
            "description": "The result of the trapezoidal integration."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 971,
        "source_range": [
          31983,
          32057
        ]
      },
      "mse": {
        "name": "mse",
        "kind": "function",
        "description": "Compute the mean squared error (MSE) between two arrays.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The first array.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The second array.",
            "name": "B"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "- The mean squared error between A and B."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 982,
        "source_range": [
          32377,
          32766
        ]
      },
      "charpoly": {
        "name": "charpoly",
        "kind": "function",
        "description": "Calculates the coefficients of the characteristic polynomial of a square matrix.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "A square matrix (2D array) for which the characteristic polynomial is computed.",
            "name": "matrix"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "- An array of coefficients of the characteristic polynomial."
          }
        ],
        "source_filename": "math.js",
        "source_lineno": 1006,
        "source_range": [
          33178,
          33795
        ]
      }
    },
    "non_blocking": {
      "nbwhile": {
        "name": "nbwhile",
        "kind": "function",
        "description": "Executes a given function in a non-blocking while loop.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "A function that returns a boolean value; when false, the loop exits.",
            "name": "fn"
          }
        ],
        "source_filename": "non-blocking.js",
        "source_lineno": 26,
        "source_range": [
          650,
          949
        ]
      },
      "nbrun": {
        "name": "nbrun",
        "kind": "function",
        "description": "Executes a given function once in a non-blocking manner.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The function to be executed.",
            "name": "fn"
          }
        ],
        "source_filename": "non-blocking.js",
        "source_lineno": 44,
        "source_range": [
          1082,
          1254
        ]
      },
      "nbnext": {
        "name": "nbnext",
        "kind": "function",
        "description": "Schedules the next block of code to be executed in a non-blocking manner.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The function to execute next.",
            "name": "fn"
          }
        ],
        "source_filename": "non-blocking.js",
        "source_lineno": 56,
        "source_range": [
          1405,
          1645
        ]
      },
      "waitMSeconds": {
        "name": "waitMSeconds",
        "kind": "function",
        "description": "Waits for a specified number of milliseconds in a non-blocking manner.",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The number of milliseconds to wait.",
            "name": "ms"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<void>"
              ]
            },
            "description": "A promise that resolves after the specified time has elapsed."
          }
        ],
        "source_filename": "non-blocking.js",
        "source_lineno": 73,
        "source_range": [
          1889,
          2143
        ]
      },
      "waitSeconds": {
        "name": "waitSeconds",
        "kind": "function",
        "description": "Waits for a specified number of seconds in a non-blocking manner.",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The number of seconds to wait.",
            "name": "s"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<void>"
              ]
            },
            "description": "A promise that resolves after the specified time has elapsed."
          }
        ],
        "source_filename": "non-blocking.js",
        "source_lineno": 87,
        "source_range": [
          2378,
          2584
        ]
      },
      "waitMinutes": {
        "name": "waitMinutes",
        "kind": "function",
        "description": "Waits for a specified number of minutes in a non-blocking manner.",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The number of minutes to wait.",
            "name": "min"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<void>"
              ]
            },
            "description": "A promise that resolves after the specified time has elapsed."
          }
        ],
        "source_filename": "non-blocking.js",
        "source_lineno": 101,
        "source_range": [
          2819,
          3031
        ]
      },
      "clearIntervalIf": {
        "name": "clearIntervalIf",
        "kind": "function",
        "description": "Clears the specified interval if it exists.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "undefined"
              ]
            },
            "description": "The interval ID to be cleared.",
            "name": "timeout"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Always returns false."
          }
        ],
        "source_filename": "non-blocking.js",
        "source_lineno": 115,
        "source_range": [
          3214,
          3316
        ]
      },
      "clearTimeoutIf": {
        "name": "clearTimeoutIf",
        "kind": "function",
        "description": "Clears the specified timeout if it exists.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "undefined"
              ]
            },
            "description": "The timeout ID to be cleared.",
            "name": "timeout"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Always returns false."
          }
        ],
        "source_filename": "non-blocking.js",
        "source_lineno": 127,
        "source_range": [
          3499,
          3599
        ]
      },
      "initWorker": {
        "name": "initWorker",
        "kind": "function",
        "description": "Initializes a new worker with the specified module path.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The path to the module to configure the worker.",
            "name": "path"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Worker"
              ]
            },
            "description": "The initialized Worker instance."
          }
        ],
        "source_filename": "non-blocking.js",
        "source_lineno": 139,
        "source_range": [
          3811,
          4011
        ]
      }
    },
    "path": {
      "getDir": {
        "name": "getDir",
        "kind": "function",
        "description": "Extracts the directory of file.",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The filesystem path from which to extract the directory.",
            "name": "path"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The directory from the given path."
          }
        ],
        "source_filename": "path.js",
        "source_lineno": 27,
        "source_range": [
          660,
          721
        ]
      },
      "getDirName": {
        "name": "getDirName",
        "kind": "function",
        "description": "Extracts the name of the directory from a given filesystem path.",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The filesystem path from which to extract the directory name.",
            "name": "path"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The name of the directory from the given path."
          }
        ],
        "source_filename": "path.js",
        "source_lineno": 36,
        "source_range": [
          967,
          1052
        ]
      },
      "pathSep": {
        "name": "pathSep",
        "kind": "function",
        "description": "Retrieves the platform-specific path separator character.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The path separator character used by the system."
          }
        ],
        "source_filename": "path.js",
        "source_lineno": 44,
        "source_range": [
          1205,
          1258
        ]
      },
      "isAbsolutePath": {
        "name": "isAbsolutePath",
        "kind": "function",
        "description": "Determines if the current path is absolute.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if the current path is absolute, false otherwise."
          }
        ],
        "source_filename": "path.js",
        "source_lineno": 52,
        "source_range": [
          1404,
          1468
        ]
      },
      "pathFileName": {
        "name": "pathFileName",
        "kind": "function",
        "description": "Retrieves the file name from the provided file path.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The complete file path.",
            "name": "path"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The file name extracted from the path."
          }
        ],
        "source_filename": "path.js",
        "source_lineno": 61,
        "source_range": [
          1658,
          1726
        ]
      },
      "pathBaseName": {
        "name": "pathBaseName",
        "kind": "function",
        "description": "Returns the last portion of a path, similar to the Unix `basename` command.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The file path to process.",
            "name": "path"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The last segment of the path."
          }
        ],
        "source_filename": "path.js",
        "source_lineno": 70,
        "source_range": [
          1930,
          1998
        ]
      },
      "pathFileExt": {
        "name": "pathFileExt",
        "kind": "function",
        "description": "Retrieves the file extension from the provided file path.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The complete file path.",
            "name": "path"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The file extension extracted from the path."
          }
        ],
        "source_filename": "path.js",
        "source_lineno": 79,
        "source_range": [
          2198,
          2264
        ]
      },
      "pathResolve": {
        "name": "pathResolve",
        "kind": "function",
        "description": "Resolves a sequence of path segments into an absolute path using the environment's path resolver.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The path or sequence of paths to resolve.",
            "name": "path"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "- The resolved absolute path."
          }
        ],
        "source_filename": "path.js",
        "source_lineno": 88,
        "source_range": [
          2508,
          2574
        ]
      },
      "pathNormalize": {
        "name": "pathNormalize",
        "kind": "function",
        "description": "Normalizes a given path, resolving '..' and '.' segments using the environment's path normalizer.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The path to normalize.",
            "name": "path"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "- The normalized path."
          }
        ],
        "source_filename": "path.js",
        "source_lineno": 97,
        "source_range": [
          2792,
          2862
        ]
      },
      "comparePaths": {
        "name": "comparePaths",
        "kind": "function",
        "description": "Compares two file paths after resolving them to their absolute forms to check if they refer to the same location.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The first file path to compare.",
            "name": "path1"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The second file path to compare.",
            "name": "path2"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if both paths resolve to the same absolute path, otherwise false."
          }
        ],
        "source_filename": "path.js",
        "source_lineno": 107,
        "source_range": [
          3225,
          3337
        ]
      },
      "getUniquePath": {
        "name": "getUniquePath",
        "kind": "function",
        "description": "Generates a unique filesystem path by appending a number to the input path if the original path exists.",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The base path for which a unique version is required.",
            "name": "path"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "A unique filesystem path based on the input path."
          }
        ],
        "source_filename": "path.js",
        "source_lineno": 116,
        "source_range": [
          3617,
          3798
        ]
      },
      "getUniqueFilename": {
        "name": "getUniqueFilename",
        "kind": "function",
        "description": "Generates a unique filename by appending a number to the original path if it already exists.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The original file path.",
            "name": "path"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The original file extension.",
            "name": "ext"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "A unique folder path."
          }
        ],
        "source_filename": "path.js",
        "source_lineno": 132,
        "source_range": [
          4067,
          4301
        ]
      }
    },
    "windows": {
      "active_window": {
        "name": "active_window",
        "kind": "member",
        "description": "Current active window ID.",
        "source_filename": "windows.js",
        "source_lineno": 26,
        "source_range": [
          520,
          538
        ]
      },
      "open_windows": {
        "name": "open_windows",
        "kind": "member",
        "description": "Array of open windows.",
        "source_filename": "windows.js",
        "source_lineno": 32,
        "source_range": [
          616,
          638
        ]
      },
      "openWindow": {
        "name": "openWindow",
        "kind": "function",
        "description": "Opens a new window with the specified file.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The path to the HTML file to open in the new window.",
            "name": "file"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The identifier (wid) of the newly opened window."
          }
        ],
        "source_filename": "windows.js",
        "source_lineno": 40,
        "source_range": [
          861,
          1357
        ]
      },
      "openWindowDevTools": {
        "name": "openWindowDevTools",
        "kind": "function",
        "description": "Opens the developer tools for a specified window by ID if it exists.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The window ID.",
            "name": "wid"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if the developer tools were opened; otherwise, false."
          }
        ],
        "source_filename": "windows.js",
        "source_lineno": 64,
        "source_range": [
          1572,
          1740
        ]
      },
      "closeWindows": {
        "name": "closeWindows",
        "kind": "function",
        "description": "Closes the specified window.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Identifier for the window to close.",
            "name": "wid"
          }
        ],
        "source_filename": "windows.js",
        "source_lineno": 76,
        "source_range": [
          1855,
          1976
        ]
      },
      "closeWindow": {
        "name": "closeWindow",
        "kind": "function",
        "description": "Closes the specified window.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Identifier for the window to close.",
            "name": "wid"
          }
        ],
        "source_filename": "windows.js",
        "source_lineno": 86,
        "source_range": [
          2091,
          2245
        ]
      },
      "getWindow": {
        "name": "getWindow",
        "kind": "function",
        "description": "Retrieves the window object with the specified ID.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The ID of the window.",
            "name": "wid"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object",
                "boolean"
              ]
            },
            "description": "- The window object if found, otherwise false."
          }
        ],
        "source_filename": "windows.js",
        "source_lineno": 99,
        "source_range": [
          2446,
          2590
        ]
      },
      "getCurrentWindow": {
        "name": "getCurrentWindow",
        "kind": "function",
        "description": "Retrieves current active window object.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Object",
                "boolean"
              ]
            },
            "description": "- The window object if found, otherwise false."
          }
        ],
        "source_filename": "windows.js",
        "source_lineno": 111,
        "source_range": [
          2729,
          2907
        ]
      },
      "gcw": {
        "name": "gcw",
        "kind": "function",
        "description": "Retrieves current active window object.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Object",
                "boolean"
              ]
            },
            "description": "- The window object if found, otherwise false."
          }
        ],
        "source_filename": "windows.js",
        "source_lineno": 123,
        "source_range": [
          3046,
          3093
        ]
      },
      "showWindow": {
        "name": "showWindow",
        "kind": "function",
        "description": "Shows the specified window.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The ID of the window to show.",
            "name": "wid"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean",
                "undefined"
              ]
            },
            "description": "- Returns false if the window ID is invalid, otherwise the result of the show() method."
          }
        ],
        "source_filename": "windows.js",
        "source_lineno": 132,
        "source_range": [
          3321,
          3473
        ]
      },
      "hideWindow": {
        "name": "hideWindow",
        "kind": "function",
        "description": "Hides the specified window.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The ID of the window to hide.",
            "name": "wid"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean",
                "undefined"
              ]
            },
            "description": "- Returns false if the window ID is invalid, otherwise the result of the hide() method."
          }
        ],
        "source_filename": "windows.js",
        "source_lineno": 145,
        "source_range": [
          3703,
          3855
        ]
      },
      "focusWindow": {
        "name": "focusWindow",
        "kind": "function",
        "description": "Brings the specified window to the foreground.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The ID of the window to focus.",
            "name": "wid"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean",
                "undefined"
              ]
            },
            "description": "- Returns false if the window ID is invalid."
          }
        ],
        "source_filename": "windows.js",
        "source_lineno": 158,
        "source_range": [
          4062,
          4216
        ]
      },
      "minimizeWindow": {
        "name": "minimizeWindow",
        "kind": "function",
        "description": "Minimizes the specified window.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The ID of the window to minimize.",
            "name": "wid"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean",
                "undefined"
              ]
            },
            "description": "- Returns false if the window ID is invalid, otherwise the result of the minimize() method."
          }
        ],
        "source_filename": "windows.js",
        "source_lineno": 171,
        "source_range": [
          4458,
          4618
        ]
      },
      "centerWindow": {
        "name": "centerWindow",
        "kind": "function",
        "description": "Centers the specified window on the screen.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The ID of the window to center.",
            "name": "wid"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean",
                "undefined"
              ]
            },
            "description": "- Returns false if the window ID is invalid, otherwise the result of the center() method."
          }
        ],
        "source_filename": "windows.js",
        "source_lineno": 184,
        "source_range": [
          4868,
          5024
        ]
      },
      "moveTopWindow": {
        "name": "moveTopWindow",
        "kind": "function",
        "description": "Moves the specified window to the top of the window stack.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The ID of the window to move to the top.",
            "name": "wid"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean",
                "undefined"
              ]
            },
            "description": "- Returns false if the window ID is invalid, otherwise the result of the moveTop() method."
          }
        ],
        "source_filename": "windows.js",
        "source_lineno": 197,
        "source_range": [
          5299,
          5457
        ]
      },
      "setWindowSize": {
        "name": "setWindowSize",
        "kind": "function",
        "description": "Sets the size of the specified window.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The ID of the window.",
            "name": "wid"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new width of the window.",
            "name": "width"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new height of the window.",
            "name": "height"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean",
                "undefined"
              ]
            },
            "description": "- Returns false if the window ID is invalid."
          }
        ],
        "source_filename": "windows.js",
        "source_lineno": 212,
        "source_range": [
          5765,
          5951
        ]
      },
      "setWindowPos": {
        "name": "setWindowPos",
        "kind": "function",
        "description": "Sets the position of the specified window.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The ID of the window.",
            "name": "wid"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new left position of the window.",
            "name": "left"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new top position of the window.",
            "name": "top"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean",
                "undefined"
              ]
            },
            "description": "- Returns false if the window ID is invalid."
          }
        ],
        "source_filename": "windows.js",
        "source_lineno": 227,
        "source_range": [
          6273,
          6449
        ]
      },
      "setWindowResizable": {
        "name": "setWindowResizable",
        "kind": "function",
        "description": "Sets the resizable state of the specified window.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The ID of the window.",
            "name": "wid"
          },
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Whether the window should be resizable.",
            "name": "state"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean",
                "undefined"
              ]
            },
            "description": "- Returns false if the window ID is invalid, otherwise the result of the setResizable() method."
          }
        ],
        "source_filename": "windows.js",
        "source_lineno": 241,
        "source_range": [
          6769,
          6949
        ]
      },
      "setWindowMovable": {
        "name": "setWindowMovable",
        "kind": "function",
        "description": "Sets the movable state of the specified window.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The ID of the window.",
            "name": "wid"
          },
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Whether the window should be movable.",
            "name": "state"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean",
                "undefined"
              ]
            },
            "description": "- Returns false if the window ID is invalid, otherwise the result of the setMovable() method."
          }
        ],
        "source_filename": "windows.js",
        "source_lineno": 255,
        "source_range": [
          7265,
          7453
        ]
      },
      "setWindowAspectRatio": {
        "name": "setWindowAspectRatio",
        "kind": "function",
        "description": "Sets the aspect ratio of the specified window.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The ID of the window.",
            "name": "wid"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The desired aspect ratio of the window.",
            "name": "aspect_ratio"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean",
                "undefined"
              ]
            },
            "description": "- Returns false if the window ID is invalid, otherwise the result of the setAspectRatio() method."
          }
        ],
        "source_filename": "windows.js",
        "source_lineno": 269,
        "source_range": [
          7780,
          7990
        ]
      },
      "setWindowOpacity": {
        "name": "setWindowOpacity",
        "kind": "function",
        "description": "Sets the opacity of the specified window.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The ID of the window.",
            "name": "wid"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The desired opacity level (0 to 1).",
            "name": "opacity"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean",
                "undefined"
              ]
            },
            "description": "- Returns false if the window ID is invalid, otherwise the result of the setOpacity() method."
          }
        ],
        "source_filename": "windows.js",
        "source_lineno": 283,
        "source_range": [
          8299,
          8491
        ]
      },
      "setWindowTitle": {
        "name": "setWindowTitle",
        "kind": "function",
        "description": "Sets the position of the specified window.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The ID of the window.",
            "name": "wid"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new left position of the window.",
            "name": "left"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new top position of the window.",
            "name": "top"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean",
                "undefined"
              ]
            },
            "description": "- Returns false if the window ID is invalid."
          }
        ],
        "source_filename": "windows.js",
        "source_lineno": 298,
        "source_range": [
          8813,
          8985
        ]
      },
      "getWindowSize": {
        "name": "getWindowSize",
        "kind": "function",
        "description": "Retrieves the size of the specified window.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The ID of the window.",
            "name": "wid"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "boolean"
              ]
            },
            "description": "- An array [width, height] if the window exists, otherwise false."
          }
        ],
        "source_filename": "windows.js",
        "source_lineno": 311,
        "source_range": [
          9197,
          9355
        ]
      },
      "getWindowPos": {
        "name": "getWindowPos",
        "kind": "function",
        "description": "Retrieves the position of the specified window.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The ID of the window.",
            "name": "wid"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "boolean"
              ]
            },
            "description": "- An array [left, top] if the window exists, otherwise false."
          }
        ],
        "source_filename": "windows.js",
        "source_lineno": 324,
        "source_range": [
          9567,
          9723
        ]
      },
      "openDocumentation": {
        "name": "openDocumentation",
        "kind": "function",
        "description": "Opens window with documentation",
        "params": [],
        "async": true,
        "source_filename": "windows.js",
        "source_lineno": 335,
        "source_range": [
          9776,
          10120
        ]
      },
      "openDoc": {
        "name": "openDoc",
        "kind": "function",
        "description": "Opens window with documentation",
        "params": [],
        "async": true,
        "source_filename": "windows.js",
        "source_lineno": 349,
        "source_range": [
          10175,
          10242
        ]
      },
      "openWindow3D": {
        "name": "openWindow3D",
        "kind": "function",
        "description": "Opens a new 3D window and imports specified modules.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<Object>"
              ]
            },
            "optional": true,
            "defaultvalue": "[]",
            "description": "An array of import objects specifying modules to import.",
            "name": "imports"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<Object>"
              ]
            },
            "description": "A promise that resolves to the window object once imports are ready."
          }
        ],
        "async": true,
        "source_filename": "windows.js",
        "source_lineno": 358,
        "source_range": [
          10519,
          12208
        ]
      },
      "openPlotlyjs": {
        "name": "openPlotlyjs",
        "kind": "function",
        "description": "Opens a Plotly.js window and initializes the plot container.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<Window>"
              ]
            },
            "description": "The window object where Plotly.js is loaded and the plot container is available."
          }
        ],
        "async": true,
        "source_filename": "windows.js",
        "source_lineno": 408,
        "source_range": [
          12403,
          12963
        ]
      },
      "openCanvas": {
        "name": "openCanvas",
        "kind": "function",
        "description": "Opens a window with canvas and D3 and initializes the canvas element.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<Window>"
              ]
            },
            "description": "The window object where D3 is loaded and the canvas element is available."
          }
        ],
        "async": true,
        "source_filename": "windows.js",
        "source_lineno": 428,
        "source_range": [
          13160,
          13840
        ]
      },
      "openWindowBlank": {
        "name": "openWindowBlank",
        "kind": "function",
        "description": "Opens a new blank window.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<Object>"
              ]
            },
            "description": "A promise that resolves to the window object once it is ready."
          }
        ],
        "async": true,
        "source_filename": "windows.js",
        "source_lineno": 450,
        "source_range": [
          13984,
          14253
        ]
      },
      "showMermaidGraph": {
        "name": "showMermaidGraph",
        "kind": "function",
        "description": "Renders a Mermaid diagram in a new window.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The Mermaid graph definition.",
            "name": "graph_definition"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<Object>"
              ]
            },
            "description": "A promise that resolves to the window context once the graph is rendered."
          }
        ],
        "async": true,
        "source_filename": "windows.js",
        "source_lineno": 463,
        "source_range": [
          14495,
          15272
        ]
      }
    },
    "figures": {
      "open_figures": {
        "name": "open_figures",
        "kind": "member",
        "description": "Array of open figures.",
        "source_filename": "figures.js",
        "source_lineno": 31,
        "source_range": [
          698,
          720
        ]
      },
      "active_figure": {
        "name": "active_figure",
        "kind": "member",
        "description": "Current active figure ID.",
        "source_filename": "figures.js",
        "source_lineno": 37,
        "source_range": [
          802,
          825
        ]
      },
      "figure": {
        "name": "figure",
        "kind": "function",
        "description": "Opens or updates a figure with specified options.",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Identifier for the figure.",
            "name": "id"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The identifier of the opened or updated figure."
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 45,
        "source_range": [
          1023,
          1459
        ]
      },
      "getFigure": {
        "name": "getFigure",
        "kind": "function",
        "description": "Retrieves the figure object associated with the specified figure ID.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The identifier of the figure to retrieve.",
            "name": "fid"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object",
                "boolean"
              ]
            },
            "description": "The figure object if found, otherwise `false`."
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 67,
        "source_range": [
          1698,
          1842
        ]
      },
      "getFigureWindow": {
        "name": "getFigureWindow",
        "kind": "function",
        "description": "Retrieves the window of the figure object associated with the specified figure ID.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The identifier of the figure to retrieve.",
            "name": "fid"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object",
                "boolean"
              ]
            },
            "description": "The figure object if found, otherwise `false`."
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 80,
        "source_range": [
          2095,
          2249
        ]
      },
      "getCurrentFigure": {
        "name": "getCurrentFigure",
        "kind": "function",
        "description": "Retrieves current active figure object.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Object",
                "boolean"
              ]
            },
            "description": "The figure object if found, otherwise `false`."
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 92,
        "source_range": [
          2392,
          2570
        ]
      },
      "gcf": {
        "name": "gcf",
        "kind": "function",
        "description": "Retrieves current active figure object.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Object",
                "boolean"
              ]
            },
            "description": "The figure object if found, otherwise `false`."
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 104,
        "source_range": [
          2711,
          2758
        ]
      },
      "getPlot": {
        "name": "getPlot",
        "kind": "function",
        "description": "Retrieves the plot object for a specified figure ID.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The identifier of the figure to retrieve the plot for.",
            "name": "fid"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object",
                "boolean"
              ]
            },
            "description": "The plot object if it exists, otherwise `false`."
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 113,
        "source_range": [
          2998,
          3176
        ]
      },
      "getAxes": {
        "name": "getAxes",
        "kind": "function",
        "description": "Retrieves the plot object for a specified figure ID.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The identifier of the figure to retrieve the plot for.",
            "name": "fid"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object",
                "boolean"
              ]
            },
            "description": "The plot object if it exists, otherwise `false`."
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 126,
        "source_range": [
          3416,
          3464
        ]
      },
      "getCurrentPlot": {
        "name": "getCurrentPlot",
        "kind": "function",
        "description": "Retrieves plot from current active figure object.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Object",
                "boolean"
              ]
            },
            "description": "The figure object if found, otherwise `false`."
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 134,
        "source_range": [
          3617,
          3798
        ]
      },
      "gcp": {
        "name": "gcp",
        "kind": "function",
        "description": "Retrieves plot from current active figure object.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Object",
                "boolean"
              ]
            },
            "description": "The figure object if found, otherwise `false`."
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 146,
        "source_range": [
          3949,
          3994
        ]
      },
      "getCurrentAxes": {
        "name": "getCurrentAxes",
        "kind": "function",
        "description": "Retrieves plot from current active figure object.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Object",
                "boolean"
              ]
            },
            "description": "The figure object if found, otherwise `false`."
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 154,
        "source_range": [
          4147,
          4203
        ]
      },
      "gca": {
        "name": "gca",
        "kind": "function",
        "description": "Retrieves plot from current active figure object.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Object",
                "boolean"
              ]
            },
            "description": "The figure object if found, otherwise `false`."
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 162,
        "source_range": [
          4354,
          4399
        ]
      },
      "focusFigure": {
        "name": "focusFigure",
        "kind": "function",
        "description": "Brings the specified figure to the foreground.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The ID of the figure to focus.",
            "name": "fid"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean",
                "undefined"
              ]
            },
            "description": "- Returns false if the figure ID is invalid."
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 171,
        "source_range": [
          4606,
          4760
        ]
      },
      "setFigureSize": {
        "name": "setFigureSize",
        "kind": "function",
        "description": "Sets the size of a specified figure.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The ID of the figure.",
            "name": "fid"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new width of the figure.",
            "name": "width"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new height of the figure.",
            "name": "height"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean",
                "undefined"
              ]
            },
            "description": "- Returns false if the figure ID is invalid."
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 186,
        "source_range": [
          5066,
          5252
        ]
      },
      "setFigurePos": {
        "name": "setFigurePos",
        "kind": "function",
        "description": "Sets the position of a specified figure.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The ID of the figure.",
            "name": "fid"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new left position of the figure.",
            "name": "left"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The new top position of the figure.",
            "name": "top"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean",
                "undefined"
              ]
            },
            "description": "- Returns false if the figure ID is invalid."
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 201,
        "source_range": [
          5572,
          5748
        ]
      },
      "setFigureTitle": {
        "name": "setFigureTitle",
        "kind": "function",
        "description": "Sets the title of the specified figure.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The figure ID.",
            "name": "fid"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The new title for the figure.",
            "name": "title"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean",
                "*"
              ]
            },
            "description": "The result of setting the title, or false if the figure does not exist."
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 215,
        "source_range": [
          6010,
          6182
        ]
      },
      "getFigureSize": {
        "name": "getFigureSize",
        "kind": "function",
        "description": "Retrieves the size of a specified figure.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The ID of the figure.",
            "name": "fid"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "boolean"
              ]
            },
            "description": "- Returns an array [width, height] or false if the figure ID is invalid."
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 228,
        "source_range": [
          6399,
          6557
        ]
      },
      "getFigurePos": {
        "name": "getFigurePos",
        "kind": "function",
        "description": "Retrieves the position of a specified figure.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The ID of the figure.",
            "name": "fid"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "boolean"
              ]
            },
            "description": "- Returns an array [left, top] or false if the figure ID is invalid."
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 241,
        "source_range": [
          6774,
          6930
        ]
      },
      "closeFigure": {
        "name": "closeFigure",
        "kind": "function",
        "description": "Closes a specified figure.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The ID of the figure to close.",
            "name": "fid"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean",
                "undefined"
              ]
            },
            "description": "- Returns false if the figure ID is invalid."
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 254,
        "source_range": [
          7115,
          7269
        ]
      },
      "close": {
        "name": "close",
        "kind": "function",
        "description": "Closes a figure or window by its identifier.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "string"
              ]
            },
            "description": "The identifier of the figure or window to close. Use \"all\" to close all.",
            "name": "id"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "defaultvalue": "'figure'",
            "description": "The type of object to close ('figure' or 'window').",
            "name": "type"
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 267,
        "source_range": [
          7534,
          7856
        ]
      },
      "saveFigureDialog": {
        "name": "saveFigureDialog",
        "kind": "function",
        "description": "Opens a dialog for saving a figure in various formats.",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The figure identifier.",
            "name": "fid"
          }
        ],
        "async": true,
        "source_filename": "figures.js",
        "source_lineno": 285,
        "source_range": [
          7982,
          8587
        ]
      },
      "saveFigure": {
        "name": "saveFigure",
        "kind": "function",
        "description": "Saves a figure to a specified path in various formats.",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The figure identifier.",
            "name": "fid"
          },
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The path where the figure should be saved.",
            "name": "figure_path"
          },
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "Optional dimensions [width, height] to use if saving as a PDF.",
            "name": "size"
          }
        ],
        "async": true,
        "source_filename": "figures.js",
        "source_lineno": 311,
        "source_range": [
          8883,
          10485
        ]
      },
      "legend": {
        "name": "legend",
        "kind": "function",
        "description": "Sets the label for the x-axis of the active figure.",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The label for the x-axis.",
            "name": "label"
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 364,
        "source_range": [
          10615,
          10847
        ]
      },
      "xlabel": {
        "name": "xlabel",
        "kind": "function",
        "description": "Sets the label for the x-axis of the active figure.",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The label for the x-axis.",
            "name": "label"
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 376,
        "source_range": [
          10977,
          11209
        ]
      },
      "ylabel": {
        "name": "ylabel",
        "kind": "function",
        "description": "Sets the label for the y-axis of the active figure.",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The label for the y-axis.",
            "name": "label"
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 388,
        "source_range": [
          11337,
          11569
        ]
      },
      "zlabel": {
        "name": "zlabel",
        "kind": "function",
        "description": "Sets the label for the z-axis of the active figure.",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The label for the z-axis.",
            "name": "label"
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 400,
        "source_range": [
          11697,
          11929
        ]
      },
      "title": {
        "name": "title",
        "kind": "function",
        "description": "Sets the title of the active figure.",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The title text.",
            "name": "label"
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 412,
        "source_range": [
          12034,
          12264
        ]
      },
      "xlim": {
        "name": "xlim",
        "kind": "function",
        "description": "Sets the xlim of the active figure.",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "x limits.",
            "name": "lim"
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 424,
        "source_range": [
          12358,
          12582
        ]
      },
      "ylim": {
        "name": "ylim",
        "kind": "function",
        "description": "Sets the ylim of the active figure.",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "y limits.",
            "name": "lim"
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 436,
        "source_range": [
          12676,
          12900
        ]
      },
      "zlim": {
        "name": "zlim",
        "kind": "function",
        "description": "Sets the zlim of the active figure.",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "z limits.",
            "name": "lim"
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 448,
        "source_range": [
          12994,
          13218
        ]
      },
      "view": {
        "name": "view",
        "kind": "function",
        "description": "Adjusts the view based on azimuth and elevation angles.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The azimuth angle.",
            "name": "azimuth"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The elevation angle.",
            "name": "elevation"
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 461,
        "source_range": [
          13399,
          13653
        ]
      },
      "zoom": {
        "name": "zoom",
        "kind": "function",
        "description": "Adjusts the zoom based on zoom factor.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The zoom factor.",
            "name": "factor"
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 473,
        "source_range": [
          13760,
          13990
        ]
      },
      "axis": {
        "name": "axis",
        "kind": "function",
        "description": "Applies the specified style to the active figure's plot axis.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The style configuration to apply to the axis.",
            "name": "style"
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 485,
        "source_range": [
          14150,
          14378
        ]
      },
      "printFigure": {
        "name": "printFigure",
        "kind": "function",
        "description": "Prints the currently active figure to a file.",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The name of the file where the figure should be printed.",
            "name": "filename"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Printing options.",
            "name": "options"
          }
        ],
        "async": true,
        "source_filename": "figures.js",
        "source_lineno": 498,
        "source_range": [
          14585,
          14857
        ]
      },
      "plot": {
        "name": "plot",
        "kind": "function",
        "description": "Plots data on the active figure.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "Data traces to plot.",
            "name": "traces"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Configuration options for plotting.",
            "name": "options"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The plot identifier."
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 512,
        "source_range": [
          15074,
          15523
        ]
      }
    },
    "time": {
      "timezone": {
        "name": "timezone",
        "kind": "member",
        "description": "Current timezone string.",
        "source_filename": "time.js",
        "source_lineno": 25,
        "source_range": [
          576,
          609
        ]
      },
      "last_tic": {
        "name": "last_tic",
        "kind": "member",
        "description": "Last tic timestamp.",
        "source_filename": "time.js",
        "source_lineno": 31,
        "source_range": [
          691,
          708
        ]
      },
      "tic": {
        "name": "tic",
        "kind": "function",
        "description": "Starts a timer for measuring elapsed time. To be used with `toc` to measure time intervals.",
        "source_filename": "time.js",
        "source_lineno": 33
      },
      "toc": {
        "name": "toc",
        "kind": "function",
        "description": "Calculates the wall-clock time elapsed since a specified start time or the last call to `tic()`, in seconds.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "description": "The start time in milliseconds from which to calculate elapsed time. If omitted, uses the last time recorded by `tic()`.",
            "name": "tic"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The elapsed time in seconds."
          }
        ],
        "source_filename": "time.js",
        "source_lineno": 56,
        "source_range": [
          1622,
          1795
        ]
      },
      "tocms": {
        "name": "tocms",
        "kind": "function",
        "description": "Calculates the wall-clock time elapsed since a specified start time or the last call to `tic()`, in seconds.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "description": "The start time in milliseconds from which to calculate elapsed time. If omitted, uses the last time recorded by `tic()`.",
            "name": "tic"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The elapsed time in milliseconds."
          }
        ],
        "source_filename": "time.js",
        "source_lineno": 70,
        "source_range": [
          2139,
          2251
        ]
      },
      "getTimestamp": {
        "name": "getTimestamp",
        "kind": "function",
        "description": "Gets the current Unix timestamp adjusted for a specified timezone.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The current Unix timestamp as an integer."
          }
        ],
        "source_filename": "time.js",
        "source_lineno": 81,
        "source_range": [
          2410,
          2499
        ]
      },
      "getTime": {
        "name": "getTime",
        "kind": "function",
        "description": "Gets the current time as a string adjusted for a specified timezone.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The current time in 'HH:mm:ss' format."
          }
        ],
        "source_filename": "time.js",
        "source_lineno": 89,
        "source_range": [
          2657,
          2751
        ]
      },
      "getFullTime": {
        "name": "getFullTime",
        "kind": "function",
        "description": "Gets the current time with milliseconds as a string adjusted for a specified timezone.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The current time in 'HH:mm:ss.SSS' format."
          }
        ],
        "source_filename": "time.js",
        "source_lineno": 97,
        "source_range": [
          2931,
          3033
        ]
      },
      "getDate": {
        "name": "getDate",
        "kind": "function",
        "description": "Gets the current date as a string adjusted for a specified timezone.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The current date in 'dd.MM.yyyy.' format."
          }
        ],
        "source_filename": "time.js",
        "source_lineno": 105,
        "source_range": [
          3194,
          3291
        ]
      },
      "getDateTime": {
        "name": "getDateTime",
        "kind": "function",
        "description": "Gets the current date and time as a string adjusted for a specified timezone.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The current date and time in 'dd.MM.yyyy. HH:mm:ss' format."
          }
        ],
        "source_filename": "time.js",
        "source_lineno": 113,
        "source_range": [
          3479,
          3589
        ]
      },
      "getDateTimeFull": {
        "name": "getDateTimeFull",
        "kind": "function",
        "description": "Gets the current date and time with milliseconds as a string adjusted for a specified timezone.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The current date and time in 'dd.MM.yyyy. HH:mm:ss.SSS' format."
          }
        ],
        "source_filename": "time.js",
        "source_lineno": 121,
        "source_range": [
          3799,
          3917
        ]
      },
      "getDateTimeStr": {
        "name": "getDateTimeStr",
        "kind": "function",
        "description": "Gets the current date and time as a string suitable for filenames, adjusted for a specified timezone.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The current date and time in 'ddMMyyyy_HHmmss' format for use in filenames."
          }
        ],
        "source_filename": "time.js",
        "source_lineno": 129,
        "source_range": [
          4145,
          4253
        ]
      },
      "setTimezone": {
        "name": "setTimezone",
        "kind": "function",
        "description": "Sets the timezone to be used for time calculations and formatting. This method allows the application to adjust displayed times according to a specific timezone.",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The timezone identifier (e.g., \"America/New_York\", \"Europe/Paris\") to be set for all time-related operations.",
            "name": "tz"
          }
        ],
        "source_filename": "time.js",
        "source_lineno": 137,
        "source_range": [
          4578,
          4625
        ]
      }
    },
    "array": {
      "array": {
        "name": "array",
        "kind": "function",
        "description": "Converts an iterable or array-like object into a standard array.",
        "params": [
          {
            "type": {
              "names": [
                "Iterable",
                "ArrayLike"
              ]
            },
            "description": "The iterable or array-like object to convert.",
            "name": "A"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "A new array containing the elements from the input."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 28,
        "source_range": [
          708,
          748
        ]
      },
      "end": {
        "name": "end",
        "kind": "function",
        "description": "Retrieves the last element from the provided array.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The array from which the last element is to be retrieved.",
            "name": "A"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The last element of the array. If the array is empty, returns undefined."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 37,
        "source_range": [
          996,
          1034
        ]
      },
      "endi": {
        "name": "endi",
        "kind": "function",
        "description": "Returns the index of the last element in the array.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The array to evaluate.",
            "name": "A"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The index of the last element."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 46,
        "source_range": [
          1210,
          1246
        ]
      },
      "column": {
        "name": "column",
        "kind": "function",
        "description": "Retrieves a specific column from the provided matrix.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The matrix array.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The column index to retrieve.",
            "name": "col"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The specified column as an array."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 56,
        "source_range": [
          1478,
          1548
        ]
      },
      "row": {
        "name": "row",
        "kind": "function",
        "description": "Retrieves a specific row from the provided matrix.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The matrix array.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The row index to retrieve.",
            "name": "row"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The specified row as an array."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 66,
        "source_range": [
          1769,
          1805
        ]
      },
      "first": {
        "name": "first",
        "kind": "function",
        "description": "Returns the first N elements from an array.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The input array.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 1,
            "description": "The number of elements to return from the start.",
            "name": "N"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "- An array containing the first N elements."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 76,
        "source_range": [
          2055,
          2102
        ]
      },
      "last": {
        "name": "last",
        "kind": "function",
        "description": "Returns the last N elements from an array.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The input array.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 1,
            "description": "The number of elements to return from the end.",
            "name": "N"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "- An array containing the last N elements."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 86,
        "source_range": [
          2348,
          2392
        ]
      },
      "index": {
        "name": "index",
        "kind": "function",
        "description": "Generates an array of indices based on rows and columns.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Array.<number>"
              ]
            },
            "description": "The row index or array of row indices.",
            "name": "rows"
          },
          {
            "type": {
              "names": [
                "number",
                "Array.<number>"
              ]
            },
            "description": "The column index or array of column indices.",
            "name": "cols"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The maximum number of rows.",
            "name": "rows_max"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An array of calculated indices."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 97,
        "source_range": [
          2747,
          3130
        ]
      },
      "indexOfAll": {
        "name": "indexOfAll",
        "kind": "function",
        "description": "Finds all indices of a specified value in the array.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The array to search.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to find.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An array of indices where the value is found."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 122,
        "source_range": [
          3365,
          3518
        ]
      },
      "indexOf": {
        "name": "indexOf",
        "kind": "function",
        "description": "Returns the index of a value in an array.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "Array to search.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "Value to locate.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Index of value or -1."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 137,
        "source_range": [
          3710,
          3762
        ]
      },
      "indexOfMulti": {
        "name": "indexOfMulti",
        "kind": "function",
        "description": "Finds the index of a sequence of elements in the array.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The array to search.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The sequence of elements to find.",
            "name": "search_elements"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "The index to start the search from.",
            "name": "from_index"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The starting index of the found sequence, or -1 if not found."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 148,
        "source_range": [
          4117,
          4691
        ]
      },
      "shuffleIndices": {
        "name": "shuffleIndices",
        "kind": "function",
        "description": "Shuffles indices of an array using the Fisher-Yates algorithm.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "Array whose indices are to be shuffled.",
            "name": "array"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "Shuffled array of indices."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 173,
        "source_range": [
          4889,
          5122
        ]
      },
      "setSub": {
        "name": "setSub",
        "kind": "function",
        "description": "Sets a subset of array elements based on provided indices.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The target array.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The indices at which to set values.",
            "name": "indices"
          },
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The array of values to set.",
            "name": "B"
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 188,
        "source_range": [
          5365,
          5571
        ]
      },
      "setSubB": {
        "name": "setSubB",
        "kind": "function",
        "description": "Sets a subset of array elements based on provided boolean indices.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The target array to modify.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "Array.<boolean>"
              ]
            },
            "description": "A boolean array indicating which elements to set (true = set, false = skip).",
            "name": "b"
          },
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The array of values to set at the indices determined by `b`.",
            "name": "B"
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 204,
        "source_range": [
          5901,
          5954
        ]
      },
      "getSub": {
        "name": "getSub",
        "kind": "function",
        "description": "Retrieves a subset of array elements based on provided indices.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The source array.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The indices of elements to retrieve.",
            "name": "indices"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "An array containing the retrieved elements."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 214,
        "source_range": [
          6219,
          6389
        ]
      },
      "getSubB": {
        "name": "getSubB",
        "kind": "function",
        "description": "Retrieves a subset of array elements based on provided indices.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The source array.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "Array.<boolean>"
              ]
            },
            "description": "A boolean array indicating which elements to retrieve.",
            "name": "b"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "An array containing the retrieved elements."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 229,
        "source_range": [
          6667,
          6721
        ]
      },
      "moveElement": {
        "name": "moveElement",
        "kind": "function",
        "description": "Moves an element within the array from one index to another.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The array to modify.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The index of the element to move.",
            "name": "from_index"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The target index where the element should be moved.",
            "name": "to_index"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The modified array with the element moved."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 240,
        "source_range": [
          7067,
          7414
        ]
      },
      "removeElement": {
        "name": "removeElement",
        "kind": "function",
        "description": "Removes an element from the array at the specified index.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The array to modify.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The index of the element to remove.",
            "name": "index"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The array after the element has been removed."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 258,
        "source_range": [
          7671,
          7731
        ]
      },
      "removeElementByValue": {
        "name": "removeElementByValue",
        "kind": "function",
        "description": "Removes the first occurrence of a specified value from the array.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The array to modify.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to remove.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The array after the value has been removed."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 268,
        "source_range": [
          7974,
          8113
        ]
      },
      "removeElementProp": {
        "name": "removeElementProp",
        "kind": "function",
        "description": "Removes elements from array A that have properties listed in array B.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<Object>"
              ]
            },
            "description": "The array to filter.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The array of properties or values to remove.",
            "name": "B"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "description": "The property name to check in objects within A.",
            "name": "prop"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The filtered array."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 283,
        "source_range": [
          8448,
          8649
        ]
      },
      "findIndexProp": {
        "name": "findIndexProp",
        "kind": "function",
        "description": "Finds the index of the first object in the array where the specified property matches the given value.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<Object>"
              ]
            },
            "description": "The array to search.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The property name to compare.",
            "name": "property"
          },
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to match.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The index of the matching object, or -1 if not found."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 298,
        "source_range": [
          9011,
          9140
        ]
      },
      "setValueAt": {
        "name": "setValueAt",
        "kind": "function",
        "description": "Sets a value at the specified multi-dimensional indices in the array.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The target array.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An array of indices representing the position.",
            "name": "indices"
          },
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to set.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value that was set."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 311,
        "source_range": [
          9437,
          9666
        ]
      },
      "getValueAt": {
        "name": "getValueAt",
        "kind": "function",
        "description": "Retrieves a value from the array at the specified multi-dimensional indices.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The source array.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An array of indices representing the position.",
            "name": "indices"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value at the specified indices, or undefined if out of bounds."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 326,
        "source_range": [
          9971,
          10318
        ]
      },
      "setVal": {
        "name": "setVal",
        "kind": "function",
        "description": "Alias for setValueAt.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The target array.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An array of indices representing the position.",
            "name": "indices"
          },
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to set.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value that was set."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 349,
        "source_range": [
          10569,
          10647
        ]
      },
      "getVal": {
        "name": "getVal",
        "kind": "function",
        "description": "Alias for getValueAt.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The source array.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An array of indices representing the position.",
            "name": "indices"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value at the specified indices, or undefined if out of bounds."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 359,
        "source_range": [
          10899,
          10963
        ]
      },
      "arrayIntersect": {
        "name": "arrayIntersect",
        "kind": "function",
        "description": "Returns the intersection of two arrays.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "First array.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "Second array.",
            "name": "B"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "Common elements."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 369,
        "source_range": [
          11140,
          11293
        ]
      },
      "cloneArray": {
        "name": "cloneArray",
        "kind": "function",
        "description": "Creates a shallow copy of the provided array.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The array to clone.",
            "name": "A"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "A new array containing all elements from A."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 380,
        "source_range": [
          11472,
          11522
        ]
      },
      "createArray": {
        "name": "createArray",
        "kind": "function",
        "description": "Creates an n-dimensional array.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The size of the first dimension.",
            "name": "length"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "variable": true,
            "description": "Sizes of subsequent dimensions.",
            "name": "dimensions"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The newly created n-dimensional array."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 390,
        "source_range": [
          11772,
          12031
        ]
      },
      "createFilledArray": {
        "name": "createFilledArray",
        "kind": "function",
        "description": "Creates an n-dimensional array filled with a specific value.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The size of the first dimension.",
            "name": "length"
          },
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to fill the array with.",
            "name": "val"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "variable": true,
            "description": "Sizes of subsequent dimensions.",
            "name": "dimensions"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The filled n-dimensional array."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 409,
        "source_range": [
          12357,
          12670
        ]
      },
      "fill": {
        "name": "fill",
        "kind": "function",
        "description": "Fills the array with a specific value.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to fill the array with.",
            "name": "val"
          },
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The array to fill.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of elements to fill.",
            "name": "length"
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 429,
        "source_range": [
          12893,
          12981
        ]
      },
      "NaNs": {
        "name": "NaNs",
        "kind": "function",
        "description": "Creates an n-dimensional array filled with NaN.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "variable": true,
            "description": "The size of each dimension.",
            "name": "size"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The NaN-filled n-dimensional array."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 440,
        "source_range": [
          13169,
          13237
        ]
      },
      "zeros": {
        "name": "zeros",
        "kind": "function",
        "description": "Creates an n-dimensional array filled with zeros.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "variable": true,
            "description": "The size of each dimension.",
            "name": "size"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The zero-filled n-dimensional array."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 449,
        "source_range": [
          13426,
          13493
        ]
      },
      "ones": {
        "name": "ones",
        "kind": "function",
        "description": "Creates an n-dimensional array filled with ones.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "variable": true,
            "description": "The size of each dimension.",
            "name": "size"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The one-filled n-dimensional array."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 458,
        "source_range": [
          13680,
          13746
        ]
      },
      "eye": {
        "name": "eye",
        "kind": "function",
        "description": "Creates a 2-dimensional identity matrix.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The size of the identity matrix.",
            "name": "size"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The identity matrix as a 2D array."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 467,
        "source_range": [
          13928,
          13988
        ]
      },
      "scale": {
        "name": "scale",
        "kind": "function",
        "description": "Scales an array by a scalar.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The array to scale.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The scalar value.",
            "name": "s"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The scaled array."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 477,
        "source_range": [
          14183,
          14365
        ]
      },
      "linspace": {
        "name": "linspace",
        "kind": "function",
        "description": "Creates a linearly spaced vector.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The start value.",
            "name": "x1"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The end value.",
            "name": "x2"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 100,
            "description": "The number of points.",
            "name": "N"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The linearly spaced vector."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 495,
        "source_range": [
          14617,
          14789
        ]
      },
      "range": {
        "name": "range",
        "kind": "function",
        "description": "Generates an array of numbers within a specified range.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "variable": true,
            "description": "The start, end, and optional step for the range.",
            "name": "args"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An array containing numbers within the specified range."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 509,
        "source_range": [
          15027,
          15113
        ]
      },
      "colon": {
        "name": "colon",
        "kind": "function",
        "description": "Generates a sequence of numbers from `x1` to `x2` with increments of `dx`.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The starting value of the sequence.",
            "name": "x1"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The ending value of the sequence.",
            "name": "x2"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The increment between values in the sequence.",
            "name": "dx"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An array of numbers from `x1` to `x2` with step size `dx`."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 520,
        "source_range": [
          15489,
          15925
        ]
      },
      "elementWise": {
        "name": "elementWise",
        "kind": "function",
        "description": "Applies a function to corresponding elements of one or more arrays.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The function to apply to the elements.",
            "name": "func"
          },
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "variable": true,
            "description": "One or more arrays to process.",
            "name": "arrays"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "A new array with the function applied to each corresponding element."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 547,
        "source_range": [
          16237,
          16734
        ]
      },
      "arrayfun": {
        "name": "arrayfun",
        "kind": "function",
        "description": "Applies a function to each element of an array or matrix along a specified dimension.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The array or matrix to process.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The dimension along which to apply the function.",
            "name": "dim"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The function to apply to each element.",
            "name": "fun"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The result of applying the function to A."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 573,
        "source_range": [
          17121,
          17197
        ]
      },
      "divideEl": {
        "name": "divideEl",
        "kind": "function",
        "description": "Performs element-wise division on two arrays or matrices.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The numerator array or matrix.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The denominator array or matrix.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The result of the element-wise division."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 583,
        "source_range": [
          17472,
          17538
        ]
      },
      "multiplyEl": {
        "name": "multiplyEl",
        "kind": "function",
        "description": "Performs element-wise multiplication on two arrays or matrices.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The first array or matrix.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The second array or matrix.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The result of the element-wise multiplication."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 593,
        "source_range": [
          17816,
          17886
        ]
      },
      "powEl": {
        "name": "powEl",
        "kind": "function",
        "description": "Raises elements of an array or matrix to the power of elements in another array or matrix, element-wise.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The base array or matrix.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "Array",
                "Matrix",
                "number"
              ]
            },
            "description": "The exponent array, matrix, or scalar.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The result of the element-wise exponentiation."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 603,
        "source_range": [
          18224,
          18284
        ]
      },
      "dot": {
        "name": "dot",
        "kind": "function",
        "description": "Calculates the dot product of two vectors or matrices.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The first input vector or flat array.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The second input vector or flat array.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "description": "Optional number of columns to reshape the inputs into matrices.",
            "name": "cols"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Array.<Array.<number>>"
              ]
            },
            "description": "The resulting dot product, either as a scalar or a matrix."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 614,
        "source_range": [
          18680,
          19021
        ]
      },
      "lZero": {
        "name": "lZero",
        "kind": "function",
        "description": "Determines if the element is greater than zero.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The element to check.",
            "name": "e"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if greater than zero, otherwise false."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 630,
        "source_range": [
          19207,
          19241
        ]
      },
      "b2i": {
        "name": "b2i",
        "kind": "function",
        "description": "Converts a boolean array into an array of indices where the values are `true`.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<boolean>"
              ]
            },
            "description": "The input array of boolean values.",
            "name": "arr"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An array of indices corresponding to `true` values in the input array."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 639,
        "source_range": [
          19504,
          19607
        ]
      },
      "average": {
        "name": "average",
        "kind": "function",
        "description": "Calculates the average value of an array.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The array to average.",
            "name": "arr"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The average value."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 648,
        "source_range": [
          19770,
          19874
        ]
      },
      "averageEM": {
        "name": "averageEM",
        "kind": "function",
        "description": "Calculates the Exponential Moving Average of the data.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The data array.",
            "name": "data"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The smoothing factor between 0 and 1.",
            "name": "alpha"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The Exponential Moving Average of the data."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 660,
        "source_range": [
          20132,
          20367
        ]
      },
      "averageMoving": {
        "name": "averageMoving",
        "kind": "function",
        "description": "Applies a moving average filter to an input array while keeping the output array the same size.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The array of numbers to filter.",
            "name": "inputArray"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The size of the moving window (number of elements to average).",
            "name": "windowSize"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The filtered array with the same length as the input array."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 677,
        "source_range": [
          20736,
          21309
        ]
      },
      "movmean": {
        "name": "movmean",
        "kind": "function",
        "description": "Applies a moving average filter to an input array while keeping the output array the same size.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The array of numbers to filter.",
            "name": "inputArray"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The size of the moving window (number of elements to average).",
            "name": "windowSize"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The filtered array with the same length as the input array."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 707,
        "source_range": [
          21678,
          21770
        ]
      },
      "isequal": {
        "name": "isequal",
        "kind": "function",
        "description": "Determines if two arrays are equal.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The first array.",
            "name": "A1"
          },
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The second array.",
            "name": "A2"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if arrays are equal, otherwise false."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 717,
        "source_range": [
          21981,
          22146
        ]
      },
      "neg": {
        "name": "neg",
        "kind": "function",
        "description": "Negates the boolean values in an array.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<boolean>"
              ]
            },
            "description": "The array to negate.",
            "name": "A"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<boolean>"
              ]
            },
            "description": "The negated array."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 729,
        "source_range": [
          22311,
          22436
        ]
      },
      "all": {
        "name": "all",
        "kind": "function",
        "description": "Determines if all elements in an array evaluate to true.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<boolean>"
              ]
            },
            "description": "The array to check.",
            "name": "A"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if all elements are true, otherwise false."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 742,
        "source_range": [
          22641,
          22779
        ]
      },
      "any": {
        "name": "any",
        "kind": "function",
        "description": "Determines if any element in an array evaluates to true.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<boolean>"
              ]
            },
            "description": "The array to check.",
            "name": "A"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if any element is true, otherwise false."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 757,
        "source_range": [
          22981,
          23118
        ]
      },
      "arrayContains": {
        "name": "arrayContains",
        "kind": "function",
        "description": "Checks if the array contains a specified item.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The array to search.",
            "name": "arr"
          },
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The item to search for.",
            "name": "item"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if the item is found, otherwise false."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 773,
        "source_range": [
          23348,
          23591
        ]
      },
      "hasDuplicates": {
        "name": "hasDuplicates",
        "kind": "function",
        "description": "Checks if an array contains any duplicate elements.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The array to check for duplicates.",
            "name": "array"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if duplicates are found, false otherwise."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 791,
        "source_range": [
          23800,
          23875
        ]
      },
      "removeDuplicates": {
        "name": "removeDuplicates",
        "kind": "function",
        "description": "Removes duplicate values from an array.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The array from which duplicates are to be removed.",
            "name": "arr"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "An array containing only unique elements from the original array."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 800,
        "source_range": [
          24101,
          24214
        ]
      },
      "fliplr": {
        "name": "fliplr",
        "kind": "function",
        "description": "Reverses the order of elements in each row of a matrix.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The matrix array to flip horizontally.",
            "name": "array"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The horizontally flipped matrix."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 809,
        "source_range": [
          24415,
          24462
        ]
      },
      "movelr": {
        "name": "movelr",
        "kind": "function",
        "description": "Moves the first `n` elements of the array to the end.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The array to be modified.",
            "name": "array"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of elements to move from the start to the end.",
            "name": "n"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The modified array with the first `n` elements moved to the end."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 819,
        "source_range": [
          24761,
          24968
        ]
      },
      "plus": {
        "name": "plus",
        "kind": "function",
        "description": "Adds multiple operands, which can be either scalars or arrays.\nIf multiple operands are arrays, they must be of the same length.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Array.<number>"
              ]
            },
            "description": "The operands, scalar or arrays.",
            "name": "args",
            "variable": true
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Array.<number>"
              ]
            },
            "description": "The result of adding all operands."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 835,
        "source_range": [
          25356,
          26356
        ]
      },
      "add": {
        "name": "add",
        "kind": "function",
        "description": "Adds multiple operands, which can be either scalars or arrays.\nIf multiple operands are arrays, they must be of the same length.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Array.<number>"
              ]
            },
            "description": "The operands, scalar or arrays.",
            "name": "args",
            "variable": true
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Array.<number>"
              ]
            },
            "description": "The result of adding all operands."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 870,
        "source_range": [
          26742,
          26791
        ]
      },
      "minus": {
        "name": "minus",
        "kind": "function",
        "description": "Subtracts multiple operands from the first one, which can be either scalars or arrays.\nIf multiple operands are arrays, they must be of the same length.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Array.<number>"
              ]
            },
            "description": "The operands, scalar or arrays.",
            "name": "args",
            "variable": true
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Array.<number>"
              ]
            },
            "description": "The result of subtracting all subsequent operands from the first one."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 881,
        "source_range": [
          27238,
          28461
        ]
      },
      "subtract": {
        "name": "subtract",
        "kind": "function",
        "description": "Subtracts multiple operands from the first one, which can be either scalars or arrays.\nIf multiple operands are arrays, they must be of the same length.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Array.<number>"
              ]
            },
            "description": "The operands, scalar or arrays.",
            "name": "args",
            "variable": true
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Array.<number>"
              ]
            },
            "description": "The result of subtracting all subsequent operands from the first one."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 924,
        "source_range": [
          28908,
          28963
        ]
      },
      "cross3D": {
        "name": "cross3D",
        "kind": "function",
        "description": "Computes the cross product of two 3D vectors.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The first 3D vector.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The second 3D vector.",
            "name": "B"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of columns (typically 1 for single vectors).",
            "name": "cols",
            "defaultvalue": 1
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The cross product vector."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 935,
        "source_range": [
          29264,
          29610
        ]
      },
      "inv": {
        "name": "inv",
        "kind": "function",
        "description": "Computes the inverse of a matrix represented as a flat array.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The input matrix in a flat array format.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of rows and columns in the matrix.",
            "name": "size"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>",
                "false"
              ]
            },
            "description": "The inverted matrix as a flat array, or `false` if the matrix is non-invertible."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 951,
        "source_range": [
          29949,
          30127
        ]
      },
      "concatRow": {
        "name": "concatRow",
        "kind": "function",
        "description": "Concatenates multiple matrices row-wise.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of columns in the concatenated matrix.",
            "name": "cols_C"
          },
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "variable": true,
            "description": "The matrices to concatenate.",
            "name": "args"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The concatenated matrix."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 966,
        "source_range": [
          30375,
          30798
        ]
      },
      "concatCol": {
        "name": "concatCol",
        "kind": "function",
        "description": "Concatenates multiple matrices column-wise.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of rows in the concatenated matrix.",
            "name": "rows_C"
          },
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "variable": true,
            "description": "The matrices to concatenate.",
            "name": "args"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The concatenated matrix."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 990,
        "source_range": [
          31046,
          31102
        ]
      },
      "concat": {
        "name": "concat",
        "kind": "function",
        "description": "Concatenates multiple vectors.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "variable": true,
            "description": "The vectors to concatenate.",
            "name": "args"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The concatenated vector."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 999,
        "source_range": [
          31259,
          31304
        ]
      },
      "repRow": {
        "name": "repRow",
        "kind": "function",
        "description": "Repeats a row vector multiple times.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The row vector to repeat.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of times to repeat the row.",
            "name": "rows"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The repeated row matrix."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 1009,
        "source_range": [
          31528,
          31748
        ]
      },
      "repCol": {
        "name": "repCol",
        "kind": "function",
        "description": "Repeats a column vector multiple times.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The column vector to repeat.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of times to repeat the column.",
            "name": "cols"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The repeated column matrix."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 1026,
        "source_range": [
          31982,
          32202
        ]
      },
      "sumRow": {
        "name": "sumRow",
        "kind": "function",
        "description": "Sums the elements of each row in a matrix.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The matrix array.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of rows in the matrix.",
            "name": "rows"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of columns in the matrix.",
            "name": "cols"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An array containing the sum of each row."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 1044,
        "source_range": [
          32509,
          32704
        ]
      },
      "sumCol": {
        "name": "sumCol",
        "kind": "function",
        "description": "Sums the elements of each column in a matrix.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The matrix array.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of rows in the matrix.",
            "name": "rows"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of columns in the matrix.",
            "name": "cols"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An array containing the sum of each column."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 1061,
        "source_range": [
          33019,
          33214
        ]
      },
      "normRow": {
        "name": "normRow",
        "kind": "function",
        "description": "Calculates the Euclidean norm of each row in a matrix.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The matrix array.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of rows in the matrix.",
            "name": "rows"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of columns in the matrix.",
            "name": "cols"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An array containing the norm of each row."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 1078,
        "source_range": [
          33534,
          33773
        ]
      },
      "normCol": {
        "name": "normCol",
        "kind": "function",
        "description": "Calculates the Euclidean norm of each column in a matrix.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The matrix array.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of rows in the matrix.",
            "name": "rows"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of columns in the matrix.",
            "name": "cols"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An array containing the norm of each column."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 1096,
        "source_range": [
          34101,
          34340
        ]
      },
      "transpose": {
        "name": "transpose",
        "kind": "function",
        "description": "Transposes a matrix.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The matrix array to transpose.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of rows in the original matrix.",
            "name": "rows"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of columns in the original matrix.",
            "name": "cols"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The transposed matrix array."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 1114,
        "source_range": [
          34649,
          34868
        ]
      },
      "multiply": {
        "name": "multiply",
        "kind": "function",
        "description": "Multiplies two matrices.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The first matrix array.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The second matrix array.",
            "name": "B"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of rows in matrix A.",
            "name": "rows_A"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of columns in matrix A.",
            "name": "cols_A"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of columns in matrix B.",
            "name": "cols_B"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The resulting matrix array after multiplication."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 1133,
        "source_range": [
          35300,
          35620
        ]
      },
      "dotColumn": {
        "name": "dotColumn",
        "kind": "function",
        "description": "Performs element-wise dot product on columns of two matrices.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The first matrix array.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The second matrix array.",
            "name": "B"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of rows in each matrix.",
            "name": "rows"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of columns in each matrix.",
            "name": "cols"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An array containing the dot product of each column."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 1153,
        "source_range": [
          36027,
          36250
        ]
      },
      "diag": {
        "name": "diag",
        "kind": "function",
        "description": "Creates a diagonal matrix from a given array.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The array to form the diagonal.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The size of the square matrix.",
            "name": "length"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The diagonal matrix as a 1D array."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 1169,
        "source_range": [
          36502,
          36659
        ]
      },
      "linsolve": {
        "name": "linsolve",
        "kind": "function",
        "description": "Solves a linear system of equations using LU decomposition.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The coefficient matrix.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The constant terms.",
            "name": "B"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The size of the matrix (NxN).",
            "name": "N"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The solution vector."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 1184,
        "source_range": [
          36956,
          37063
        ]
      },
      "reciprocal": {
        "name": "reciprocal",
        "kind": "function",
        "description": "Computes the reciprocal of each element in the array.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The array of numbers.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of elements in the array.",
            "name": "length"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An array containing the reciprocals of the original elements."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 1194,
        "source_range": [
          37353,
          37500
        ]
      },
      "reshape": {
        "name": "reshape",
        "kind": "function",
        "description": "Reshapes an array into a new dimension.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The array to reshape.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of rows in the new shape.",
            "name": "rows"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of columns in the new shape.",
            "name": "cols"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The reshaped array."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 1210,
        "source_range": [
          37851,
          38731
        ]
      },
      "maxi": {
        "name": "maxi",
        "kind": "function",
        "description": "Finds the maximum element in the array and its index, excluding NaN values.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The array to search.",
            "name": "A"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "An array containing the max value and its index."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 1258,
        "source_range": [
          39074,
          39589
        ]
      },
      "mini": {
        "name": "mini",
        "kind": "function",
        "description": "Finds the minimum element in the array and its index, excluding NaN values.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The array to search.",
            "name": "A"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "An array containing the min value and its index."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 1289,
        "source_range": [
          39932,
          40447
        ]
      },
      "sorti": {
        "name": "sorti",
        "kind": "function",
        "description": "Sorts the array in ascending order with indices, excluding NaN values.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The array to sort.",
            "name": "A"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "An array containing the sorted values and their original indices."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 1319,
        "source_range": [
          40728,
          41295
        ]
      },
      "weightedSum": {
        "name": "weightedSum",
        "kind": "function",
        "description": "Computes the weighted sum of two vectors and stores the result in the `ret` array.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The array to store the result.",
            "name": "ret"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Weight for the first vector.",
            "name": "w1"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The first vector.",
            "name": "v1"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Weight for the second vector.",
            "name": "w2"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The second vector.",
            "name": "v2"
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 1347,
        "source_range": [
          41663,
          41789
        ]
      },
      "condiff": {
        "name": "condiff",
        "kind": "function",
        "description": "Computes the consecutive differences of elements in an array.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The input array of numbers.",
            "name": "A"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An array containing the differences between consecutive elements of the input array."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 1358,
        "source_range": [
          42037,
          42104
        ]
      },
      "arrayRand": {
        "name": "arrayRand",
        "kind": "function",
        "description": "Generates an array with random floating-point numbers within a specified range.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The lower bound of the range.",
            "name": "l"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The upper bound of the range.",
            "name": "u"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of rows.",
            "name": "rows"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of columns.",
            "name": "cols"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "optional": true,
            "defaultvalue": "Math.random",
            "description": "The random function to use.",
            "name": "randFun"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An array filled with random numbers within the specified range."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 1371,
        "source_range": [
          42585,
          42851
        ]
      },
      "arrayRandi": {
        "name": "arrayRandi",
        "kind": "function",
        "description": "Generates an array with random integer numbers within a specified range.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An array containing the lower and upper bounds [lower, upper].",
            "name": "lu"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of rows.",
            "name": "rows"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of columns.",
            "name": "cols"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "optional": true,
            "defaultvalue": "Math.random",
            "description": "The random function to use.",
            "name": "randFun"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An array filled with random integers within the specified range."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 1386,
        "source_range": [
          43307,
          43537
        ]
      },
      "normalizeVector": {
        "name": "normalizeVector",
        "kind": "function",
        "description": "Normalizes a 3D vector.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The vector to normalize.",
            "name": "v"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The normalized vector."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 1398,
        "source_range": [
          43684,
          43828
        ]
      },
      "dotVector": {
        "name": "dotVector",
        "kind": "function",
        "description": "Computes the dot product of two 3D vectors.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The first vector.",
            "name": "a"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The second vector.",
            "name": "b"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The dot product of the vectors."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 1410,
        "source_range": [
          44039,
          44106
        ]
      },
      "angleVectors": {
        "name": "angleVectors",
        "kind": "function",
        "description": "Calculates the angle between two vectors.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The first vector.",
            "name": "a"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The second vector.",
            "name": "b"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The angle in radians between vectors a and b."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 1420,
        "source_range": [
          44329,
          44406
        ]
      },
      "skewVector": {
        "name": "skewVector",
        "kind": "function",
        "description": "Creates a skew-symmetric matrix from a 3D vector.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The vector to skew.",
            "name": "v"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The skew-symmetric matrix as a 1D array."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 1429,
        "source_range": [
          44592,
          44696
        ]
      },
      "meshgrid": {
        "name": "meshgrid",
        "kind": "function",
        "description": "Generates coordinate matrices from coordinate vectors for N dimensions.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "variable": true,
            "description": "The coordinate vectors.",
            "name": "args"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The coordinate grids for each dimension."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 1442,
        "source_range": [
          44909,
          45634
        ]
      },
      "areEqual": {
        "name": "areEqual",
        "kind": "function",
        "description": "Determines if two arrays are equal by comparing each element.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The first array to compare.",
            "name": "A1"
          },
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The second array to compare.",
            "name": "A2"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if the arrays are equal, otherwise false."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 1478,
        "source_range": [
          45895,
          46061
        ]
      },
      "dispMatrix": {
        "name": "dispMatrix",
        "kind": "function",
        "description": "Displays a matrix with a variable name.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The name of the variable.",
            "name": "varname"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The matrix array.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of rows in the matrix.",
            "name": "rows"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of columns in the matrix.",
            "name": "cols"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The string representation of the matrix."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 1493,
        "source_range": [
          46415,
          46737
        ]
      },
      "dispRowVector": {
        "name": "dispRowVector",
        "kind": "function",
        "description": "Displays a row vector with a variable name.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The name of the variable.",
            "name": "varname"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The row vector array.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The length of the row vector.",
            "name": "length"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The string representation of the row vector."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 1514,
        "source_range": [
          47036,
          47260
        ]
      },
      "dispColumnVector": {
        "name": "dispColumnVector",
        "kind": "function",
        "description": "Displays a column vector with a variable name.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The name of the variable.",
            "name": "varname"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The column vector array.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The length of the column vector.",
            "name": "length"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The string representation of the column vector."
          }
        ],
        "source_filename": "array.js",
        "source_lineno": 1531,
        "source_range": [
          47571,
          47808
        ]
      }
    },
    "color": {
      "colororder": {
        "name": "colororder",
        "kind": "member",
        "description": "Color order",
        "source_filename": "color.js",
        "source_lineno": 26,
        "source_range": [
          548,
          643
        ]
      },
      "color": {
        "name": "color",
        "kind": "function",
        "description": "Returns a color code based on the provided identifier.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "string",
                "Array.<number>"
              ]
            },
            "description": "Identifier for the color. Can be a numeric index, a predefined color name, or an RGB array.",
            "name": "id"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The hex code of the color."
          }
        ],
        "source_filename": "color.js",
        "source_lineno": 357,
        "source_range": [
          11719,
          12674
        ]
      },
      "getColorG2R": {
        "name": "getColorG2R",
        "kind": "function",
        "description": "Calculates a color on a gradient from green to red based on a value.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "A number between 0 and 1 indicating position on the gradient.",
            "name": "value"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0.3,
            "description": "A scaling factor to adjust the gradient effect.",
            "name": "k"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The hsl color string."
          }
        ],
        "source_filename": "color.js",
        "source_lineno": 410,
        "source_range": [
          12986,
          13236
        ]
      },
      "colourGradientor": {
        "name": "colourGradientor",
        "kind": "function",
        "description": "Calculates the gradient color between two colors based on a percentage.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The percentage (0 to 1) between the two colors.",
            "name": "p"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The RGB values of the start color.",
            "name": "rgb_beginning"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The RGB values of the end color.",
            "name": "rgb_end"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The RGB values of the calculated gradient color."
          }
        ],
        "source_filename": "color.js",
        "source_lineno": 429,
        "source_range": [
          13639,
          13966
        ]
      },
      "rgb2hex": {
        "name": "rgb2hex",
        "kind": "function",
        "description": "Converts RGB color values to HEX.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The red color value (0-255).",
            "name": "r"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The green color value (0-255).",
            "name": "g"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The blue color value (0-255).",
            "name": "b"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The HEX representation of the color."
          }
        ],
        "source_filename": "color.js",
        "source_lineno": 447,
        "source_range": [
          14261,
          14818
        ]
      },
      "rgbToHsl": {
        "name": "rgbToHsl",
        "kind": "function",
        "description": "Converts RGB color values to HSL (Hue, Saturation, Lightness).",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The red color value (0-255).",
            "name": "r"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The green color value (0-255).",
            "name": "g"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The blue color value (0-255).",
            "name": "b"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The HSL representation of the color."
          }
        ],
        "source_filename": "color.js",
        "source_lineno": 471,
        "source_range": [
          15144,
          15713
        ]
      },
      "hslToRgb": {
        "name": "hslToRgb",
        "kind": "function",
        "description": "Converts HSL color values to RGB.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The hue value (0-360).",
            "name": "h"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The saturation value (0-100).",
            "name": "s"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The lightness value (0-100).",
            "name": "l"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The RGB representation of the color."
          }
        ],
        "source_filename": "color.js",
        "source_lineno": 504,
        "source_range": [
          16000,
          16428
        ]
      },
      "hueToRgb": {
        "name": "hueToRgb",
        "kind": "function",
        "description": "Helper function for converting a hue to RGB.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Helper value 1.",
            "name": "v1"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Helper value 2.",
            "name": "v2"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The hue value to convert.",
            "name": "vh"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The RGB value for the hue."
          }
        ],
        "source_filename": "color.js",
        "source_lineno": 530,
        "source_range": [
          16688,
          16936
        ]
      }
    },
    "conversion": {
      "speak": {
        "name": "speak",
        "kind": "function",
        "description": "Converts text to speech using the Web Speech API.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The text message to be spoken.",
            "name": "msg"
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 34,
        "source_range": [
          826,
          948
        ]
      },
      "num2str": {
        "name": "num2str",
        "kind": "function",
        "description": "Converts a number to a string with specified precision.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number to convert.",
            "name": "num"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of digits after the decimal point.",
            "name": "precision",
            "defaultvalue": 2
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The formatted string."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 47,
        "source_range": [
          1201,
          1358
        ]
      },
      "changeExtension": {
        "name": "changeExtension",
        "kind": "function",
        "description": "Changes the extension of a file path.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The original file path.",
            "name": "path"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The new extension without the dot.",
            "name": "ext_new"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The file path with the new extension."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 61,
        "source_range": [
          1596,
          1741
        ]
      },
      "removeExtension": {
        "name": "removeExtension",
        "kind": "function",
        "description": "Remove the extension of a file path.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The original file path.",
            "name": "path"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The file path without extension."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 71,
        "source_range": [
          1907,
          2027
        ]
      },
      "ned2rpy": {
        "name": "ned2rpy",
        "kind": "function",
        "description": "Transforms coordinates from NED (North, East, Down) frame to RPY (Roll, Pitch, Yaw) frame.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The roll angle in radians.",
            "name": "roll"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The pitch angle in radians.",
            "name": "pitch"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The yaw angle in radians.",
            "name": "yaw"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "optional": true,
            "description": "Optional matrix to apply transformation to.",
            "name": "A"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "The transformation matrix."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 84,
        "source_range": [
          2448,
          3129
        ]
      },
      "uint8ToString": {
        "name": "uint8ToString",
        "kind": "function",
        "description": "Converts an array of uint8 numbers to a string.",
        "params": [
          {
            "type": {
              "names": [
                "Uint8Array"
              ]
            },
            "description": "The array of uint8 numbers.",
            "name": "data"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The converted string."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 109,
        "source_range": [
          3303,
          3369
        ]
      },
      "hex2dec": {
        "name": "hex2dec",
        "kind": "function",
        "description": "Converts an array of hexadecimal strings to an array of decimal numbers.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<string>"
              ]
            },
            "description": "The array of hexadecimal strings.",
            "name": "hex"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The array of decimal numbers."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 118,
        "source_range": [
          3591,
          3684
        ]
      },
      "numToASCII": {
        "name": "numToASCII",
        "kind": "function",
        "description": "Converts a number to its ASCII character equivalent.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number to convert.",
            "name": "num"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The ASCII character."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 129,
        "source_range": [
          3852,
          3908
        ]
      },
      "numToHexStr": {
        "name": "numToHexStr",
        "kind": "function",
        "description": "Converts a number to a hexadecimal string with a fixed number of digits.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number to convert.",
            "name": "num"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of digits in the resulting string.",
            "name": "dig",
            "defaultvalue": 4
          },
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Whether to add a '0x' prefix.",
            "name": "prefix",
            "defaultvalue": false
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The hexadecimal string."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 140,
        "source_range": [
          4233,
          4424
        ]
      },
      "int8To2ASCII": {
        "name": "int8To2ASCII",
        "kind": "function",
        "description": "Converts an int8 number to two ASCII characters.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The int8 number.",
            "name": "num"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The two ASCII characters."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 153,
        "source_range": [
          4587,
          4745
        ]
      },
      "int16To4ASCII": {
        "name": "int16To4ASCII",
        "kind": "function",
        "description": "Converts an int16 number to four ASCII characters representing its hexadecimal value.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The int16 number to convert.",
            "name": "num"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "A string of four ASCII characters."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 163,
        "source_range": [
          4966,
          5188
        ]
      },
      "uint8sToInt16": {
        "name": "uint8sToInt16",
        "kind": "function",
        "description": "Combines two uint8 values into an int16 value.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The first uint8 value.",
            "name": "part1"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The second uint8 value.",
            "name": "part2"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The combined int16 value."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 174,
        "source_range": [
          5410,
          5601
        ]
      },
      "uint8sToInt32": {
        "name": "uint8sToInt32",
        "kind": "function",
        "description": "Combines four uint8 values into an int32 value.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The first uint8 value.",
            "name": "part1"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The second uint8 value.",
            "name": "part2"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The third uint8 value.",
            "name": "part3"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The fourth uint8 value.",
            "name": "part4"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The combined int32 value."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 190,
        "source_range": [
          5929,
          6216
        ]
      },
      "uint8sToFloat": {
        "name": "uint8sToFloat",
        "kind": "function",
        "description": "Converts four uint8 values into a floating-point number.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The first uint8 value.",
            "name": "part1"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The second uint8 value.",
            "name": "part2"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The third uint8 value.",
            "name": "part3"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The fourth uint8 value.",
            "name": "part4"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The floating-point number."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 208,
        "source_range": [
          6554,
          7026
        ]
      },
      "uint16ToInt16": {
        "name": "uint16ToInt16",
        "kind": "function",
        "description": "Converts a uint16 value to an int16 value.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The uint16 value to convert.",
            "name": "num"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The converted int16 value."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 225,
        "source_range": [
          7196,
          7279
        ]
      },
      "uint8To2ASCII": {
        "name": "uint8To2ASCII",
        "kind": "function",
        "description": "Converts a uint8 number to two ASCII characters.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The uint8 number to convert.",
            "name": "num"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "A string containing two ASCII characters representing the hexadecimal value."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 234,
        "source_range": [
          7505,
          7662
        ]
      },
      "ms2time": {
        "name": "ms2time",
        "kind": "function",
        "description": "Converts milliseconds to a time string in mm:ss format.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The time in milliseconds.",
            "name": "ms"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The time string."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 244,
        "source_range": [
          7831,
          7990
        ]
      },
      "dec2bin": {
        "name": "dec2bin",
        "kind": "function",
        "description": "Converts a decimal number to a binary string.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The decimal number.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The binary string."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 255,
        "source_range": [
          8146,
          8199
        ]
      },
      "dec2hex": {
        "name": "dec2hex",
        "kind": "function",
        "description": "Converts a decimal number to a hexadecimal string.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The decimal number.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The hexadecimal string."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 264,
        "source_range": [
          8365,
          8418
        ]
      },
      "dec2oct": {
        "name": "dec2oct",
        "kind": "function",
        "description": "Converts a decimal number to an octal string.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The decimal number.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The octal string."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 273,
        "source_range": [
          8573,
          8626
        ]
      },
      "round": {
        "name": "round",
        "kind": "function",
        "description": "Rounds a number to a specified number of decimal places.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number to round.",
            "name": "number"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 2,
            "description": "The number of decimal places.",
            "name": "decimals"
          },
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "optional": true,
            "defaultvalue": false,
            "description": "Whether to return the result as a string.",
            "name": "string"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "string"
              ]
            },
            "description": "The rounded number."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 284,
        "source_range": [
          8954,
          9315
        ]
      },
      "roundIf": {
        "name": "roundIf",
        "kind": "function",
        "description": "Rounds a number to a fixed number of decimal places if it is a number.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The value to round.",
            "name": "value"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of digits after the decimal point.",
            "name": "p"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The rounded number with a fixed number of decimal places, or the original value if it is not a number."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 307,
        "source_range": [
          9653,
          9790
        ]
      },
      "roundIfPrec": {
        "name": "roundIfPrec",
        "kind": "function",
        "description": "Rounds a number to a fixed number of decimal places if it is a number.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The value to round.",
            "name": "value"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of digits after the decimal point.",
            "name": "p"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The rounded number with a fixed number of decimal places, or the original value if it is not a number."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 321,
        "source_range": [
          10130,
          10258
        ]
      },
      "bitString": {
        "name": "bitString",
        "kind": "function",
        "description": "Converts a uint8_t number to a bit string.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number to convert.",
            "name": "n"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "A bit string representing the number."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 334,
        "source_range": [
          10431,
          10502
        ]
      },
      "getBitFlags": {
        "name": "getBitFlags",
        "kind": "function",
        "description": "Generates a set of flags from a bitfield based on a mapping.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The mapping of bit positions to flag names.",
            "name": "map"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The column name in the mapping that contains the flag names.",
            "name": "name_column"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The bitfield value.",
            "name": "val"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "An object with keys as flag names and values indicating the presence (1) or absence (0) of each flag."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 345,
        "source_range": [
          10923,
          11218
        ]
      },
      "getEnumVal": {
        "name": "getEnumVal",
        "kind": "function",
        "description": "Retrieves the enumeration value based on a property match.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The enumeration object to search.",
            "name": "enum_object"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The property name to match.",
            "name": "prop"
          },
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The property value to match.",
            "name": "val"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The enumeration key as a number, or the index if not found."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 364,
        "source_range": [
          11557,
          11813
        ]
      },
      "invertEnum": {
        "name": "invertEnum",
        "kind": "function",
        "description": "Inverts an enumeration, swapping keys and values, optionally based on a specific property of the enumeration values.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The enumeration object to invert.",
            "name": "enum_object"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "description": "An optional property name to use from the enumeration values.",
            "name": "prop"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The inverted enumeration object."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 381,
        "source_range": [
          12168,
          12568
        ]
      },
      "arrayToHexStr": {
        "name": "arrayToHexStr",
        "kind": "function",
        "description": "Converts an array of numbers to a string of hexadecimal values, optionally prefixed with \"0x\".",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The array to convert.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "optional": true,
            "defaultvalue": true,
            "description": "Whether to add a \"0x\" prefix to each hex value.",
            "name": "prefix"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "A string of hexadecimal values."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 404,
        "source_range": [
          12881,
          13226
        ]
      },
      "arrayToASCII": {
        "name": "arrayToASCII",
        "kind": "function",
        "description": "Converts an array of numbers to an ASCII string.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The array of numbers to convert.",
            "name": "array"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The ASCII string representation of the array."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 423,
        "source_range": [
          13434,
          13493
        ]
      },
      "extend": {
        "name": "extend",
        "kind": "function",
        "description": "Extends an object with properties from additional objects.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "variable": true,
            "description": "The objects to merge into the target object.",
            "name": "objects"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The extended object."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 432,
        "source_range": [
          13696,
          13957
        ]
      },
      "normalizeRC": {
        "name": "normalizeRC",
        "kind": "function",
        "description": "Normalizes the value of a radio control (RC) input.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The RC input value.",
            "name": "rc"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "The deadzone value below which the output is set to zero.",
            "name": "deadzone"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The normalized value."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 454,
        "source_range": [
          14217,
          14389
        ]
      },
      "checkValueUpdate": {
        "name": "checkValueUpdate",
        "kind": "function",
        "description": "Checks if a value has been updated and updates the last value if it has.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "An object containing the current value and the last value.",
            "name": "data"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if the value has been updated; false otherwise."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 467,
        "source_range": [
          14647,
          14809
        ]
      },
      "resetValue": {
        "name": "resetValue",
        "kind": "function",
        "description": "Resets the value and last value properties of an object.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The object whose value and last value properties will be reset.",
            "name": "data"
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 480,
        "source_range": [
          14979,
          15062
        ]
      },
      "adcToNewtons": {
        "name": "adcToNewtons",
        "kind": "function",
        "description": "Converts an ADC count to force in Newtons.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The raw ADC count value.",
            "name": "adc_count"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The capacity of the load cell in Newtons.",
            "name": "load_cell_capacity"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 24,
            "description": "The ADC resolution in bits.",
            "name": "adc_resolution"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 128,
            "description": "The gain applied to the ADC.",
            "name": "adc_gain"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 2,
            "description": "The ADC sensitivity in mV/V.",
            "name": "adc_sensitivity"
          },
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "optional": true,
            "defaultvalue": true,
            "description": "Indicates if the ADC is bipolar.",
            "name": "adc_bipolar"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The calculated force in Newtons."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 495,
        "source_range": [
          15610,
          16084
        ]
      },
      "data2blobUrl": {
        "name": "data2blobUrl",
        "kind": "function",
        "description": "Converts file data from a given path to a blob URL.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Relative path from the application's base path to the file.",
            "name": "path"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "A blob URL representing the file's data."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 513,
        "source_range": [
          16311,
          16416
        ]
      },
      "trbl2xy": {
        "name": "trbl2xy",
        "kind": "function",
        "description": "Converts top, right, bottom, and left margins into x and y coordinates.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Container width.",
            "name": "cont_width"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Container height.",
            "name": "cont_height"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Element width.",
            "name": "width"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Element height.",
            "name": "height"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Top margin.",
            "name": "top"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Right margin.",
            "name": "right"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Bottom margin.",
            "name": "bottom"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Left margin.",
            "name": "left"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "Array containing x and y coordinates."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 529,
        "source_range": [
          16933,
          17316
        ]
      },
      "simpleObj2Csv": {
        "name": "simpleObj2Csv",
        "kind": "function",
        "description": "Generates a CSV string from an simple object containing arrays of values.\nEach key in the object represents a column in the CSV. This function handles uneven array lengths by filling missing values with an empty string.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The object containing arrays of data. Each key will be a column header.",
            "name": "data"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "defaultvalue": "','",
            "description": "The delimiter to use for separating entries in the CSV (defaults to a comma).",
            "name": "delimiter"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The generated CSV as a string, with each row representing an entry and each column representing data from the corresponding key in the input object."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 553,
        "source_range": [
          17951,
          18388
        ]
      },
      "simpleArray2Csv": {
        "name": "simpleArray2Csv",
        "kind": "function",
        "description": "Converts a 2D array into a CSV string format.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "An array of arrays to be converted into CSV format.",
            "name": "data"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "defaultvalue": "','",
            "description": "The delimiter to separate the values in the CSV.",
            "name": "delimiter"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The formatted CSV string."
          }
        ],
        "source_filename": "conversion.js",
        "source_lineno": 572,
        "source_range": [
          18673,
          19022
        ]
      }
    },
    "device": {
      "checkDriver": {
        "name": "checkDriver",
        "kind": "function",
        "description": "Checks if a specific driver is installed on the system.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Name of the driver to check.",
            "name": "driver_name"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if the driver is found, false otherwise."
          }
        ],
        "source_filename": "device.js",
        "source_lineno": 41,
        "source_range": [
          1350,
          2437
        ]
      },
      "checkDriverFTDI": {
        "name": "checkDriverFTDI",
        "kind": "function",
        "description": "Checks if the drivers for FTDI devices are installed.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if the drivers are found, false otherwise."
          }
        ],
        "source_filename": "device.js",
        "source_lineno": 79,
        "source_range": [
          2584,
          2660
        ]
      },
      "checkDriverCP210x": {
        "name": "checkDriverCP210x",
        "kind": "function",
        "description": "Checks if the drivers for Silicon Labs CP210x USB to UART bridge are installed.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if the drivers are found, false otherwise."
          }
        ],
        "source_filename": "device.js",
        "source_lineno": 87,
        "source_range": [
          2834,
          2900
        ]
      },
      "checkDriverCH340": {
        "name": "checkDriverCH340",
        "kind": "function",
        "description": "Checks if the drivers for CH340 USB to serial converter are installed.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if the drivers are found, false otherwise."
          }
        ],
        "source_filename": "device.js",
        "source_lineno": 95,
        "source_range": [
          3065,
          3134
        ]
      },
      "checkArduino": {
        "name": "checkArduino",
        "kind": "function",
        "description": "Check if Arduino CLI is available.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if available."
          }
        ],
        "source_filename": "device.js",
        "source_lineno": 103,
        "source_range": [
          3233,
          3452
        ]
      },
      "compileArduino": {
        "name": "compileArduino",
        "kind": "function",
        "description": "Compile Arduino project.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Project directory.",
            "name": "dir"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object",
                "boolean"
              ]
            },
            "description": "Compilation result or false on error."
          }
        ],
        "source_filename": "device.js",
        "source_lineno": 117,
        "source_range": [
          3615,
          4450
        ]
      },
      "uploadArduino": {
        "name": "uploadArduino",
        "kind": "function",
        "description": "Upload Arduino project.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Project directory.",
            "name": "dir"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "description": "Optional port.",
            "name": "port"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object",
                "boolean"
              ]
            },
            "description": "Upload result or false on error."
          }
        ],
        "source_filename": "device.js",
        "source_lineno": 148,
        "source_range": [
          4651,
          5666
        ]
      },
      "parseArduinoOtuput": {
        "name": "parseArduinoOtuput",
        "kind": "function",
        "description": "Parses Arduino output from stdout or stderr.",
        "params": [
          {
            "type": {
              "names": [
                "object"
              ]
            },
            "name": "output"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "object"
              ]
            }
          }
        ],
        "source_filename": "device.js",
        "source_lineno": 184,
        "source_range": [
          5785,
          6248
        ]
      },
      "getGamepads": {
        "name": "getGamepads",
        "kind": "function",
        "description": "Retrieves the current state of all connected gamepads.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<Object>"
              ]
            },
            "description": "An array of connected gamepad objects."
          }
        ],
        "source_filename": "device.js",
        "source_lineno": 205,
        "source_range": [
          6390,
          6519
        ]
      },
      "onGamepadConnected": {
        "name": "onGamepadConnected",
        "kind": "function",
        "description": "Registers a callback function to be called when a gamepad is connected.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The function to execute when a gamepad connects.",
            "name": "callback"
          }
        ],
        "source_filename": "device.js",
        "source_lineno": 215,
        "source_range": [
          6696,
          7095
        ]
      },
      "onGamepadDisconnected": {
        "name": "onGamepadDisconnected",
        "kind": "function",
        "description": "Registers a callback function to be called when a gamepad is disconnected.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The function to execute when a gamepad disconnects.",
            "name": "callback"
          }
        ],
        "source_filename": "device.js",
        "source_lineno": 233,
        "source_range": [
          7278,
          7686
        ]
      },
      "getGamepad": {
        "name": "getGamepad",
        "kind": "function",
        "description": "Retrieves a specific gamepad by its ID.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The index of the gamepad to retrieve.",
            "name": "id"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Data reading interval in milliseconds.",
            "name": "dt"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_DEVICE_GAMEPAD"
              ]
            },
            "description": "The corresponding gamepad object."
          }
        ],
        "source_filename": "device.js",
        "source_lineno": 253,
        "source_range": [
          7953,
          8037
        ]
      },
      "getWebcams": {
        "name": "getWebcams",
        "kind": "function",
        "description": "Retrieves a list of available webcam (video input) devices.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<Object>"
              ]
            },
            "description": "A promise that resolves to an array of video input devices."
          }
        ],
        "async": true,
        "source_filename": "device.js",
        "source_lineno": 261,
        "source_range": [
          8206,
          8422
        ]
      },
      "getMicrophones": {
        "name": "getMicrophones",
        "kind": "function",
        "description": "Retrieves a list of available microphone (audio input) devices.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<Object>"
              ]
            },
            "description": "A promise that resolves to an array of audio input devices."
          }
        ],
        "async": true,
        "source_filename": "device.js",
        "source_lineno": 272,
        "source_range": [
          8592,
          8812
        ]
      },
      "getAudioOutputs": {
        "name": "getAudioOutputs",
        "kind": "function",
        "description": "Retrieves a list of available audio output devices.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<Object>"
              ]
            },
            "description": "A promise that resolves to an array of audio output devices."
          }
        ],
        "async": true,
        "source_filename": "device.js",
        "source_lineno": 283,
        "source_range": [
          8972,
          9194
        ]
      },
      "webcam": {
        "name": "webcam",
        "kind": "function",
        "description": "Opens a new window to display the webcam feed from the specified device.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The unique identifier of the webcam device to use.",
            "name": "device_id"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<WebcamResult>"
              ]
            },
            "description": "An object containing the window instance, video element, and media stream."
          }
        ],
        "async": true,
        "source_filename": "device.js",
        "source_lineno": 295,
        "source_range": [
          9486,
          10469
        ]
      },
      "webcamCapture": {
        "name": "webcamCapture",
        "kind": "function",
        "description": "Initiates webcam video capture.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Configuration options for webcam capture.",
            "name": "opts"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "Callback invoked with each frame's image data buffer.",
            "name": "frameCallback"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "optional": true,
            "description": "Optional callback to edit each frame before processing.",
            "name": "editCallback"
          }
        ],
        "source_filename": "device.js",
        "source_lineno": 335,
        "source_range": [
          10787,
          10920
        ]
      },
      "getDesktopSources": {
        "name": "getDesktopSources",
        "kind": "function",
        "description": "Retrieves desktop sources from the current environment.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<DesktopSource>"
              ]
            },
            "description": "An array of desktop sources."
          }
        ],
        "source_filename": "device.js",
        "source_lineno": 344,
        "source_range": [
          11061,
          11131
        ]
      },
      "showDesktopSources": {
        "name": "showDesktopSources",
        "kind": "function",
        "description": "Displays the available desktop sources by generating and injecting HTML elements for each source.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "void"
              ]
            }
          }
        ],
        "source_filename": "device.js",
        "source_lineno": 352,
        "source_range": [
          11274,
          11843
        ]
      },
      "desktopCapture": {
        "name": "desktopCapture",
        "kind": "function",
        "description": "Initiates desktop screen capture.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Configuration options for desktop capture.",
            "name": "opts"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "Callback invoked with each frame's image data buffer.",
            "name": "frameCallback"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "optional": true,
            "description": "Optional callback to edit each frame before processing.",
            "name": "editCallback"
          }
        ],
        "source_filename": "device.js",
        "source_lineno": 368,
        "source_range": [
          12160,
          12295
        ]
      },
      "capture": {
        "name": "capture",
        "kind": "function",
        "description": "Captures media frames based on the provided options.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Configuration options for capturing.",
            "name": "opts"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The ID of the media source.",
            "name": "opts.id"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Type of capture ('webcam' or 'desktop').",
            "name": "opts.type"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "Callback invoked with each frame's image data buffer.",
            "name": "frameCallback"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "optional": true,
            "description": "Optional callback to edit each frame before processing.",
            "name": "editCallback"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "An object containing control functions and resources for the capture session."
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "return.stop - Function to stop the capture."
          },
          {
            "type": {
              "names": [
                "CanvasRenderingContext2D"
              ]
            },
            "description": "return.ctx - The 2D rendering context of the OffscreenCanvas."
          },
          {
            "type": {
              "names": [
                "OffscreenCanvas"
              ]
            },
            "description": "return.offscreenCanvas - The OffscreenCanvas used for rendering frames."
          },
          {
            "type": {
              "names": [
                "MediaStreamTrack"
              ]
            },
            "description": "return.videoTrack - The video track being captured."
          },
          {
            "type": {
              "names": [
                "MediaStreamTrackProcessor"
              ]
            },
            "description": "return.trackProcessor - The processor for the video track."
          },
          {
            "type": {
              "names": [
                "ReadableStreamDefaultReader"
              ]
            },
            "description": "return.reader - Reader for the media stream."
          }
        ],
        "async": true,
        "source_filename": "device.js",
        "source_lineno": 388,
        "source_range": [
          13410,
          16105
        ]
      },
      "getCameraResolutions": {
        "name": "getCameraResolutions",
        "kind": "function",
        "description": "Gets supported camera resolutions for a specific device.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The camera device ID.",
            "name": "device_id"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<Array.<Object>>"
              ]
            },
            "description": "Supported resolutions."
          }
        ],
        "async": true,
        "source_filename": "device.js",
        "source_lineno": 492,
        "source_range": [
          16302,
          16945
        ]
      },
      "showAudioWaveform": {
        "name": "showAudioWaveform",
        "kind": "function",
        "description": "Displays an audio waveform on the canvas.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The microphone device ID.",
            "name": "device_id"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 2048,
            "description": "FFT size for analysis.",
            "name": "fftSize"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Controls to stop or reset the waveform."
          }
        ],
        "async": true,
        "source_filename": "device.js",
        "source_lineno": 520,
        "source_range": [
          17193,
          19373
        ]
      }
    },
    "serial_device": {
      "listSerialPorts": {
        "name": "listSerialPorts",
        "kind": "function",
        "description": "Retrieves all available serial ports.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<Array>"
              ]
            },
            "description": "Resolves with an array of serial port info."
          }
        ],
        "async": true,
        "source_filename": "serial-device.js",
        "source_lineno": 27,
        "source_range": [
          660,
          740
        ]
      },
      "checkDeviceUSB": {
        "name": "checkDeviceUSB",
        "kind": "function",
        "description": "Checks if there is a USB device connected with the specified Vendor ID and Product ID.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Vendor ID of the USB device.",
            "name": "VID"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Product ID of the USB device.",
            "name": "PID"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if the device is found, false otherwise."
          }
        ],
        "async": true,
        "source_filename": "serial-device.js",
        "source_lineno": 37,
        "source_range": [
          1041,
          1390
        ]
      },
      "checkDeviceSTM": {
        "name": "checkDeviceSTM",
        "kind": "function",
        "description": "Checks for a connected USB device by STM and an optional Product ID.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "defaultvalue": "'5740'",
            "description": "Product ID of the USB device, default is for Virtual COM Port.",
            "name": "PID"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if the device is found, false otherwise."
          }
        ],
        "async": true,
        "source_filename": "serial-device.js",
        "source_lineno": 53,
        "source_range": [
          1656,
          1749
        ]
      },
      "checkDeviceCH340": {
        "name": "checkDeviceCH340",
        "kind": "function",
        "description": "Checks if there is a USB device connected using a CH340 chip.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if the device is found, false otherwise."
          }
        ],
        "async": true,
        "source_filename": "serial-device.js",
        "source_lineno": 61,
        "source_range": [
          1909,
          1995
        ]
      },
      "connectSerialPorts": {
        "name": "connectSerialPorts",
        "kind": "function",
        "description": "Opens a serial port.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Port path.",
            "name": "port"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 9600,
            "description": "Baud rate.",
            "name": "baudrate"
          },
          {
            "type": {
              "names": [
                "object"
              ]
            },
            "optional": true,
            "defaultvalue": "{}",
            "description": "Additional options.",
            "name": "opts"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "SerialPort"
              ]
            },
            "description": "The opened SerialPort instance."
          }
        ],
        "source_filename": "serial-device.js",
        "source_lineno": 72,
        "source_range": [
          2249,
          2881
        ]
      },
      "chooseSerialPort": {
        "name": "chooseSerialPort",
        "kind": "function",
        "description": "Opens a window to choose a serial port.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<(string|false)>"
              ]
            }
          }
        ],
        "async": true,
        "source_filename": "serial-device.js",
        "source_lineno": 107,
        "source_range": [
          2988,
          4484
        ]
      },
      "chooseSerialOptions": {
        "name": "chooseSerialOptions",
        "kind": "function",
        "description": "Opens a window to choose serial options.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<(string|false)>"
              ]
            }
          }
        ],
        "async": true,
        "source_filename": "serial-device.js",
        "source_lineno": 159,
        "source_range": [
          4594,
          6515
        ]
      },
      "openSerialTerminal": {
        "name": "openSerialTerminal",
        "kind": "function",
        "description": "Opens a serial terminal.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The identifier or path of the serial port to connect to.",
            "name": "port_path"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "description": "The communication speed in bits per second.",
            "name": "baudrate",
            "defaultvalue": 9600
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "defaultvalue": "{}",
            "description": "An optional configuration object for additional settings.",
            "name": "opts"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<Object>"
              ]
            },
            "description": "A promise that resolves with the terminal context."
          }
        ],
        "async": true,
        "source_filename": "serial-device.js",
        "source_lineno": 219,
        "source_range": [
          6914,
          10414
        ]
      },
      "chooseSerialTerminal": {
        "name": "chooseSerialTerminal",
        "kind": "function",
        "description": "Prompts the user to choose serial options and opens a serial terminal if a valid port is selected.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "defaultvalue": "{}",
            "description": "An optional configuration object for additional settings.",
            "name": "opts"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<(Object|undefined)>"
              ]
            },
            "description": "A promise that resolves with the terminal context if a serial port is chosen."
          }
        ],
        "async": true,
        "source_filename": "serial-device.js",
        "source_lineno": 341,
        "source_range": [
          10754,
          10945
        ]
      }
    },
    "file_system": {
      "readFile": {
        "name": "readFile",
        "kind": "function",
        "description": "Reads the content of a file at the specified path.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Path to the file.",
            "name": "file_path"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Buffer",
                "string",
                "false"
              ]
            },
            "description": "The content of the file or false in case of an error."
          }
        ],
        "source_filename": "file-system.js",
        "source_lineno": 27,
        "source_range": [
          658,
          728
        ]
      },
      "writeFile": {
        "name": "writeFile",
        "kind": "function",
        "description": "Writes data to a specified file synchronously. This method should overwrite the file if it already exists.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The path to the file where data will be written.",
            "name": "file_path"
          },
          {
            "type": {
              "names": [
                "Buffer",
                "string"
              ]
            },
            "description": "The data to write to the file.",
            "name": "data"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if the file was written successfully, false if an error occurred."
          }
        ],
        "source_filename": "file-system.js",
        "source_lineno": 37,
        "source_range": [
          1103,
          1175
        ]
      },
      "deleteFile": {
        "name": "deleteFile",
        "kind": "function",
        "description": "Deletes a specified file synchronously.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The path to the file that should be deleted.",
            "name": "file_path"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if the file was deleted successfully, false if an error occurred."
          }
        ],
        "source_filename": "file-system.js",
        "source_lineno": 46,
        "source_range": [
          1417,
          1487
        ]
      },
      "deleteDir": {
        "name": "deleteDir",
        "kind": "function",
        "description": "Deletes a specified file synchronously.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The path to the file that should be deleted.",
            "name": "file_path"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if the file was deleted successfully, false if an error occurred."
          }
        ],
        "source_filename": "file-system.js",
        "source_lineno": 55,
        "source_range": [
          1727,
          1796
        ]
      },
      "moveFile": {
        "name": "moveFile",
        "kind": "function",
        "description": "Moves a file from source to destination.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The path to the source file.",
            "name": "source"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The path to the destination file.",
            "name": "destination"
          }
        ],
        "source_filename": "file-system.js",
        "source_lineno": 64,
        "source_range": [
          1986,
          2276
        ]
      },
      "filesInFolder": {
        "name": "filesInFolder",
        "kind": "function",
        "description": "Lists files in a specified folder, optionally filtering by extension.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Path to the folder.",
            "name": "folder"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "File extension filter.",
            "name": "ext"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<string>",
                "void"
              ]
            },
            "description": "Array of file paths matching the extension in the specified folder."
          }
        ],
        "source_filename": "file-system.js",
        "source_lineno": 83,
        "source_range": [
          2561,
          3042
        ]
      },
      "allFilesInFolder": {
        "name": "allFilesInFolder",
        "kind": "function",
        "description": "Lists all files in a specified folder",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Path to the folder.",
            "name": "folder"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<string>",
                "void"
              ]
            },
            "description": "Array of file names."
          }
        ],
        "source_filename": "file-system.js",
        "source_lineno": 104,
        "source_range": [
          3200,
          3516
        ]
      },
      "chooseFile": {
        "name": "chooseFile",
        "kind": "function",
        "description": "Opens a dialog for the user to choose a file, synchronously.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Configuration options for the dialog.",
            "name": "options"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string",
                "Array.<string>"
              ]
            },
            "description": "The selected file path(s) or an empty array if canceled."
          }
        ],
        "source_filename": "file-system.js",
        "source_lineno": 118,
        "source_range": [
          3756,
          3990
        ]
      },
      "getDefaultPath": {
        "name": "getDefaultPath",
        "kind": "function",
        "description": "Retrieves a default path based on a specified type.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Type of the default path (e.g., 'root', 'documents').",
            "name": "type"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The default path for the specified type."
          }
        ],
        "source_filename": "file-system.js",
        "source_lineno": 132,
        "source_range": [
          4207,
          4279
        ]
      },
      "openFolder": {
        "name": "openFolder",
        "kind": "function",
        "description": "Opens the specified folder in the system's file manager.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Path to the folder.",
            "name": "filepath"
          }
        ],
        "source_filename": "file-system.js",
        "source_lineno": 140,
        "source_range": [
          4407,
          4472
        ]
      },
      "makeDirectory": {
        "name": "makeDirectory",
        "kind": "function",
        "description": "Creates a directory at the specified path if it does not already exist.\nThis method delegates the directory creation task to the environment's makeDirectory function.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The path where the directory will be created.",
            "name": "directory"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if the directory was successfully created or already exists, false if an error occurred."
          }
        ],
        "source_filename": "file-system.js",
        "source_lineno": 150,
        "source_range": [
          4862,
          4942
        ]
      },
      "mkdir": {
        "name": "mkdir",
        "kind": "function",
        "description": "Alias for makeDirectory. Creates a directory at the specified path if it does not already exist.\nThis method delegates the directory creation task to the environment's makeDirectory function.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The path where the directory will be created.",
            "name": "directory"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if the directory was successfully created or already exists, false if an error occurred."
          }
        ],
        "source_filename": "file-system.js",
        "source_lineno": 160,
        "source_range": [
          5359,
          5431
        ]
      },
      "openDir": {
        "name": "openDir",
        "kind": "function",
        "description": "Opens the specified directory in the system's file manager. Alias for `openFolder`.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Path to the directory.",
            "name": "filepath"
          }
        ],
        "source_filename": "file-system.js",
        "source_lineno": 168,
        "source_range": [
          5591,
          5650
        ]
      },
      "showFolder": {
        "name": "showFolder",
        "kind": "function",
        "description": "Shows the specified folder in the system's file manager. Alias for `openFolder`.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Path to the folder.",
            "name": "filepath"
          }
        ],
        "source_filename": "file-system.js",
        "source_lineno": 176,
        "source_range": [
          5802,
          5867
        ]
      },
      "showDir": {
        "name": "showDir",
        "kind": "function",
        "description": "Shows the specified directory in the system's file manager. Alias for `openDir`.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Path to the directory.",
            "name": "filepath"
          }
        ],
        "source_filename": "file-system.js",
        "source_lineno": 184,
        "source_range": [
          6022,
          6081
        ]
      },
      "openProgramFolder": {
        "name": "openProgramFolder",
        "kind": "function",
        "description": "Opens the program's root folder in the system's file manager.",
        "params": [],
        "source_filename": "file-system.js",
        "source_lineno": 191,
        "source_range": [
          6164,
          6255
        ]
      },
      "showFileInFolder": {
        "name": "showFileInFolder",
        "kind": "function",
        "description": "Shows the specified file in its containing folder within the system's file manager.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Path to the file.",
            "name": "filepath"
          }
        ],
        "source_filename": "file-system.js",
        "source_lineno": 199,
        "source_range": [
          6409,
          6486
        ]
      },
      "showFileInDir": {
        "name": "showFileInDir",
        "kind": "function",
        "description": "Shows the specified file in its containing directory within the system's file manager. Alias for `showFileInFolder`.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Path to the file.",
            "name": "filepath"
          }
        ],
        "source_filename": "file-system.js",
        "source_lineno": 207,
        "source_range": [
          6672,
          6743
        ]
      },
      "readcsv": {
        "name": "readcsv",
        "kind": "function",
        "description": "Reads a CSV file and returns a promise that resolves with the parsed data.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Path to the CSV file.",
            "name": "filePath"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Delimiter used in the CSV file (e.g., ',', ';', '\\t').",
            "name": "delimiter",
            "defaultvalue": ","
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<Object>"
              ]
            },
            "description": "- Parsed CSV data as an array of objects."
          }
        ],
        "source_filename": "file-system.js",
        "source_lineno": 217,
        "source_range": [
          7055,
          8087
        ]
      },
      "checkFile": {
        "name": "checkFile",
        "kind": "function",
        "description": "Checks if the specified file exists.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The path to the file to check.",
            "name": "file"
          }
        ],
        "source_filename": "file-system.js",
        "source_lineno": 249,
        "source_range": [
          8207,
          8269
        ]
      },
      "existFile": {
        "name": "existFile",
        "kind": "function",
        "description": "Checks if the specified file exists.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The path to the file to check.",
            "name": "file"
          }
        ],
        "source_filename": "file-system.js",
        "source_lineno": 257,
        "source_range": [
          8388,
          8442
        ]
      },
      "checkDirectory": {
        "name": "checkDirectory",
        "kind": "function",
        "description": "Checks if the specified directory exists.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The path to the directory to check.",
            "name": "directory"
          }
        ],
        "source_filename": "file-system.js",
        "source_lineno": 265,
        "source_range": [
          8576,
          8658
        ]
      },
      "existDirectory": {
        "name": "existDirectory",
        "kind": "function",
        "description": "Checks if the specified directory exists.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The path to the directory to check.",
            "name": "directory"
          }
        ],
        "source_filename": "file-system.js",
        "source_lineno": 273,
        "source_range": [
          8792,
          8866
        ]
      },
      "copyDir": {
        "name": "copyDir",
        "kind": "function",
        "description": "Recursively copies a directory from the source path to the destination path.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The source directory path.",
            "name": "src"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The destination directory path.",
            "name": "dest"
          }
        ],
        "source_filename": "file-system.js",
        "source_lineno": 282,
        "source_range": [
          9080,
          9941
        ]
      },
      "copyFolder": {
        "name": "copyFolder",
        "kind": "function",
        "description": "Copies a folder from the source path to the destination path.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The source folder path.",
            "name": "src"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The destination folder path.",
            "name": "dest"
          }
        ],
        "source_filename": "file-system.js",
        "source_lineno": 314,
        "source_range": [
          10134,
          10197
        ]
      },
      "cp": {
        "name": "cp",
        "kind": "function",
        "description": "Copies a directory from the source path to the destination path.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The source directory path.",
            "name": "src"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The destination directory path.",
            "name": "dest"
          }
        ],
        "source_filename": "file-system.js",
        "source_lineno": 323,
        "source_range": [
          10397,
          10452
        ]
      },
      "copyDir7z": {
        "name": "copyDir7z",
        "kind": "function",
        "description": "Copies a 7z archive from the source path to the destination path, extracts it, and removes the archive.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The source 7z archive path.",
            "name": "src"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The destination directory path.",
            "name": "dest"
          }
        ],
        "source_filename": "file-system.js",
        "source_lineno": 332,
        "source_range": [
          10692,
          11044
        ]
      }
    },
    "system": {
      "system": {
        "name": "system",
        "kind": "function",
        "description": "Executes a system command and returns the output.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "variable": true,
            "description": "Command arguments.",
            "name": "args"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string",
                "boolean"
              ]
            },
            "description": "The output of the command as a string, or false if an error occurred."
          }
        ],
        "source_filename": "system.js",
        "source_lineno": 27,
        "source_range": [
          639,
          814
        ]
      },
      "exec": {
        "name": "exec",
        "kind": "function",
        "description": "Executes a system command.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "variable": true,
            "description": "Command arguments.",
            "name": "args"
          }
        ],
        "source_filename": "system.js",
        "source_lineno": 40,
        "source_range": [
          905,
          1061
        ]
      },
      "spawn": {
        "name": "spawn",
        "kind": "function",
        "description": "Executes a system command.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "variable": true,
            "description": "Command arguments.",
            "name": "args"
          }
        ],
        "source_filename": "system.js",
        "source_lineno": 53,
        "source_range": [
          1152,
          1311
        ]
      },
      "getTaskList": {
        "name": "getTaskList",
        "kind": "function",
        "description": "Retrieves a list of all running tasks on the system.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "An array containing the tasklist output or [false, []] if an error occurred."
          }
        ],
        "source_filename": "system.js",
        "source_lineno": 66,
        "source_range": [
          1486,
          1667
        ]
      },
      "isProgramRunning": {
        "name": "isProgramRunning",
        "kind": "function",
        "description": "Checks if a specific program is running and retrieves its process IDs.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The name of the program to check.",
            "name": "program_name"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "An array where the first element is a boolean indicating if the program is running, \n                 and the second element is an array of process IDs if the program is running."
          }
        ],
        "source_filename": "system.js",
        "source_lineno": 81,
        "source_range": [
          2035,
          3209
        ]
      },
      "killProcess": {
        "name": "killProcess",
        "kind": "function",
        "description": "Attempts to kill a process by its process ID.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The process ID of the process to kill.",
            "name": "pid"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string",
                "boolean"
              ]
            },
            "description": "The output of the kill command as a string, or false if an error occurred."
          }
        ],
        "source_filename": "system.js",
        "source_lineno": 118,
        "source_range": [
          3450,
          3710
        ]
      }
    },
    "geography": {
      "webmap": {
        "name": "webmap",
        "kind": "function",
        "description": "Initializes and returns a new 2D web map instance.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "variable": true,
            "description": "Arguments for configuring the web map.",
            "name": "args"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<PRDC_JSLAB_GEOGRAPHY_MAP>"
              ]
            },
            "description": "The initialized 2D web map instance."
          }
        ],
        "async": true,
        "source_filename": "geography.js",
        "source_lineno": 30,
        "source_range": [
          806,
          946
        ]
      },
      "geoglobe": {
        "name": "geoglobe",
        "kind": "function",
        "description": "Initializes and returns a new 3D geoglobe instance.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "variable": true,
            "description": "Arguments for configuring the 3D geoglobe.",
            "name": "args"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<PRDC_JSLAB_GEOGRAPHY_MAP_3D>"
              ]
            },
            "description": "The initialized 3D geoglobe instance."
          }
        ],
        "async": true,
        "source_filename": "geography.js",
        "source_lineno": 41,
        "source_range": [
          1188,
          1342
        ]
      },
      "calculateTilesBoundingBox": {
        "name": "calculateTilesBoundingBox",
        "kind": "function",
        "description": "Calculates the bounding box and center from an array of tile coordinates.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<Object>"
              ]
            },
            "description": "An array of objects with tile coordinates, each having properties `x`, `y`, and `z` for tile X and Y coordinates and zoom level, respectively.",
            "name": "tile_coordinates"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "An object containing the bounds as an array of `[min_lat, min_lng]` and `[max_lat, max_lng]`, and the center as `[latitude, longitude]`."
          }
        ],
        "source_filename": "geography.js",
        "source_lineno": 52,
        "source_range": [
          1796,
          2885
        ]
      },
      "offsetLatLon": {
        "name": "offsetLatLon",
        "kind": "function",
        "description": "Calculates a new latitude and longitude based on a starting point, distance, and bearing using the Haversine formula.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The latitude of the starting point.",
            "name": "lat"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The longitude of the starting point.",
            "name": "lon"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The distance from the starting point in meters.",
            "name": "distance"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The bearing in degrees from north.",
            "name": "bearing"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An array containing the latitude and longitude of the calculated point."
          }
        ],
        "source_filename": "geography.js",
        "source_lineno": 87,
        "source_range": [
          3409,
          4037
        ]
      },
      "latLonDistance": {
        "name": "latLonDistance",
        "kind": "function",
        "description": "Calculates the distance between two points on Earth using the Haversine formula.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The latitude of the first point.",
            "name": "lat1"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The longitude of the first point.",
            "name": "lon1"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The latitude of the second point.",
            "name": "lat2"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The longitude of the second point.",
            "name": "lon2"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The distance between the two points in meters."
          }
        ],
        "source_filename": "geography.js",
        "source_lineno": 107,
        "source_range": [
          4467,
          4814
        ]
      },
      "latLonAltDistance": {
        "name": "latLonAltDistance",
        "kind": "function",
        "description": "Calculates the distance between two points on Earth including altitude difference using the Haversine formula.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The latitude of the first point.",
            "name": "lat1"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The longitude of the first point.",
            "name": "lon1"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The altitude of the first point in meters.",
            "name": "alt1"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The latitude of the second point.",
            "name": "lat2"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The longitude of the second point.",
            "name": "lon2"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The altitude of the second point in meters.",
            "name": "alt2"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The 3D distance between the two points in meters."
          }
        ],
        "source_filename": "geography.js",
        "source_lineno": 125,
        "source_range": [
          5422,
          5597
        ]
      },
      "checkNewLatLon": {
        "name": "checkNewLatLon",
        "kind": "function",
        "description": "Checks if the latitude and longitude values have been updated.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "An object containing the current and last values of latitude and longitude.",
            "name": "latlon"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if the latitude and/or longitude values have been updated; false otherwise."
          }
        ],
        "source_filename": "geography.js",
        "source_lineno": 135,
        "source_range": [
          5899,
          6210
        ]
      },
      "latLonAlt2cartesian": {
        "name": "latLonAlt2cartesian",
        "kind": "function",
        "description": "Converts latitude, longitude, and altitude to Cartesian coordinates.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Array.<number>"
              ]
            },
            "description": "Latitude in degrees or array of latitudes.",
            "name": "lat"
          },
          {
            "type": {
              "names": [
                "number",
                "Array.<number>"
              ]
            },
            "description": "Longitude in degrees or array of longitudes.",
            "name": "lon"
          },
          {
            "type": {
              "names": [
                "number",
                "Array.<number>"
              ]
            },
            "description": "Altitude in meters or array of altitudes.",
            "name": "alt"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Cesium.Cartesian3",
                "Array.<Cesium.Cartesian3>"
              ]
            },
            "description": "Cartesian coordinate(s)."
          }
        ],
        "source_filename": "geography.js",
        "source_lineno": 152,
        "source_range": [
          6626,
          7004
        ]
      }
    },
    "networking": {
      "CRC_TABLE_XMODEM": {
        "name": "CRC_TABLE_XMODEM",
        "kind": "member",
        "description": "XMODEM CRC table",
        "source_filename": "networking.js",
        "source_lineno": 29,
        "source_range": [
          700,
          2973
        ]
      },
      "isOnline": {
        "name": "isOnline",
        "kind": "function",
        "description": "Checks if the environment is currently online.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "`true` if online, otherwise `false`."
          }
        ],
        "source_filename": "networking.js",
        "source_lineno": 69,
        "source_range": [
          3109,
          3157
        ]
      },
      "crc16xmodem": {
        "name": "crc16xmodem",
        "kind": "function",
        "description": "Calculates the CRC-16/XMODEM checksum of a byte array.",
        "params": [
          {
            "type": {
              "names": [
                "Uint8Array"
              ]
            },
            "description": "The input data as a byte array.",
            "name": "byte_array"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The CRC-16/XMODEM checksum as a numeric value."
          }
        ],
        "source_filename": "networking.js",
        "source_lineno": 78,
        "source_range": [
          3375,
          3591
        ]
      },
      "getIP": {
        "name": "getIP",
        "kind": "function",
        "description": "Retrieves the primary IPv4 address of the current machine.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The IP address if found, otherwise an empty string."
          }
        ],
        "source_filename": "networking.js",
        "source_lineno": 90,
        "source_range": [
          3746,
          4011
        ]
      },
      "pingAddressTCP": {
        "name": "pingAddressTCP",
        "kind": "function",
        "description": "Attempts to establish a TCP connection to the specified host and port to check reachability.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The IP address or hostname to ping.",
            "name": "host"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The port number to use for the connection.",
            "name": "port"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 1000,
            "description": "The timeout in milliseconds before the attempt is considered failed.",
            "name": "timeout"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<boolean>"
              ]
            },
            "description": "A promise that resolves to `true` if the connection is successful, `false` otherwise."
          }
        ],
        "async": true,
        "source_filename": "networking.js",
        "source_lineno": 104,
        "source_range": [
          4486,
          5011
        ]
      },
      "pingAddress": {
        "name": "pingAddress",
        "kind": "function",
        "description": "Executes a ping command to check if an IP address is reachable.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The IP address or hostname to ping.",
            "name": "host"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The timeout in milliseconds for the ping command.",
            "name": "timeout"
          }
        ],
        "async": true,
        "source_filename": "networking.js",
        "source_lineno": 129,
        "source_range": [
          5241,
          5547
        ]
      },
      "pingAddressSync": {
        "name": "pingAddressSync",
        "kind": "function",
        "description": "Executes a ping command synchronized to check if an IP address is reachable.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The IP address or hostname to ping.",
            "name": "host"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The timeout in milliseconds for the ping command.",
            "name": "timeout"
          }
        ],
        "source_filename": "networking.js",
        "source_lineno": 146,
        "source_range": [
          5790,
          5983
        ]
      },
      "findFirstUnusedPort": {
        "name": "findFirstUnusedPort",
        "kind": "function",
        "description": "Finds the first unused port within a specified range, checking sequentially from `port` to `max_port`.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The starting port number to check.",
            "name": "port"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The minimum port number in the range.",
            "name": "min_port"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The maximum port number in the range.",
            "name": "max_port"
          }
        ],
        "async": true,
        "source_filename": "networking.js",
        "source_lineno": 161,
        "source_range": [
          6310,
          6636
        ]
      },
      "ip2dec": {
        "name": "ip2dec",
        "kind": "function",
        "description": "Converts an IPv4 address to its decimal equivalent.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The IPv4 address in dot-decimal notation.",
            "name": "ip"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 4,
            "description": "The number of subnets in the IP address, default is 4.",
            "name": "subnets"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The decimal equivalent of the IPv4 address."
          }
        ],
        "source_filename": "networking.js",
        "source_lineno": 183,
        "source_range": [
          6934,
          7143
        ]
      },
      "tcp": {
        "name": "tcp",
        "kind": "function",
        "description": "Creates a TCP client for communication with a specified host and port.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The hostname or IP address to connect to.",
            "name": "host"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The port number on the host to connect to.",
            "name": "port"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "A callback function that is called when the connection is successfully established.",
            "name": "onConnectCallback"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_TCP_CLIENT"
              ]
            },
            "description": "An instance of the TCP client with event handlers set up."
          }
        ],
        "source_filename": "networking.js",
        "source_lineno": 199,
        "source_range": [
          7601,
          7720
        ]
      },
      "tcpServer": {
        "name": "tcpServer",
        "kind": "function",
        "description": "Creates a TCP server to listen on a specified port.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The hostname or IP address.",
            "name": "host"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The port number.",
            "name": "port"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "A callback function that is called when the connection is successfully established.",
            "name": "onConnectCallback"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_TCP_SERVER"
              ]
            },
            "description": "An instance of the TCP server."
          }
        ],
        "source_filename": "networking.js",
        "source_lineno": 210,
        "source_range": [
          8093,
          8174
        ]
      },
      "udp": {
        "name": "udp",
        "kind": "function",
        "description": "Creates a UDP client for sending data to a specified host and port.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The hostname or IP address to connect to.",
            "name": "host"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The port number to connect to.",
            "name": "port"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_UDP"
              ]
            },
            "description": "An instance of the UDP client."
          }
        ],
        "source_filename": "networking.js",
        "source_lineno": 220,
        "source_range": [
          8456,
          8530
        ]
      },
      "udpServer": {
        "name": "udpServer",
        "kind": "function",
        "description": "Creates a UDP server to listen on a specified port.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The port number to listen on.",
            "name": "port"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_UDP_SERVER"
              ]
            },
            "description": "An instance of the UDP server."
          }
        ],
        "source_filename": "networking.js",
        "source_lineno": 229,
        "source_range": [
          8733,
          8808
        ]
      },
      "videoCall": {
        "name": "videoCall",
        "kind": "function",
        "description": "Initializes and returns a new video call instance.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The call type ('server' or 'client').",
            "name": "type"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The video source type ('webcam' or 'desktop').",
            "name": "video_source_type"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The video device or source ID.",
            "name": "video_id"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The microphone device ID.",
            "name": "mic_id"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The TCP host address.",
            "name": "tcp_host"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The TCP port number.",
            "name": "tcp_port"
          },
          {
            "type": {
              "names": [
                "object"
              ]
            },
            "description": "Additional configuration options.",
            "name": "opts"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VIDEOCALL"
              ]
            },
            "description": "The created video call object."
          }
        ],
        "source_filename": "networking.js",
        "source_lineno": 244,
        "source_range": [
          9393,
          9600
        ]
      }
    },
    "format": {
      "getContentType": {
        "name": "getContentType",
        "kind": "function",
        "description": "Retrieves the MIME type based on the file extension.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The path to the file.",
            "name": "filePath"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The corresponding MIME type."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 27,
        "source_range": [
          605,
          3318
        ]
      },
      "formatBytes": {
        "name": "formatBytes",
        "kind": "function",
        "description": "Formats the given byte count into a readable string.",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Number of bytes.",
            "name": "bytes"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "optional": true,
            "defaultvalue": 2,
            "description": "Number of decimal places to include in the formatted string.",
            "name": "decimals"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Formatted bytes string with appropriate unit."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 117,
        "source_range": [
          3602,
          3961
        ]
      },
      "formatBPS": {
        "name": "formatBPS",
        "kind": "function",
        "description": "Formats the given bits per second (bps) into a readable string.",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "Number of bits per second.",
            "name": "bps"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "optional": true,
            "defaultvalue": 2,
            "description": "Number of decimal places to include in the formatted string.",
            "name": "decimals"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Formatted bits per second string with appropriate unit."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 135,
        "source_range": [
          4272,
          4628
        ]
      },
      "formatPrefix": {
        "name": "formatPrefix",
        "kind": "function",
        "description": "Formats a number with metric prefixes (k, M, G, etc.) based on its value.",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The number to format.",
            "name": "number"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "optional": true,
            "defaultvalue": 2,
            "description": "Number of decimal places to include in the formatted string.",
            "name": "decimals"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Formatted number string with metric prefix."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 153,
        "source_range": [
          4935,
          5276
        ]
      },
      "formatNum": {
        "name": "formatNum",
        "kind": "function",
        "description": "Formats a number to a specified number of decimal places.",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The number to format.",
            "name": "number"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "optional": true,
            "defaultvalue": 2,
            "description": "The number of decimal places.",
            "name": "decimals"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The formatted number as a string."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 170,
        "source_range": [
          5525,
          5607
        ]
      },
      "formatFloatDigits": {
        "name": "formatFloatDigits",
        "kind": "function",
        "description": "Formats a floating-point number to have a fixed number of significant digits.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number to format.",
            "name": "number"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 1,
            "description": "The number of significant digits.",
            "name": "digits"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The formatted number as a string."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 180,
        "source_range": [
          5883,
          6089
        ]
      },
      "clip": {
        "name": "clip",
        "kind": "function",
        "description": "Clips a number to a specified value based on a condition.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number to clip.",
            "name": "number"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The reference number for the clipping condition.",
            "name": "control_number"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The value to clip to.",
            "name": "clip_value"
          },
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "optional": true,
            "defaultvalue": true,
            "description": "The direction of clipping (true for max, false for min).",
            "name": "direction"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The clipped number."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 196,
        "source_range": [
          6502,
          6712
        ]
      },
      "clipHeight": {
        "name": "clipHeight",
        "kind": "function",
        "description": "Clips a height value to a specified range.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The value to clip.",
            "name": "value"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "The minimum value of the range.",
            "name": "min"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 100,
            "description": "The maximum value of the range.",
            "name": "max"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The clipped height value."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 210,
        "source_range": [
          7001,
          7233
        ]
      },
      "fieldnames": {
        "name": "fieldnames",
        "kind": "function",
        "description": "Retrieves the field names (keys) of the given object.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The object from which to extract keys.",
            "name": "obj"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<string>"
              ]
            },
            "description": "An array containing the keys of the object."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 227,
        "source_range": [
          7443,
          7493
        ]
      },
      "strrep": {
        "name": "strrep",
        "kind": "function",
        "description": "Replaces all occurrences of a specified substring within a string.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The original string.",
            "name": "str"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The substring to be replaced.",
            "name": "old_string"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The substring to replace with.",
            "name": "new_string"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The resulting string after replacements."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 238,
        "source_range": [
          7822,
          7914
        ]
      },
      "clipVal": {
        "name": "clipVal",
        "kind": "function",
        "description": "Clips a value to a specified range.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The value to clip.",
            "name": "value"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "The minimum value of the range.",
            "name": "min"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 100,
            "description": "The maximum value of the range.",
            "name": "max"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The clipped value."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 249,
        "source_range": [
          8191,
          8420
        ]
      },
      "toFixedIf": {
        "name": "toFixedIf",
        "kind": "function",
        "description": "Rounds a number to a fixed number of decimal places, but only if it's a floating point number.",
        "params": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The value to round.",
            "name": "value"
          },
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The number of decimal places to round to.",
            "name": "p"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Number"
              ]
            },
            "description": "The rounded number, or the original number if it wasn't a float."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 267,
        "source_range": [
          8736,
          8803
        ]
      },
      "getCircularReplacer": {
        "name": "getCircularReplacer",
        "kind": "function",
        "description": "Provides a replacer function for JSON.stringify() to prevent circular references.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "A replacer function that can be used with JSON.stringify to handle circular references."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 275,
        "source_range": [
          9019,
          9286
        ]
      },
      "isNaN": {
        "name": "isNaN",
        "kind": "function",
        "description": "Determines if the provided value is NaN.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to check.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if the value is NaN, false otherwise."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 293,
        "source_range": [
          9459,
          9592
        ]
      },
      "isObject": {
        "name": "isObject",
        "kind": "function",
        "description": "Determines if the provided value is an object.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to check.",
            "name": "value"
          },
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "optional": true,
            "defaultvalue": false,
            "description": "Whether to consider arrays as not objects.",
            "name": "ignore_array"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if the value is an object, false otherwise."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 307,
        "source_range": [
          9867,
          10031
        ]
      },
      "isNumber": {
        "name": "isNumber",
        "kind": "function",
        "description": "Determines if the provided value is a number.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to check.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if the value is a number, false otherwise."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 319,
        "source_range": [
          10216,
          10275
        ]
      },
      "isString": {
        "name": "isString",
        "kind": "function",
        "description": "Determines if the provided value is a string.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to check.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if the value is a string, false otherwise."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 328,
        "source_range": [
          10460,
          10519
        ]
      },
      "isEmptyString": {
        "name": "isEmptyString",
        "kind": "function",
        "description": "Checks if a string is empty or contains only whitespace.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The string to check.",
            "name": "str"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "- True if the string is empty or contains only whitespace, otherwise false."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 337,
        "source_range": [
          10747,
          10834
        ]
      },
      "isFunction": {
        "name": "isFunction",
        "kind": "function",
        "description": "Determines if the provided value is a function.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to check",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if the value is a function, false otherwise."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 346,
        "source_range": [
          11021,
          11084
        ]
      },
      "isArray": {
        "name": "isArray",
        "kind": "function",
        "description": "Determines if the provided value is an array.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to check.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if the value is an array, false otherwise."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 355,
        "source_range": [
          11269,
          11360
        ]
      },
      "isNull": {
        "name": "isNull",
        "kind": "function",
        "description": "Determines if the provided value is null.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to check.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if the value is null, false otherwise."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 364,
        "source_range": [
          11537,
          11583
        ]
      },
      "isEmpty": {
        "name": "isEmpty",
        "kind": "function",
        "description": "Checks if an array is empty.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The array to check.",
            "name": "array"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if the array is empty, false otherwise."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 373,
        "source_range": [
          11750,
          11831
        ]
      },
      "isInfinity": {
        "name": "isInfinity",
        "kind": "function",
        "description": "Checks if the given value(s) are infinite.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Array.<number>"
              ]
            },
            "description": "The value or array of values to check.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean",
                "Array.<boolean>"
              ]
            },
            "description": "- Returns true if infinite, otherwise false. Returns an array of booleans if input is an array."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 382,
        "source_range": [
          12102,
          12297
        ]
      },
      "isNumeric": {
        "name": "isNumeric",
        "kind": "function",
        "description": "Checks if a variable is numeric.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The variable to check.",
            "name": "variable"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if the variable is numeric, false otherwise."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 395,
        "source_range": [
          12477,
          12565
        ]
      },
      "hasKey": {
        "name": "hasKey",
        "kind": "function",
        "description": "Checks if the specified object has the given key.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The object to check for the presence of the key.",
            "name": "object"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The key to check for in the object.",
            "name": "key"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "- True if the object has the key, false otherwise."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 405,
        "source_range": [
          12853,
          12917
        ]
      },
      "isUndefined": {
        "name": "isUndefined",
        "kind": "function",
        "description": "Determines if the provided value is undefined.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to check.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if the value is undefined, false otherwise."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 414,
        "source_range": [
          13102,
          13167
        ]
      },
      "isUUID": {
        "name": "isUUID",
        "kind": "function",
        "description": "Checks if a string is a valid UUID.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The string to check.",
            "name": "str"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if the string is a valid UUID, false otherwise."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 423,
        "source_range": [
          13349,
          13503
        ]
      },
      "normalizeAngle": {
        "name": "normalizeAngle",
        "kind": "function",
        "description": "Normalizes an angle to the range of -180 to 180 degrees.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The angle to normalize.",
            "name": "angle"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The normalized angle."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 433,
        "source_range": [
          13679,
          13758
        ]
      },
      "normalizeAngle360": {
        "name": "normalizeAngle360",
        "kind": "function",
        "description": "Normalizes an angle to the range of 0 to 360 degrees.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The angle to normalize.",
            "name": "angle"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The normalized angle."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 442,
        "source_range": [
          13931,
          14000
        ]
      },
      "normalizeLat": {
        "name": "normalizeLat",
        "kind": "function",
        "description": "Normalizes latitude to the range of -90 to 90 degrees with specified precision.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The latitude to normalize.",
            "name": "latitude"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The precision of the normalization.",
            "name": "precision"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The normalized latitude."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 452,
        "source_range": [
          14277,
          14384
        ]
      },
      "normalizeLon": {
        "name": "normalizeLon",
        "kind": "function",
        "description": "Normalizes longitude to the range of -180 to 180 degrees with specified precision.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The longitude to normalize.",
            "name": "longitude"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The precision of the normalization.",
            "name": "precision"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The normalized longitude."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 462,
        "source_range": [
          14667,
          14763
        ]
      },
      "checkUndefined": {
        "name": "checkUndefined",
        "kind": "function",
        "description": "Checks a value for undefined and returns an empty string if it is undefined, otherwise returns the value.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to check.",
            "name": "val"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The original value if not undefined, otherwise an empty string."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 471,
        "source_range": [
          15014,
          15120
        ]
      },
      "prettyPrint": {
        "name": "prettyPrint",
        "kind": "function",
        "description": "Pretty-prints data, converting it into a more readable format for display. Handles strings, objects, and other data types.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The data to pretty-print.",
            "name": "data"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "An array containing the pretty-printed data as a string and a boolean indicating if the data was an object."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 484,
        "source_range": [
          15443,
          16048
        ]
      },
      "stringify": {
        "name": "stringify",
        "kind": "function",
        "description": "Converts an object to a JSON string if it is an object, otherwise returns the object as is.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The object to stringify.",
            "name": "object"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string",
                "*"
              ]
            },
            "description": "The JSON string representation of the object or the object itself if not an object."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 506,
        "source_range": [
          16321,
          16477
        ]
      },
      "safeStringify": {
        "name": "safeStringify",
        "kind": "function",
        "description": "Safely serializes an object into a JSON string, handling circular references and deep structures, with depth control.\nIt also escapes strings to prevent HTML injection.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The object to stringify.",
            "name": "data"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 3,
            "description": "The maximum depth to traverse in the object, beyond which the traversal is stopped.",
            "name": "depth_limit"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "A JSON string representation of the object, with special handling for deep objects, circular references, and HTML escaping of strings."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 520,
        "source_range": [
          17008,
          19432
        ]
      },
      "escapeHTML": {
        "name": "escapeHTML",
        "kind": "function",
        "description": "Escapes special HTML characters in a string to prevent HTML injection.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The string to escape.",
            "name": "string"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "- The escaped string with HTML characters replaced."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 608,
        "source_range": [
          19653,
          19975
        ]
      },
      "escapeLatex": {
        "name": "escapeLatex",
        "kind": "function",
        "description": "Escapes special LaTeX characters in a string to prevent LaTeX injection.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The string to escape.",
            "name": "string"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "- The escaped string with LaTeX characters replaced."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 630,
        "source_range": [
          20197,
          20676
        ]
      },
      "getUniqueKey": {
        "name": "getUniqueKey",
        "kind": "function",
        "description": "Generates a unique object key by appending a number to the original key if it already exists.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Object to add unique key.",
            "name": "object"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The original object key.",
            "name": "key"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "A unique object key."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 654,
        "source_range": [
          20945,
          21127
        ]
      },
      "randomString": {
        "name": "randomString",
        "kind": "function",
        "description": "Generates a random string of the specified length.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The desired length of the random string.",
            "name": "num"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "A random string."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 669,
        "source_range": [
          21311,
          21388
        ]
      },
      "countDecimalPlaces": {
        "name": "countDecimalPlaces",
        "kind": "function",
        "description": "Calculates the number of decimal places in a number.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number to evaluate.",
            "name": "num"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The count of decimal places."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 678,
        "source_range": [
          21567,
          21684
        ]
      },
      "replaceEditorLinks": {
        "name": "replaceEditorLinks",
        "kind": "function",
        "description": "Replaces file links in a text with HTML span elements.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The multiline error log text.",
            "name": "text"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The updated text with file links replaced by HTML spans."
          }
        ],
        "source_filename": "format.js",
        "source_lineno": 687,
        "source_range": [
          21900,
          22189
        ]
      }
    },
    "render": {
      "debounceIn": {
        "name": "debounceIn",
        "kind": "function",
        "description": "Debounces a function, ensuring it's only invoked once at the beginning of consecutive calls during the wait period.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The function to debounce.",
            "name": "func"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The period to wait before allowing another call, in milliseconds.",
            "name": "wait"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The debounced function."
          }
        ],
        "source_filename": "render.js",
        "source_lineno": 28,
        "source_range": [
          790,
          1138
        ]
      },
      "debounceInOut": {
        "name": "debounceInOut",
        "kind": "function",
        "description": "Debounces a function, calling it at the first and last of consecutive calls during the wait period.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The function to debounce.",
            "name": "func"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The period to wait before allowing another call, in milliseconds.",
            "name": "wait"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The debounced function."
          }
        ],
        "source_filename": "render.js",
        "source_lineno": 51,
        "source_range": [
          1466,
          2029
        ]
      },
      "debounceOut": {
        "name": "debounceOut",
        "kind": "function",
        "description": "Debounces a function, ensuring it's only invoked once at the end of consecutive calls during the wait period.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The function to debounce.",
            "name": "func"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The period to wait before allowing another call, in milliseconds.",
            "name": "wait"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The debounced function."
          }
        ],
        "source_filename": "render.js",
        "source_lineno": 83,
        "source_range": [
          2367,
          2716
        ]
      }
    },
    "geometry": {
      "spaceSearch": {
        "name": "spaceSearch",
        "kind": "function",
        "description": "Creates an instance of PRDC_JSLAB_LIB_OPTIM_SPACE_SERACH.",
        "params": [],
        "source_filename": "geometry.js",
        "source_lineno": 27,
        "source_range": [
          647,
          731
        ]
      },
      "findNearestPoints": {
        "name": "findNearestPoints",
        "kind": "function",
        "description": "Finds the nearest points in points2 for each point in points1.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<Array>"
              ]
            },
            "description": "Array of points.",
            "name": "points1"
          },
          {
            "type": {
              "names": [
                "Array.<Array>"
              ]
            },
            "description": "Reference points.",
            "name": "points2"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Array of indices for nearest points."
          }
        ],
        "source_filename": "geometry.js",
        "source_lineno": 37,
        "source_range": [
          980,
          1736
        ]
      },
      "pointLineDistance": {
        "name": "pointLineDistance",
        "kind": "function",
        "description": "Returns the shortest distance from point P to the line defined by (A, i)\nand the closest point (P1) on that line.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "point [Px, Py, Pz]",
            "name": "P"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "a point on the line",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "a unit direction vector of the line",
            "name": "i"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "d   - shortest distance\n  P1  - point on the line with the smallest distance to P"
          }
        ],
        "source_filename": "geometry.js",
        "source_lineno": 70,
        "source_range": [
          2175,
          2439
        ]
      },
      "lineCircleIntersection": {
        "name": "lineCircleIntersection",
        "kind": "function",
        "description": "Returns the intersection points of a circle (center O, radius r) \nin a plane with a line passing through point P with direction i.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "point on the line",
            "name": "P"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "direction vector of the line (unit)",
            "name": "i"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "center of the circle",
            "name": "O"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "circle radius",
            "name": "r"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "flag = 0 -> intersection (two points)\n  flag = 1 -> tangent (one point)\n  flag = 2 -> no intersection"
          }
        ],
        "source_filename": "geometry.js",
        "source_lineno": 93,
        "source_range": [
          2982,
          3586
        ]
      },
      "planesIntersection": {
        "name": "planesIntersection",
        "kind": "function",
        "description": "Returns the line (point P, direction i) that is the intersection \nof two planes, or indicates if they are the same or parallel.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "a point in plane 1",
            "name": "P1"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "normal to plane 1",
            "name": "n1"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "a point in plane 2",
            "name": "P2"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "normal to plane 2",
            "name": "n2"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "flag = 0 -> planes intersect\n  flag = 1 -> planes are the same\n  flag = 2 -> planes are parallel (no intersection)"
          }
        ],
        "source_filename": "geometry.js",
        "source_lineno": 131,
        "source_range": [
          4129,
          6197
        ]
      },
      "isPointOnLine": {
        "name": "isPointOnLine",
        "kind": "function",
        "description": "Checks if point P lies on the line segment A-B.\nReturns 1 if on segment, 0 otherwise.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "name": "P"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "name": "A"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "name": "B"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "1 (on segment), 0 (not on segment)"
          }
        ],
        "source_filename": "geometry.js",
        "source_lineno": 213,
        "source_range": [
          6445,
          6846
        ]
      },
      "linesOverlap": {
        "name": "linesOverlap",
        "kind": "function",
        "description": "Returns the overlapping segment (if any) between two segments P1-P2 and P3-P4,\nor indicates no overlap.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "name": "P1"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "name": "P2"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "name": "P3"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "name": "P4"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            }
          }
        ],
        "source_filename": "geometry.js",
        "source_lineno": 238,
        "source_range": [
          7185,
          7986
        ]
      },
      "minPointsDistance3D": {
        "name": "minPointsDistance3D",
        "kind": "function",
        "description": "Finds the minimal 3D distance between all pairs of points in two arrays.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "Array of 3D points (e.g. [[x1, y1, z1], [x2, y2, z2], ...]).",
            "name": "P1i"
          },
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "Another array of 3D points.",
            "name": "P2i"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "L  - The minimal distance found.\n  P1 - The point in P1i corresponding to the minimal distance.\n  P2 - The point in P2i corresponding to the minimal distance."
          }
        ],
        "source_filename": "geometry.js",
        "source_lineno": 285,
        "source_range": [
          8470,
          9186
        ]
      },
      "triangle": {
        "name": "triangle",
        "kind": "function",
        "description": "Creates a new triangle instance.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "First vertex.",
            "name": "p1"
          },
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "Second vertex.",
            "name": "p2"
          },
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "Third vertex.",
            "name": "p3"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_TRIANGLE"
              ]
            },
            "description": "Triangle instance."
          }
        ],
        "source_filename": "geometry.js",
        "source_lineno": 326,
        "source_range": [
          9415,
          9499
        ]
      },
      "delaunayTriangulation": {
        "name": "delaunayTriangulation",
        "kind": "function",
        "description": "Performs Delaunay triangulation on a set of points.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<Array>"
              ]
            },
            "description": "Array of points.",
            "name": "points"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<PRDC_JSLAB_TRIANGLE>"
              ]
            },
            "description": "Array of triangles."
          }
        ],
        "source_filename": "geometry.js",
        "source_lineno": 335,
        "source_range": [
          9680,
          11189
        ]
      },
      "getRotationMatrix": {
        "name": "getRotationMatrix",
        "kind": "function",
        "description": "Generates a rotation matrix to rotate from vector a to vector b.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The initial unit vector.",
            "name": "a"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "The target unit vector.",
            "name": "b"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "- The resulting rotation matrix."
          }
        ],
        "source_filename": "geometry.js",
        "source_lineno": 385,
        "source_range": [
          11440,
          13069
        ]
      },
      "transform": {
        "name": "transform",
        "kind": "function",
        "description": "Transforms coordinates by scaling, rotating, and translating them.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "Array of coordinate points.",
            "name": "coordinates"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Factor by which to scale the coordinates.",
            "name": "scale_factor"
          },
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "Matrix used to rotate the coordinates.",
            "name": "rotation_matrix"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Vector used to translate the coordinates.",
            "name": "translation"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "- The transformed coordinates."
          }
        ],
        "source_filename": "geometry.js",
        "source_lineno": 439,
        "source_range": [
          13521,
          13851
        ]
      },
      "createVectors3D": {
        "name": "createVectors3D",
        "kind": "function",
        "description": "Creates 3D vectors for plotting based on provided parameters.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "X coordinates of vector origins.",
            "name": "xi"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Y coordinates of vector origins.",
            "name": "yi"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Z coordinates of vector origins.",
            "name": "zi"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "X components of vectors.",
            "name": "ui"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Y components of vectors.",
            "name": "vi"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Z components of vectors.",
            "name": "wi"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Scale factor for the vectors.",
            "name": "scale",
            "defaultvalue": 0.3
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Angle factor for arrowheads.",
            "name": "angle_factor",
            "defaultvalue": 0.4
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Additional plotting options.",
            "name": "opts"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "- An object containing line and head trace data for plotting."
          }
        ],
        "source_filename": "geometry.js",
        "source_lineno": 460,
        "source_range": [
          14550,
          18756
        ]
      },
      "createDisks3D": {
        "name": "createDisks3D",
        "kind": "function",
        "description": "Creates 3D disks for plotting based on provided parameters.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "X coordinates of disk centers.",
            "name": "xi"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Y coordinates of disk centers.",
            "name": "yi"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Z coordinates of disk centers.",
            "name": "zi"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Radii of the disks.",
            "name": "ri"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "X components of normal vectors (for disk orientation).",
            "name": "ui"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Y components of normal vectors (for disk orientation).",
            "name": "vi"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Z components of normal vectors (for disk orientation).",
            "name": "wi"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Additional plotting options.",
            "name": "opts"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "- An object containing line and area trace data for plotting."
          }
        ],
        "source_filename": "geometry.js",
        "source_lineno": 597,
        "source_range": [
          19461,
          22701
        ]
      },
      "createPlanes3D": {
        "name": "createPlanes3D",
        "kind": "function",
        "description": "Creates a rectangular planes in 3D space, oriented by a normal vector [u, v, w].",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "X coordinates of planes centers.",
            "name": "xi"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Y coordinates of planes centers.",
            "name": "yi"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Z coordinates of planes centers.",
            "name": "zi"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Width of the rectangle.",
            "name": "width_i"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Height of the rectangle.",
            "name": "height_i"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "X component of the plane's normal vector.",
            "name": "ui"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Y component of the plane's normal vector.",
            "name": "vi"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Z component of the plane's normal vector.",
            "name": "wi"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Additional plotting options (color, opacity, etc.).",
            "name": "opts"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "- An object containing line and area trace data for plotting."
          }
        ],
        "source_filename": "geometry.js",
        "source_lineno": 712,
        "source_range": [
          23516,
          27111
        ]
      },
      "createLines3D": {
        "name": "createLines3D",
        "kind": "function",
        "description": "Creates a lines in 3D space.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "X1 coordinates of lines.",
            "name": "x1i"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Y1 coordinates of lines.",
            "name": "y1i"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Z1 coordinates of lines.",
            "name": "z1i"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "X2 coordinates of lines.",
            "name": "x2i"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Y2 coordinates of lines.",
            "name": "y2i"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Z2 coordinates of lines.",
            "name": "z2i"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "- lines object."
          }
        ],
        "source_filename": "geometry.js",
        "source_lineno": 825,
        "source_range": [
          27524,
          28320
        ]
      },
      "createPoints3D": {
        "name": "createPoints3D",
        "kind": "function",
        "description": "Creates a points in 3D space.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "X coordinates of points.",
            "name": "xi"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Y coordinates of points.",
            "name": "yi"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Z coordinates of points.",
            "name": "zi"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "- points object."
          }
        ],
        "source_filename": "geometry.js",
        "source_lineno": 863,
        "source_range": [
          28570,
          29197
        ]
      },
      "createText3D": {
        "name": "createText3D",
        "kind": "function",
        "description": "Creates a points in 3D space.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "X coordinates of points.",
            "name": "xi"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Y coordinates of points.",
            "name": "yi"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Z coordinates of points.",
            "name": "zi"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "- points object."
          }
        ],
        "source_filename": "geometry.js",
        "source_lineno": 898,
        "source_range": [
          29447,
          30660
        ]
      },
      "symRectangle": {
        "name": "symRectangle",
        "kind": "function",
        "description": "Creates a symmetrical rectangle in 3D space.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Width of the rectangle.",
            "name": "W"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Height of the rectangle.",
            "name": "H"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "Z-coordinate for the rectangle plane.",
            "name": "Z"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "- Array of vertex coordinates for the rectangle."
          }
        ],
        "source_filename": "geometry.js",
        "source_lineno": 946,
        "source_range": [
          30968,
          31106
        ]
      },
      "circle": {
        "name": "circle",
        "kind": "function",
        "description": "Helper method to generate points for a circle in the XY plane.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Radius of the circle.",
            "name": "radius"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Number of segments for the circle.",
            "name": "segments"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "- Array of points forming the circle."
          }
        ],
        "source_filename": "geometry.js",
        "source_lineno": 960,
        "source_range": [
          31374,
          31612
        ]
      },
      "disk": {
        "name": "disk",
        "kind": "function",
        "description": "Helper method to generate points for a disk in the XY plane.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Radius of the disk.",
            "name": "radius"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Number of angular segments for the disk.",
            "name": "segments_a"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Number of radial segments for the disk.",
            "name": "segments_r"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "- Array of points forming the disk."
          }
        ],
        "source_filename": "geometry.js",
        "source_lineno": 976,
        "source_range": [
          31956,
          32325
        ]
      },
      "boundary3D": {
        "name": "boundary3D",
        "kind": "function",
        "description": "Generates the boundary of a 3D shape based on points and a shrink factor.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "Array of points defining the shape.",
            "name": "points"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0.5,
            "description": "Factor by which to shrink the boundary.",
            "name": "shrink"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "- An array containing boundary facets and the volume."
          }
        ],
        "source_filename": "geometry.js",
        "source_lineno": 995,
        "source_range": [
          32644,
          33170
        ]
      },
      "writeOff": {
        "name": "writeOff",
        "kind": "function",
        "description": "Writes geometry data to an OFF file.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The path to the OFF file.",
            "name": "filename"
          },
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "Array of vertex coordinates.",
            "name": "vertices"
          },
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "Array of face indices.",
            "name": "faces"
          }
        ],
        "source_filename": "geometry.js",
        "source_lineno": 1021,
        "source_range": [
          33415,
          33565
        ]
      },
      "readOff": {
        "name": "readOff",
        "kind": "function",
        "description": "Reads an OFF file and returns the vertices and faces.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The path to the OFF file.",
            "name": "filename"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "- An object containing vertices and faces arrays."
          }
        ],
        "source_filename": "geometry.js",
        "source_lineno": 1033,
        "source_range": [
          33896,
          35206
        ]
      }
    },
    "control": {
      "tf": {
        "name": "tf",
        "kind": "function",
        "description": "Create a transfer function representation.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Numerator coefficients of the transfer function.",
            "name": "num"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Denominator coefficients of the transfer function.",
            "name": "den"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "Sampling time, defaults to 0 for continuous-time systems.",
            "name": "Ts"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "object"
              ]
            },
            "description": "An object representing the transfer function { num, den, Ts }."
          }
        ],
        "source_filename": "control.js",
        "source_lineno": 29,
        "source_range": [
          807,
          862
        ]
      },
      "ss": {
        "name": "ss",
        "kind": "function",
        "description": "Create a state-space representation.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "System matrix.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "Input matrix.",
            "name": "B"
          },
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "Output matrix.",
            "name": "C"
          },
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "Feedthrough matrix.",
            "name": "D"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "Sampling time, defaults to 0 for continuous-time systems.",
            "name": "Ts"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "object"
              ]
            },
            "description": "An object representing the state-space system { A, B, C, D, Ts }."
          }
        ],
        "source_filename": "control.js",
        "source_lineno": 42,
        "source_range": [
          1277,
          1336
        ]
      },
      "tf2ss": {
        "name": "tf2ss",
        "kind": "function",
        "description": "Convert a transfer function to a state-space representation.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Numerator coefficients of the transfer function.",
            "name": "num"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Denominator coefficients of the transfer function.",
            "name": "den"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "object"
              ]
            },
            "description": "State-space representation of the system."
          }
        ],
        "source_filename": "control.js",
        "source_lineno": 52,
        "source_range": [
          1641,
          2048
        ]
      },
      "ss2tf": {
        "name": "ss2tf",
        "kind": "function",
        "description": "Convert a state-space representation to a transfer function.",
        "params": [
          {
            "type": {
              "names": [
                "object"
              ]
            },
            "description": "State-space system { A, B, C, D }.",
            "name": "sys"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "object"
              ]
            },
            "description": "Transfer function representation { num, den }."
          }
        ],
        "source_filename": "control.js",
        "source_lineno": 72,
        "source_range": [
          2262,
          2563
        ]
      },
      "c2d": {
        "name": "c2d",
        "kind": "function",
        "description": "Convert a continuous-time transfer function to discrete-time.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Continuous-time numerator coefficients.",
            "name": "numc"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Continuous-time denominator coefficients.",
            "name": "denc"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Sampling time.",
            "name": "Ts"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "object"
              ]
            },
            "description": "Discrete-time transfer function representation { num, den }."
          }
        ],
        "source_filename": "control.js",
        "source_lineno": 93,
        "source_range": [
          2913,
          3049
        ]
      },
      "lsim": {
        "name": "lsim",
        "kind": "function",
        "description": "Simulate the time response of a discrete-time linear system.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "transfer function of system.",
            "name": "sys"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Input signal array.",
            "name": "u"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Time vector array.",
            "name": "t"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "object"
              ]
            },
            "description": "An object containing the response:\n                  - y: Output signal array.\n                  - t: Time vector array (same as input)."
          }
        ],
        "source_filename": "control.js",
        "source_lineno": 128,
        "source_range": [
          4134,
          5356
        ]
      },
      "step": {
        "name": "step",
        "kind": "function",
        "description": "Simulates the system response over a specified time period.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The system to simulate.",
            "name": "sys"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The final time for the simulation.",
            "name": "Tfinal"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The simulation result."
          }
        ],
        "source_filename": "control.js",
        "source_lineno": 183,
        "source_range": [
          5601,
          5747
        ]
      },
      "tfest": {
        "name": "tfest",
        "kind": "function",
        "description": "Estimates a transfer function model using numerical optimization.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Time vector.",
            "name": "t"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Input signal vector.",
            "name": "u"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Output signal vector.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Number of poles.",
            "name": "np"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Number of zeros.",
            "name": "nz"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "defaultvalue": "'NelderMead'",
            "description": "Optimization method ('NelderMead' or 'Powell').",
            "name": "method"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Estimated transfer function and mean squared error."
          }
        ],
        "source_filename": "control.js",
        "source_lineno": 200,
        "source_range": [
          6264,
          7022
        ]
      }
    },
    "optim": {
      "optimPowell": {
        "name": "optimPowell",
        "kind": "function",
        "description": "Minimizes an unconstrained function using a coordinate descent-like Powell algorithm.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "Function to be minimized. Accepts an array of size N and returns a scalar.",
            "name": "fnc"
          },
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "Initial guess for the parameters as an array of size N.",
            "name": "x0"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "description": "Optional parameters:\n  - eps: Convergence threshold (default: 1e-6)\n  - alpha: Initial step size scaling factor (default: 0.001)\n  - stepSize: Finite difference step size for gradient estimation (default: 1e-6)\n  - maxIterations: Maximum number of iterations to prevent infinite loops (default: 1000)",
            "name": "options"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "An object with two fields:\n  - argument: The parameter array that minimizes the function.\n  - fncvalue: The function value at the minimized parameters."
          }
        ],
        "source_filename": "optim.js",
        "source_lineno": 37,
        "source_range": [
          1291,
          3063
        ]
      },
      "optimNelderMead": {
        "name": "optimNelderMead",
        "kind": "function",
        "description": "Performs optimization using the Nelder-Mead algorithm.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The objective function to minimize. It should accept an array of numbers and return a scalar value.",
            "name": "f"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An initial guess for the parameters as an array of numbers.",
            "name": "x0"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "description": "Optional parameters to control the optimization process.",
            "name": "parameters"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": "x0.length * 200",
            "description": "Maximum number of iterations to perform.",
            "name": "parameters.maxIterations"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 1.05,
            "description": "Scaling factor for non-zero initial steps in the simplex.",
            "name": "parameters.nonZeroDelta"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0.001,
            "description": "Initial step size for parameters that are initially zero.",
            "name": "parameters.zeroDelta"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": "1e-6",
            "description": "Minimum change in function value to continue iterations.",
            "name": "parameters.minErrorDelta"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": "1e-5",
            "description": "Minimum change in parameters to continue iterations.",
            "name": "parameters.minTolerance"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 1,
            "description": "Reflection coefficient.",
            "name": "parameters.rho"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 2,
            "description": "Expansion coefficient.",
            "name": "parameters.chi"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": -0.5,
            "description": "Contraction coefficient.",
            "name": "parameters.psi"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0.5,
            "description": "Reduction coefficient.",
            "name": "parameters.sigma"
          },
          {
            "type": {
              "names": [
                "Array.<Object>"
              ]
            },
            "optional": true,
            "description": "Optional array to store the history of simplex states for analysis.",
            "name": "parameters.history"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "An object containing:\n  - `fx`: The minimum function value found.\n  - `x`: The parameters corresponding to the minimum function value."
          }
        ],
        "source_filename": "optim.js",
        "source_lineno": 119,
        "source_range": [
          4580,
          4660
        ]
      },
      "optimConjugateGradient": {
        "name": "optimConjugateGradient",
        "kind": "function",
        "description": "Performs optimization using the Conjugate Gradient method.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The objective function to minimize. It should accept an array of numbers and return a scalar value and its gradient.",
            "name": "f"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An initial guess for the parameters as an array of numbers.",
            "name": "initial"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "description": "Optional parameters to control the optimization process.",
            "name": "params"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": "initial.length * 20",
            "description": "Maximum number of iterations to perform.",
            "name": "params.maxIterations"
          },
          {
            "type": {
              "names": [
                "Array.<Object>"
              ]
            },
            "optional": true,
            "description": "Optional array to store the history of optimization steps for analysis.",
            "name": "params.history"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "An object containing:\n  - `fx`: The minimum function value found.\n  - `x`: The parameters corresponding to the minimum function value.\n  - `fxprime`: The gradient of the function at the minimum."
          }
        ],
        "source_filename": "optim.js",
        "source_lineno": 136,
        "source_range": [
          5572,
          5666
        ]
      },
      "optimGradientDescent": {
        "name": "optimGradientDescent",
        "kind": "function",
        "description": "Performs optimization using the Gradient Descent method.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The objective function to minimize. It should accept an array of numbers and return a scalar value and its gradient.",
            "name": "f"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An initial guess for the parameters as an array of numbers.",
            "name": "initial"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "description": "Optional parameters to control the optimization process.",
            "name": "params"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": "initial.length * 100",
            "description": "Maximum number of iterations to perform.",
            "name": "params.maxIterations"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0.001,
            "description": "Learning rate or step size for each iteration.",
            "name": "params.learnRate"
          },
          {
            "type": {
              "names": [
                "Array.<Object>"
              ]
            },
            "optional": true,
            "description": "Optional array to store the history of optimization steps for analysis.",
            "name": "params.history"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "An object containing:\n  - `fx`: The minimum function value found.\n  - `x`: The parameters corresponding to the minimum function value.\n  - `fxprime`: The gradient of the function at the minimum."
          }
        ],
        "source_filename": "optim.js",
        "source_lineno": 154,
        "source_range": [
          6672,
          6762
        ]
      },
      "optimGradientDescentLineSearch": {
        "name": "optimGradientDescentLineSearch",
        "kind": "function",
        "description": "Performs optimization using the Gradient Descent method with Wolfe Line Search.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The objective function to minimize. It should accept an array of numbers and return a scalar value and its gradient.",
            "name": "f"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An initial guess for the parameters as an array of numbers.",
            "name": "initial"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "description": "Optional parameters to control the optimization process.",
            "name": "params"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": "initial.length * 100",
            "description": "Maximum number of iterations to perform.",
            "name": "params.maxIterations"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 1,
            "description": "Initial learning rate or step size for the line search.",
            "name": "params.learnRate"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": "1e-3",
            "description": "Parameter for the Armijo condition in Wolfe Line Search.",
            "name": "params.c1"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0.1,
            "description": "Parameter for the curvature condition in Wolfe Line Search.",
            "name": "params.c2"
          },
          {
            "type": {
              "names": [
                "Array.<Object>"
              ]
            },
            "optional": true,
            "description": "Optional array to store the history of optimization steps for analysis, including line search details.",
            "name": "params.history"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "An object containing:\n  - `fx`: The minimum function value found.\n  - `x`: The parameters corresponding to the minimum function value.\n  - `fxprime`: The gradient of the function at the minimum."
          }
        ],
        "source_filename": "optim.js",
        "source_lineno": 173,
        "source_range": [
          8018,
          8128
        ]
      },
      "optimBisect": {
        "name": "optimBisect",
        "kind": "function",
        "description": "Performs root finding using the Bisection method.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The function for which to find a root. It should accept a number and return a number.",
            "name": "f"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The start of the interval. Must satisfy f(a) and f(b) have opposite signs.",
            "name": "a"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The end of the interval. Must satisfy f(a) and f(b) have opposite signs.",
            "name": "b"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "description": "Optional parameters to control the root-finding process.",
            "name": "parameters"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 100,
            "description": "Maximum number of iterations to perform.",
            "name": "parameters.maxIterations"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": "1e-10",
            "description": "Tolerance for convergence. The method stops when the interval width is below this value.",
            "name": "parameters.tolerance"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The root found within the interval [a, b]."
          }
        ],
        "source_filename": "optim.js",
        "source_lineno": 187,
        "source_range": [
          8909,
          8981
        ]
      },
      "fminsearch": {
        "name": "fminsearch",
        "kind": "function",
        "description": "Performs search using the Nelder-Mead algorithm.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The objective function to minimize. It should accept an array of numbers and return a scalar value.",
            "name": "f"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An initial guess for the parameters as an array of numbers.",
            "name": "x0"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "description": "Optional parameters to control the optimization process.",
            "name": "parameters"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": "x0.length * 200",
            "description": "Maximum number of iterations to perform.",
            "name": "parameters.maxIterations"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 1.05,
            "description": "Scaling factor for non-zero initial steps in the simplex.",
            "name": "parameters.nonZeroDelta"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0.001,
            "description": "Initial step size for parameters that are initially zero.",
            "name": "parameters.zeroDelta"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": "1e-6",
            "description": "Minimum change in function value to continue iterations.",
            "name": "parameters.minErrorDelta"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": "1e-5",
            "description": "Minimum change in parameters to continue iterations.",
            "name": "parameters.minTolerance"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 1,
            "description": "Reflection coefficient.",
            "name": "parameters.rho"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 2,
            "description": "Expansion coefficient.",
            "name": "parameters.chi"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": -0.5,
            "description": "Contraction coefficient.",
            "name": "parameters.psi"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0.5,
            "description": "Reduction coefficient.",
            "name": "parameters.sigma"
          },
          {
            "type": {
              "names": [
                "Array.<Object>"
              ]
            },
            "optional": true,
            "description": "Optional array to store the history of simplex states for analysis.",
            "name": "parameters.history"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "An object containing:\n  - `fx`: The minimum function value found.\n  - `x`: The parameters corresponding to the minimum function value."
          }
        ],
        "source_filename": "optim.js",
        "source_lineno": 211,
        "source_range": [
          10492,
          10567
        ]
      },
      "fminbnd": {
        "name": "fminbnd",
        "kind": "function",
        "description": "Finds the minimum of a univariate function within a specified interval using a bracketing method.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The function to minimize. Should accept a single number and return a number.",
            "name": "func"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The lower bound of the interval.",
            "name": "a"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The upper bound of the interval.",
            "name": "b"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": "1e-5",
            "description": "The tolerance for convergence (optional).",
            "name": "tol"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "An object containing:\n  - `fx`: The minimum function value found.\n  - `x`: The x-value where the function attains its minimum within [a, b]."
          }
        ],
        "source_filename": "optim.js",
        "source_lineno": 225,
        "source_range": [
          11181,
          13023
        ]
      },
      "rcmiga": {
        "name": "rcmiga",
        "kind": "function",
        "description": "Creates an instance of PRDC_JSLAB_LIB_OPTIM_RCMIGA.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The optimization problem definition.",
            "name": "problem"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Configuration options for the algorithm.",
            "name": "opts"
          }
        ],
        "source_filename": "optim.js",
        "source_lineno": 308,
        "source_range": [
          13235,
          13305
        ]
      }
    },
    "presentation": {},
    "mechanics": {
      "plotBeamDiagrams": {
        "name": "plotBeamDiagrams",
        "kind": "function",
        "description": "Plots beam diagrams.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "Array of objects with x, y, title, xlabel, ylabel",
            "name": "data"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "description": "Extra plotting options",
            "name": "opts_in"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<{extrems: Array.<String>, context: Object}>"
              ]
            }
          }
        ],
        "async": true,
        "source_filename": "mechanics.js",
        "source_lineno": 29,
        "source_range": [
          717,
          4180
        ]
      }
    },
    "Matrix": {
      "column": {
        "name": "column",
        "kind": "function",
        "description": "Extracts a specific column from a matrix.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The index of the column to extract.",
            "name": "index"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The extracted column as an array."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 202,
        "source_range": [
          5246,
          5323
        ]
      },
      "row": {
        "name": "row",
        "kind": "function",
        "description": "Extracts a specific row from a matrix.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The index of the row to extract.",
            "name": "index"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The extracted row as an array."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 211,
        "source_range": [
          5498,
          5569
        ]
      },
      "length": {
        "name": "length",
        "kind": "function",
        "description": "Gets the length of the matrix along a specified dimension.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The dimension (0 for rows, 1 for columns).",
            "name": "dim"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The length along the specified dimension."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 220,
        "source_range": [
          5786,
          5830
        ]
      },
      "numel": {
        "name": "numel",
        "kind": "function",
        "description": "Gets the number of elements in the matrix.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of elements."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 228,
        "source_range": [
          5943,
          5990
        ]
      },
      "size": {
        "name": "size",
        "kind": "function",
        "description": "Gets the size of the matrix along a specified dimension.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The dimension (0 for rows, 1 for columns).",
            "name": "dim"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The size along the specified dimension."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 237,
        "source_range": [
          6203,
          6331
        ]
      },
      "reshape": {
        "name": "reshape",
        "kind": "function",
        "description": "Reshapes the matrix to the specified dimensions.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "New number of rows.",
            "name": "rows"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "New number of columns.",
            "name": "cols"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The reshaped matrix."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 251,
        "source_range": [
          6557,
          6679
        ]
      },
      "repmat": {
        "name": "repmat",
        "kind": "function",
        "description": "Replicates the matrix a specified number of times.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Number of row repetitions.",
            "name": "rowReps"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Number of column repetitions.",
            "name": "colReps"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The replicated matrix."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 262,
        "source_range": [
          6929,
          7342
        ]
      },
      "transpose": {
        "name": "transpose",
        "kind": "function",
        "description": "Transposes the matrix.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The transposed matrix."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 286,
        "source_range": [
          7443,
          7579
        ]
      },
      "inv": {
        "name": "inv",
        "kind": "function",
        "description": "Computes the inverse of the matrix.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The inverse matrix."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 295,
        "source_range": [
          7690,
          7771
        ]
      },
      "det": {
        "name": "det",
        "kind": "function",
        "description": "Computes the determinant of the matrix.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The determinant."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 303,
        "source_range": [
          7874,
          7936
        ]
      },
      "trace": {
        "name": "trace",
        "kind": "function",
        "description": "Computes the trace of the matrix (sum of diagonal elements).",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The trace of the matrix."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 311,
        "source_range": [
          8066,
          8132
        ]
      },
      "norm": {
        "name": "norm",
        "kind": "function",
        "description": "Computes the Frobenius norm of the matrix.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The Frobenius norm."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 319,
        "source_range": [
          8239,
          8311
        ]
      },
      "powm": {
        "name": "powm",
        "kind": "function",
        "description": "Raises the matrix to a power.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The exponent.",
            "name": "p"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The resulting matrix."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 328,
        "source_range": [
          8457,
          8543
        ]
      },
      "expm": {
        "name": "expm",
        "kind": "function",
        "description": "Computes the matrix exponential.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The exponential matrix."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 336,
        "source_range": [
          8655,
          8744
        ]
      },
      "add": {
        "name": "add",
        "kind": "function",
        "description": "Adds two matrices.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The matrix to add.",
            "name": "A"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The resulting matrix."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 345,
        "source_range": [
          8897,
          9009
        ]
      },
      "plus": {
        "name": "plus",
        "kind": "function",
        "description": "Adds two matrices (alias for add).",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The matrix to add.",
            "name": "A"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The resulting matrix."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 355,
        "source_range": [
          9176,
          9213
        ]
      },
      "subtract": {
        "name": "subtract",
        "kind": "function",
        "description": "Subtracts matrix A from the current matrix.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The matrix to subtract.",
            "name": "A"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The resulting matrix."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 364,
        "source_range": [
          9394,
          9512
        ]
      },
      "minus": {
        "name": "minus",
        "kind": "function",
        "description": "Subtracts matrix A from the current matrix (alias for subtract).",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The matrix to subtract.",
            "name": "A"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The resulting matrix."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 374,
        "source_range": [
          9714,
          9757
        ]
      },
      "multiply": {
        "name": "multiply",
        "kind": "function",
        "description": "Multiplies two matrices.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The matrix to multiply with.",
            "name": "A"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The resulting matrix."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 383,
        "source_range": [
          9924,
          10065
        ]
      },
      "linsolve": {
        "name": "linsolve",
        "kind": "function",
        "description": "Solves a linear system.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The right-hand side matrix.",
            "name": "B"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The solution matrix."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 392,
        "source_range": [
          10231,
          10348
        ]
      },
      "divideEl": {
        "name": "divideEl",
        "kind": "function",
        "description": "Divides each element by another matrix or scalar.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX",
                "number"
              ]
            },
            "description": "The matrix or scalar to divide by.",
            "name": "A"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The resulting matrix."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 401,
        "source_range": [
          10555,
          10839
        ]
      },
      "multiplyEl": {
        "name": "multiplyEl",
        "kind": "function",
        "description": "Multiplies each element by another matrix or scalar.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX",
                "number"
              ]
            },
            "description": "The matrix or scalar to multiply by.",
            "name": "A"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The resulting matrix."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 416,
        "source_range": [
          11049,
          11333
        ]
      },
      "powEl": {
        "name": "powEl",
        "kind": "function",
        "description": "Raises each element to a power.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The exponent.",
            "name": "p"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The resulting matrix."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 431,
        "source_range": [
          11481,
          11591
        ]
      },
      "elementWise": {
        "name": "elementWise",
        "kind": "function",
        "description": "Applies a function to each element of the matrix.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The function to apply.",
            "name": "func"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The resulting matrix."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 441,
        "source_range": [
          11771,
          11909
        ]
      },
      "reciprocal": {
        "name": "reciprocal",
        "kind": "function",
        "description": "Computes the reciprocal of each element in the matrix.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The matrix with reciprocals."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 450,
        "source_range": [
          12050,
          12189
        ]
      },
      "sum": {
        "name": "sum",
        "kind": "function",
        "description": "Computes the sum of all elements in the matrix.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The sum of all elements."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 459,
        "source_range": [
          12308,
          12370
        ]
      },
      "sort": {
        "name": "sort",
        "kind": "function",
        "description": "Sorts the elements of the matrix.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "defaultvalue": "'asc'",
            "description": "The order of sorting ('asc' or 'desc').",
            "name": "order"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The sorted matrix."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 468,
        "source_range": [
          12555,
          12614
        ]
      },
      "min": {
        "name": "min",
        "kind": "function",
        "description": "Finds the minimum element in the matrix.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The minimum value."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 476,
        "source_range": [
          12718,
          12780
        ]
      },
      "max": {
        "name": "max",
        "kind": "function",
        "description": "Finds the maximum element in the matrix.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The maximum value."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 484,
        "source_range": [
          12884,
          12946
        ]
      },
      "clone": {
        "name": "clone",
        "kind": "function",
        "description": "Creates a clone of the current matrix.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "A cloned matrix instance."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 492,
        "source_range": [
          13068,
          13144
        ]
      },
      "index": {
        "name": "index",
        "kind": "function",
        "description": "Retrieves elements based on row and column indices.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "_"
              ]
            },
            "variable": true,
            "description": "Row and column indices.",
            "name": "args"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The selected elements."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 501,
        "source_range": [
          13321,
          13935
        ]
      },
      "setSub": {
        "name": "setSub",
        "kind": "function",
        "description": "Sets a subset of the matrix elements.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "variable": true,
            "description": "Indices and values to set.",
            "name": "args"
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 536,
        "source_range": [
          14049,
          14781
        ]
      },
      "getSub": {
        "name": "getSub",
        "kind": "function",
        "description": "Gets a subset of the matrix elements.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "variable": true,
            "description": "Indices to retrieve.",
            "name": "args"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The subset matrix."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 574,
        "source_range": [
          14940,
          15707
        ]
      },
      "toArray": {
        "name": "toArray",
        "kind": "function",
        "description": "Converts the matrix to a two-dimensional array.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The matrix data as a two-dimensional array."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 615,
        "source_range": [
          15844,
          15928
        ]
      },
      "toFlatArray": {
        "name": "toFlatArray",
        "kind": "function",
        "description": "Converts the matrix to a one-dimensional array.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The matrix data as a one-dimensional array."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 623,
        "source_range": [
          16065,
          16106
        ]
      },
      "toString": {
        "name": "toString",
        "kind": "function",
        "description": "Returns a string representation of the matrix.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The string representation of the matrix."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 631,
        "source_range": [
          16240,
          16573
        ]
      },
      "toJSON": {
        "name": "toJSON",
        "kind": "function",
        "description": "Returns a JSON representation of the matrix.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The matrix data as a two-dimensional array."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 650,
        "source_range": [
          16707,
          16748
        ]
      },
      "toSafeJSON": {
        "name": "toSafeJSON",
        "kind": "function",
        "description": "Returns a safe JSON representation of the matrix.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The matrix data as a two-dimensional array."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 658,
        "source_range": [
          16887,
          16931
        ]
      },
      "toPrettyString": {
        "name": "toPrettyString",
        "kind": "function",
        "description": "Returns a pretty string representation of the matrix.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The pretty string representation of the matrix."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 666,
        "source_range": [
          17079,
          17129
        ]
      }
    },
    "Vector": {
      "length": {
        "name": "length",
        "kind": "function",
        "description": "Calculates the length (magnitude) of the vector.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The length of the vector."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 110,
        "source_range": [
          3145,
          3234
        ]
      },
      "norm": {
        "name": "norm",
        "kind": "function",
        "description": "Calculates the length (magnitude) of the vector.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The length of the vector."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 118,
        "source_range": [
          3353,
          3391
        ]
      },
      "add": {
        "name": "add",
        "kind": "function",
        "description": "Adds two vectors and returns the result.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VECTOR"
              ]
            },
            "description": "The second vector.",
            "name": "v"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VECTOR"
              ]
            },
            "description": "The resulting vector after addition."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 127,
        "source_range": [
          3581,
          3665
        ]
      },
      "plus": {
        "name": "plus",
        "kind": "function",
        "description": "Adds two vectors and returns the result.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VECTOR"
              ]
            },
            "description": "The second vector.",
            "name": "v"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VECTOR"
              ]
            },
            "description": "The resulting vector after addition."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 136,
        "source_range": [
          3853,
          3890
        ]
      },
      "subtract": {
        "name": "subtract",
        "kind": "function",
        "description": "Subtracts the second vector from the first and returns the result.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VECTOR"
              ]
            },
            "description": "The vector to subtract.",
            "name": "v"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VECTOR"
              ]
            },
            "description": "The resulting vector after subtraction."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 145,
        "source_range": [
          4114,
          4203
        ]
      },
      "minus": {
        "name": "minus",
        "kind": "function",
        "description": "Subtracts the second vector from the first and returns the result.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VECTOR"
              ]
            },
            "description": "The vector to subtract.",
            "name": "v"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VECTOR"
              ]
            },
            "description": "The resulting vector after subtraction."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 154,
        "source_range": [
          4425,
          4468
        ]
      },
      "scale": {
        "name": "scale",
        "kind": "function",
        "description": "Scales a vector by the given factors.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Object"
              ]
            },
            "description": "The scale factor for the x-component or an object with x, y, z properties.",
            "name": "scale_x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "description": "The scale factor for the y-component.",
            "name": "scale_y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "description": "The scale factor for the z-component.",
            "name": "scale_z"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VECTOR"
              ]
            },
            "description": "The scaled vector."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 165,
        "source_range": [
          4837,
          5160
        ]
      },
      "multiply": {
        "name": "multiply",
        "kind": "function",
        "description": "Scales a vector by the given factor.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The scale factor.",
            "name": "s"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VECTOR"
              ]
            },
            "description": "The scaled vector."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 182,
        "source_range": [
          5316,
          5359
        ]
      },
      "divide": {
        "name": "divide",
        "kind": "function",
        "description": "Scales a vector by dividing each element by given factor.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The scale factor.",
            "name": "s"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VECTOR"
              ]
            },
            "description": "The scaled vector."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 191,
        "source_range": [
          5536,
          5581
        ]
      },
      "equals": {
        "name": "equals",
        "kind": "function",
        "description": "Checks if two vectors are equal.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VECTOR"
              ]
            },
            "description": "The second vector.",
            "name": "v"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if vectors are equal, false otherwise."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 200,
        "source_range": [
          5760,
          5835
        ]
      },
      "angleTo": {
        "name": "angleTo",
        "kind": "function",
        "description": "Calculates the angle of a vector.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VECTOR"
              ]
            },
            "description": "The vector.",
            "name": "v"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The angle in degrees."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 209,
        "source_range": [
          5983,
          6110
        ]
      },
      "projectTo": {
        "name": "projectTo",
        "kind": "function",
        "description": "Projects vector to given vector.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VECTOR"
              ]
            },
            "description": "The vector.",
            "name": "v"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VECTOR"
              ]
            },
            "description": "The projected vector."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 219,
        "source_range": [
          6268,
          6346
        ]
      },
      "angles": {
        "name": "angles",
        "kind": "function",
        "description": "Calculates the angles of a vector.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VECTOR"
              ]
            },
            "description": "The vector.",
            "name": "v"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The angles azimuth and elevation in degrees."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 228,
        "source_range": [
          6519,
          6773
        ]
      },
      "distance": {
        "name": "distance",
        "kind": "function",
        "description": "Calculates the distance between two vectors.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VECTOR"
              ]
            },
            "description": "The second vector.",
            "name": "v"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The distance between the two vectors."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 240,
        "source_range": [
          6957,
          7097
        ]
      },
      "dot": {
        "name": "dot",
        "kind": "function",
        "description": "Calculates the dot product of two vectors.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VECTOR"
              ]
            },
            "description": "The second vector.",
            "name": "v"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The dot product."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 252,
        "source_range": [
          7258,
          7325
        ]
      },
      "cross": {
        "name": "cross",
        "kind": "function",
        "description": "Calculates the cross product of two vectors.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VECTOR"
              ]
            },
            "description": "The second vector.",
            "name": "v"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VECTOR"
              ]
            },
            "description": "The cross product vector."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 261,
        "source_range": [
          7508,
          7720
        ]
      },
      "interpolate": {
        "name": "interpolate",
        "kind": "function",
        "description": "Interpolates between two vectors by a factor.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VECTOR"
              ]
            },
            "description": "The ending vector.",
            "name": "v"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The interpolation factor.",
            "name": "f"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VECTOR"
              ]
            },
            "description": "The interpolated vector."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 274,
        "source_range": [
          7954,
          8139
        ]
      },
      "offset": {
        "name": "offset",
        "kind": "function",
        "description": "Offsets the vector by the given amounts.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Object"
              ]
            },
            "description": "The amount to offset in the x-direction or an object with x, y, z properties.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "The amount to offset in the y-direction.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "The amount to offset in the z-direction.",
            "name": "z"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VECTOR"
              ]
            },
            "description": "The updated vector instance."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 288,
        "source_range": [
          8516,
          8734
        ]
      },
      "normalize": {
        "name": "normalize",
        "kind": "function",
        "description": "Normalizes the vector to have a length of 1.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VECTOR"
              ]
            },
            "description": "The normalized vector."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 306,
        "source_range": [
          8859,
          9099
        ]
      },
      "negate": {
        "name": "negate",
        "kind": "function",
        "description": "Negates the vector components.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VECTOR"
              ]
            },
            "description": "The negated vector."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 322,
        "source_range": [
          9207,
          9340
        ]
      },
      "clone": {
        "name": "clone",
        "kind": "function",
        "description": "Creates a clone of this vector.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VECTOR"
              ]
            },
            "description": "A new vector instance with the same components."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 334,
        "source_range": [
          9477,
          9544
        ]
      },
      "toArray": {
        "name": "toArray",
        "kind": "function",
        "description": "Converts the vector to an array.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "An array containing the x, y, z components of the vector."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 342,
        "source_range": [
          9683,
          9735
        ]
      },
      "toMatrix": {
        "name": "toMatrix",
        "kind": "function",
        "description": "Converts the vector to a matrix.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "A matrix representation of the vector."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 350,
        "source_range": [
          9851,
          9929
        ]
      },
      "toColMatrix": {
        "name": "toColMatrix",
        "kind": "function",
        "description": "Converts the vector to a column matrix.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "A column matrix representation of the vector."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 358,
        "source_range": [
          10059,
          10140
        ]
      },
      "toRowMatrix": {
        "name": "toRowMatrix",
        "kind": "function",
        "description": "Converts the vector to a row matrix.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "A row matrix representation of the vector."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 366,
        "source_range": [
          10264,
          10311
        ]
      },
      "toString": {
        "name": "toString",
        "kind": "function",
        "description": "Returns a string representation of the vector.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The string representation in the format 'Vector(x:, y:, z:)'."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 374,
        "source_range": [
          10466,
          10553
        ]
      },
      "toJSON": {
        "name": "toJSON",
        "kind": "function",
        "description": "Returns a string representation of the vector.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The string representation in the format 'Vector(x:, y:, z:)'."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 382,
        "source_range": [
          10708,
          10770
        ]
      },
      "toSafeJSON": {
        "name": "toSafeJSON",
        "kind": "function",
        "description": "Returns a string representation of the vector.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The string representation in the format 'Vector(x:, y:, z:)'."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 390,
        "source_range": [
          10925,
          10969
        ]
      },
      "toPrettyString": {
        "name": "toPrettyString",
        "kind": "function",
        "description": "Converts the object to a pretty string representation.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The pretty string representation of the object."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 398,
        "source_range": [
          11118,
          11168
        ]
      }
    },
    "Symbolic": {
      "setValue": {
        "name": "setValue",
        "kind": "function",
        "description": "Sets the value of the symbolic variable.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The new value to assign to the symbolic variable.",
            "name": "value"
          }
        ],
        "source_filename": "sym-math.js",
        "source_lineno": 485,
        "source_range": [
          14235,
          14335
        ]
      },
      "toString": {
        "name": "toString",
        "kind": "function",
        "description": "Returns a string representation of the vector.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The string representation in the format 'Vector(x:, y:, z:)'."
          }
        ],
        "source_filename": "sym-math.js",
        "source_lineno": 494,
        "source_range": [
          14488,
          14575
        ]
      },
      "toNumeric": {
        "name": "toNumeric",
        "kind": "function",
        "description": "Converts the symbolic value to a numeric value.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The numeric representation of the symbolic value."
          }
        ],
        "source_filename": "sym-math.js",
        "source_lineno": 502,
        "source_range": [
          14712,
          14759
        ]
      },
      "toJSON": {
        "name": "toJSON",
        "kind": "function",
        "description": "Converts the symbolic value to a JSON string.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The JSON string representation of the symbolic value."
          }
        ],
        "source_filename": "sym-math.js",
        "source_lineno": 510,
        "source_range": [
          14905,
          15027
        ]
      },
      "toSafeJSON": {
        "name": "toSafeJSON",
        "kind": "function",
        "description": "Converts the object to a safe JSON representation.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The safe JSON representation of the object."
          }
        ],
        "source_filename": "sym-math.js",
        "source_lineno": 521,
        "source_range": [
          15168,
          15212
        ]
      },
      "toPrettyString": {
        "name": "toPrettyString",
        "kind": "function",
        "description": "Converts the object to a pretty string representation.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The pretty string representation of the object."
          }
        ],
        "source_filename": "sym-math.js",
        "source_lineno": 529,
        "source_range": [
          15361,
          15411
        ]
      }
    },
    "Window": {
      "open": {
        "name": "open",
        "kind": "function",
        "description": "Opens the window with the specified file.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The path to the HTML file to open in the window.",
            "name": "file"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<void>"
              ]
            },
            "description": "A promise that resolves when the window is opened and ready."
          }
        ],
        "async": true,
        "source_filename": "windows.js",
        "source_lineno": 568,
        "source_range": [
          17306,
          17660
        ]
      },
      "show": {
        "name": "show",
        "kind": "function",
        "description": "Shows the window.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<(boolean|undefined)>"
              ]
            },
            "description": "- Resolves to `true` if the window was shown successfully, or `false` if the window ID is invalid."
          }
        ],
        "async": true,
        "source_filename": "windows.js",
        "source_lineno": 587,
        "source_range": [
          17841,
          17955
        ]
      },
      "hide": {
        "name": "hide",
        "kind": "function",
        "description": "Hides the window.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<(boolean|undefined)>"
              ]
            },
            "description": "- Resolves to `true` if the window was hidden successfully, or `false` if the window ID is invalid."
          }
        ],
        "async": true,
        "source_filename": "windows.js",
        "source_lineno": 596,
        "source_range": [
          18137,
          18251
        ]
      },
      "focus": {
        "name": "focus",
        "kind": "function",
        "description": "Brings focus to the window.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Promise"
              ]
            },
            "description": "- Resolves when the window size is focused."
          }
        ],
        "async": true,
        "source_filename": "windows.js",
        "source_lineno": 605,
        "source_range": [
          18370,
          18486
        ]
      },
      "minimize": {
        "name": "minimize",
        "kind": "function",
        "description": "Minimizes the window.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<(boolean|undefined)>"
              ]
            },
            "description": "- Resolves to `true` if the window was minimized successfully, or `false` if the window ID is invalid."
          }
        ],
        "async": true,
        "source_filename": "windows.js",
        "source_lineno": 614,
        "source_range": [
          18675,
          18797
        ]
      },
      "center": {
        "name": "center",
        "kind": "function",
        "description": "Centers the window on the screen.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<(boolean|undefined)>"
              ]
            },
            "description": "- Resolves to `true` if the window was centered successfully, or `false` if the window ID is invalid."
          }
        ],
        "async": true,
        "source_filename": "windows.js",
        "source_lineno": 623,
        "source_range": [
          18989,
          19107
        ]
      },
      "moveTop": {
        "name": "moveTop",
        "kind": "function",
        "description": "Moves the window to the top of the window stack.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<(boolean|undefined)>"
              ]
            },
            "description": "- Resolves to `true` if the window was moved to the top successfully, or `false` if the window ID is invalid."
          }
        ],
        "async": true,
        "source_filename": "windows.js",
        "source_lineno": 632,
        "source_range": [
          19330,
          19450
        ]
      },
      "setSize": {
        "name": "setSize",
        "kind": "function",
        "description": "Sets the size of the current window.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The desired width of the window.",
            "name": "width"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The desired height of the window.",
            "name": "height"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise"
              ]
            },
            "description": "- Resolves when the window size is set."
          }
        ],
        "async": true,
        "source_filename": "windows.js",
        "source_lineno": 643,
        "source_range": [
          19700,
          19848
        ]
      },
      "setPos": {
        "name": "setPos",
        "kind": "function",
        "description": "Sets the position of the current window.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The desired left position of the window.",
            "name": "left"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The desired top position of the window.",
            "name": "top"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise"
              ]
            },
            "description": "- Resolves when the window position is set."
          }
        ],
        "async": true,
        "source_filename": "windows.js",
        "source_lineno": 654,
        "source_range": [
          20116,
          20254
        ]
      },
      "setResizable": {
        "name": "setResizable",
        "kind": "function",
        "description": "Sets the resizable state of the window.",
        "params": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Whether the window should be resizable (`true`) or not (`false`).",
            "name": "state"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<(boolean|undefined)>"
              ]
            },
            "description": "- Resolves to `true` if the resizable state was set successfully, or `false` if the window ID is invalid."
          }
        ],
        "async": true,
        "source_filename": "windows.js",
        "source_lineno": 664,
        "source_range": [
          20560,
          20702
        ]
      },
      "setMovable": {
        "name": "setMovable",
        "kind": "function",
        "description": "Sets the movable state of the window.",
        "params": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Whether the window should be movable (`true`) or not (`false`).",
            "name": "state"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<(boolean|undefined)>"
              ]
            },
            "description": "- Resolves to `true` if the movable state was set successfully, or `false` if the window ID is invalid."
          }
        ],
        "async": true,
        "source_filename": "windows.js",
        "source_lineno": 674,
        "source_range": [
          21002,
          21140
        ]
      },
      "setAspectRatio": {
        "name": "setAspectRatio",
        "kind": "function",
        "description": "Sets the aspect ratio of the window.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The desired aspect ratio (width divided by height) for the window.",
            "name": "aspect_ratio"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<(boolean|undefined)>"
              ]
            },
            "description": "- Resolves to `true` if the aspect ratio was set successfully, or `false` if the window ID is invalid."
          }
        ],
        "async": true,
        "source_filename": "windows.js",
        "source_lineno": 684,
        "source_range": [
          21447,
          21607
        ]
      },
      "setOpacity": {
        "name": "setOpacity",
        "kind": "function",
        "description": "Sets the opacity of the window.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The desired opacity level of the window (ranging from `0` for fully transparent to `1` for fully opaque).",
            "name": "opacity"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<(boolean|undefined)>"
              ]
            },
            "description": "- Resolves to `true` if the opacity was set successfully, or `false` if the window ID is invalid."
          }
        ],
        "async": true,
        "source_filename": "windows.js",
        "source_lineno": 694,
        "source_range": [
          21938,
          22080
        ]
      },
      "setTitle": {
        "name": "setTitle",
        "kind": "function",
        "description": "Sets the title of the current window.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The new title for the window.",
            "name": "title"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<*>"
              ]
            },
            "description": "A promise that resolves when the title is set."
          }
        ],
        "async": true,
        "source_filename": "windows.js",
        "source_lineno": 704,
        "source_range": [
          22274,
          22408
        ]
      },
      "getSize": {
        "name": "getSize",
        "kind": "function",
        "description": "Retrieves the size of the current window.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<Array>"
              ]
            },
            "description": "- Resolves with an array [width, height]."
          }
        ],
        "async": true,
        "source_filename": "windows.js",
        "source_lineno": 713,
        "source_range": [
          22546,
          22666
        ]
      },
      "getPos": {
        "name": "getPos",
        "kind": "function",
        "description": "Retrieves the position of the current window.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<Array>"
              ]
            },
            "description": "- Resolves with an array [left, top]."
          }
        ],
        "async": true,
        "source_filename": "windows.js",
        "source_lineno": 722,
        "source_range": [
          22804,
          22922
        ]
      },
      "close": {
        "name": "close",
        "kind": "function",
        "description": "Closes the current window.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Promise"
              ]
            },
            "description": "- Resolves when the window is closed."
          }
        ],
        "async": true,
        "source_filename": "windows.js",
        "source_lineno": 731,
        "source_range": [
          23034,
          23151
        ]
      },
      "openDevTools": {
        "name": "openDevTools",
        "kind": "function",
        "description": "Opens the developer tools for the current window asynchronously.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<boolean>"
              ]
            },
            "description": "A promise that resolves to true when dev tools are opened."
          }
        ],
        "async": true,
        "source_filename": "windows.js",
        "source_lineno": 740,
        "source_range": [
          23331,
          23461
        ]
      },
      "addScript": {
        "name": "addScript",
        "kind": "function",
        "description": "Appends a script to the document head.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The script's URL.",
            "name": "script_path"
          }
        ],
        "source_filename": "windows.js",
        "source_lineno": 749,
        "source_range": [
          23572,
          23748
        ]
      },
      "addLinkStylesheet": {
        "name": "addLinkStylesheet",
        "kind": "function",
        "description": "Appends a stylesheet link to the document head.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The stylesheet's URL.",
            "name": "stylesheet_path"
          }
        ],
        "source_filename": "windows.js",
        "source_lineno": 759,
        "source_range": [
          23876,
          24090
        ]
      },
      "addUI": {
        "name": "addUI",
        "kind": "function",
        "description": "Loads the UI script.",
        "params": [],
        "source_filename": "windows.js",
        "source_lineno": 769,
        "source_range": [
          24134,
          24235
        ]
      }
    },
    "Figure": {
      "init": {
        "name": "init",
        "kind": "function",
        "description": "Initializes figure.",
        "params": [],
        "async": true,
        "source_filename": "figures.js",
        "source_lineno": 705,
        "source_range": [
          20233,
          20395
        ]
      },
      "focus": {
        "name": "focus",
        "kind": "function",
        "description": "Brings the figure window to the foreground.",
        "params": [],
        "async": true,
        "source_filename": "figures.js",
        "source_lineno": 716,
        "source_range": [
          20462,
          20597
        ]
      },
      "setSize": {
        "name": "setSize",
        "kind": "function",
        "description": "Sets the size of the window.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The desired width of the window.",
            "name": "width"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The desired height of the window.",
            "name": "height"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise"
              ]
            },
            "description": "- Resolves when the window size is set."
          }
        ],
        "async": true,
        "source_filename": "figures.js",
        "source_lineno": 727,
        "source_range": [
          20837,
          21002
        ]
      },
      "setPos": {
        "name": "setPos",
        "kind": "function",
        "description": "Sets the position of the window.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The desired left position of the window.",
            "name": "left"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The desired top position of the window.",
            "name": "top"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise"
              ]
            },
            "description": "- Resolves when the window position is set."
          }
        ],
        "async": true,
        "source_filename": "figures.js",
        "source_lineno": 738,
        "source_range": [
          21262,
          21417
        ]
      },
      "setTitle": {
        "name": "setTitle",
        "kind": "function",
        "description": "Sets the title of the current window.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The new title for the window.",
            "name": "title"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<*>"
              ]
            },
            "description": "A promise that resolves when the title is set."
          }
        ],
        "async": true,
        "source_filename": "figures.js",
        "source_lineno": 748,
        "source_range": [
          21611,
          21762
        ]
      },
      "getSize": {
        "name": "getSize",
        "kind": "function",
        "description": "Retrieves the size of the window.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<Array>"
              ]
            },
            "description": "- Resolves with an array [width, height]."
          }
        ],
        "async": true,
        "source_filename": "figures.js",
        "source_lineno": 757,
        "source_range": [
          21892,
          22031
        ]
      },
      "getPos": {
        "name": "getPos",
        "kind": "function",
        "description": "Retrieves the position of the window.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<Array>"
              ]
            },
            "description": "- Resolves with an array [left, top]."
          }
        ],
        "async": true,
        "source_filename": "figures.js",
        "source_lineno": 766,
        "source_range": [
          22161,
          22298
        ]
      },
      "close": {
        "name": "close",
        "kind": "function",
        "description": "Closes the window.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Promise"
              ]
            },
            "description": "- Resolves when the window is closed."
          }
        ],
        "async": true,
        "source_filename": "figures.js",
        "source_lineno": 775,
        "source_range": [
          22402,
          22537
        ]
      }
    },
    "Plot": {
      "legend": {
        "name": "legend",
        "kind": "function",
        "description": "Sets the label for the x-axis of the plot.",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Label text for the x-axis.",
            "name": "label"
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 991,
        "source_range": [
          28738,
          28871
        ]
      },
      "xlabel": {
        "name": "xlabel",
        "kind": "function",
        "description": "Sets the label for the x-axis of the plot.",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Label text for the x-axis.",
            "name": "label"
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 1002,
        "source_range": [
          28991,
          29122
        ]
      },
      "ylabel": {
        "name": "ylabel",
        "kind": "function",
        "description": "Sets the label for the y-axis of the plot.",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Label text for the y-axis.",
            "name": "label"
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 1013,
        "source_range": [
          29240,
          29371
        ]
      },
      "zlabel": {
        "name": "zlabel",
        "kind": "function",
        "description": "Sets the label for the z-axis of the plot.",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Label text for the z-axis.",
            "name": "label"
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 1024,
        "source_range": [
          29489,
          29620
        ]
      },
      "title": {
        "name": "title",
        "kind": "function",
        "description": "Sets the title of the plot.",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Title text for the plot.",
            "name": "label"
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 1035,
        "source_range": [
          29723,
          29852
        ]
      },
      "xlim": {
        "name": "xlim",
        "kind": "function",
        "description": "Sets the limits for the x-axis of the plot.",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Limits for the x-axis.",
            "name": "lim"
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 1046,
        "source_range": [
          29967,
          30118
        ]
      },
      "ylim": {
        "name": "ylim",
        "kind": "function",
        "description": "Sets the limits for the y-axis of the plot.",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Limits for the y-axis.",
            "name": "lim"
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 1058,
        "source_range": [
          30233,
          30384
        ]
      },
      "zlim": {
        "name": "zlim",
        "kind": "function",
        "description": "Sets the limits for the z-axis of the plot.",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "Limits for the z-axis.",
            "name": "lim"
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 1070,
        "source_range": [
          30499,
          30650
        ]
      },
      "view": {
        "name": "view",
        "kind": "function",
        "description": "Adjusts the view based on azimuth and elevation angles.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The azimuth angle.",
            "name": "azimuth"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The elevation angle.",
            "name": "elevation"
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 1083,
        "source_range": [
          30833,
          30988
        ]
      },
      "zoom": {
        "name": "zoom",
        "kind": "function",
        "description": "Adjusts the zoom based on factor.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The zoom factor.",
            "name": "factor"
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 1094,
        "source_range": [
          31092,
          31221
        ]
      },
      "axis": {
        "name": "axis",
        "kind": "function",
        "description": "Sets the axis style value and updates the plot layout if the plot is ready.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The style configuration to set for the axis.",
            "name": "style"
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 1105,
        "source_range": [
          31394,
          31527
        ]
      },
      "print": {
        "name": "print",
        "kind": "function",
        "description": "Adds a print job to the queue and prints it if the system is ready.",
        "params": [
          {
            "type": {
              "names": [
                "String"
              ]
            },
            "description": "The filename for the print job.",
            "name": "filename"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Options for the print job.",
            "name": "options"
          }
        ],
        "async": true,
        "source_filename": "figures.js",
        "source_lineno": 1117,
        "source_range": [
          31740,
          32084
        ]
      },
      "update": {
        "name": "update",
        "kind": "function",
        "description": "Updates plot data by delegating to the `updateData` method.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The trace data to be updated in the plot.",
            "name": "traces"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The data length or index for updating the plot.",
            "name": "N"
          }
        ],
        "source_filename": "figures.js",
        "source_lineno": 1137,
        "source_range": [
          32312,
          32389
        ]
      },
      "remove": {
        "name": "remove",
        "kind": "function",
        "description": "Removes the plot from the figure, cleaning up any resources associated with it.",
        "params": [],
        "source_filename": "figures.js",
        "source_lineno": 1144,
        "source_range": [
          32492,
          32579
        ]
      }
    },
    "freecad_link": {
      "start": {
        "name": "start",
        "kind": "function",
        "description": "Starts the FreeCAD application and establishes a TCP connection for remote procedure calls.\nAttempts to start FreeCAD if it's not running and connects to its TCP server.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The executable path of FreeCAD.",
            "name": "exe"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Configuration options such as port and host.",
            "name": "options"
          }
        ],
        "async": true,
        "source_filename": "freecad-link.js",
        "source_lineno": 27,
        "source_range": [
          727,
          1994
        ]
      },
      "findServer": {
        "name": "findServer",
        "kind": "function",
        "description": "Attempts to locate the FreeCAD TCP server within the network, respecting the startup timeout.\nChecks if the TCP server is reachable by sending a 'PING' command.",
        "params": [],
        "async": true,
        "source_filename": "freecad-link.js",
        "source_lineno": 75,
        "source_range": [
          2183,
          2508
        ]
      },
      "send": {
        "name": "send",
        "kind": "function",
        "description": "Sends a message to the FreeCAD TCP server and waits for a response.\nManages the TCP communication by ensuring message integrity and handling timeouts.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The message to send.",
            "name": "message"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Timeout in milliseconds to wait for a response.",
            "name": "timeout"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Buffer",
                "boolean"
              ]
            },
            "description": "- The response from the server or false if the request times out."
          }
        ],
        "async": true,
        "source_filename": "freecad-link.js",
        "source_lineno": 96,
        "source_range": [
          2915,
          4397
        ]
      },
      "inputPraser": {
        "name": "inputPraser",
        "kind": "function",
        "description": "Parses the input from FreeCAD responses to identify errors and data.\nSplits the message by '|' and checks for error or data messages.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The message received from FreeCAD.",
            "name": "message"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "- An array of parsed message components."
          }
        ],
        "source_filename": "freecad-link.js",
        "source_lineno": 156,
        "source_range": [
          4688,
          4959
        ]
      },
      "showMessage": {
        "name": "showMessage",
        "kind": "function",
        "description": "Displays a message from FreeCAD in the JSLAB interface.\nParses and displays messages specifically tagged as 'MSG' from FreeCAD.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The message received from FreeCAD.",
            "name": "message"
          }
        ],
        "source_filename": "freecad-link.js",
        "source_lineno": 174,
        "source_range": [
          5181,
          5368
        ]
      },
      "quit": {
        "name": "quit",
        "kind": "function",
        "description": "Closes the FreeCAD application gracefully.\nSends a quit command and handles the termination of the TCP connection.",
        "params": [],
        "async": true,
        "source_filename": "freecad-link.js",
        "source_lineno": 185,
        "source_range": [
          5511,
          5749
        ]
      },
      "open": {
        "name": "open",
        "kind": "function",
        "description": "Opens a specified file in FreeCAD.\nSends a command to open a file and handles responses to confirm file access.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The path to the file to be opened.",
            "name": "filePath"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Timeout in milliseconds to wait for a response.",
            "name": "timeout"
          }
        ],
        "async": true,
        "source_filename": "freecad-link.js",
        "source_lineno": 201,
        "source_range": [
          6035,
          6426
        ]
      },
      "importFile": {
        "name": "importFile",
        "kind": "function",
        "description": "Imports a file into the current FreeCAD document.\nSends an import command and handles responses to confirm the import operation.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The path of the file to be imported.",
            "name": "filePath"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Timeout in milliseconds to wait for a response.",
            "name": "timeout"
          }
        ],
        "async": true,
        "source_filename": "freecad-link.js",
        "source_lineno": 221,
        "source_range": [
          6731,
          7130
        ]
      },
      "newDocument": {
        "name": "newDocument",
        "kind": "function",
        "description": "Creates a new document in FreeCAD, optionally specifying a filename.\nSends a command to create a new document and handles the document creation response.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Optional filename for the new document.",
            "name": "filename"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Timeout in milliseconds to wait for a response.",
            "name": "timeout"
          }
        ],
        "async": true,
        "source_filename": "freecad-link.js",
        "source_lineno": 241,
        "source_range": [
          7463,
          7967
        ]
      },
      "save": {
        "name": "save",
        "kind": "function",
        "description": "Saves the current document in FreeCAD.\nSends a save command and handles responses to confirm the save operation.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Timeout in milliseconds to wait for a response.",
            "name": "timeout"
          }
        ],
        "async": true,
        "source_filename": "freecad-link.js",
        "source_lineno": 265,
        "source_range": [
          8187,
          8435
        ]
      },
      "saveAs": {
        "name": "saveAs",
        "kind": "function",
        "description": "Saves the current document in FreeCAD under a new filename.\nSends a save as command and handles responses to confirm the operation.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The new file path for the document.",
            "name": "filePath"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Timeout in milliseconds to wait for a response.",
            "name": "timeout"
          }
        ],
        "async": true,
        "source_filename": "freecad-link.js",
        "source_lineno": 281,
        "source_range": [
          8742,
          9016
        ]
      },
      "close": {
        "name": "close",
        "kind": "function",
        "description": "Closes the current document in FreeCAD.\nSends a close command and handles responses to confirm the document closure.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Timeout in milliseconds to wait for a response.",
            "name": "timeout"
          }
        ],
        "async": true,
        "source_filename": "freecad-link.js",
        "source_lineno": 296,
        "source_range": [
          9240,
          9490
        ]
      },
      "evaluate": {
        "name": "evaluate",
        "kind": "function",
        "description": "Executes a command in FreeCAD and returns the evaluation result.\nSends an evaluate command with the specified command string.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The command to be evaluated in FreeCAD.",
            "name": "command"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Timeout in milliseconds to wait for a response.",
            "name": "timeout"
          }
        ],
        "async": true,
        "source_filename": "freecad-link.js",
        "source_lineno": 312,
        "source_range": [
          9794,
          10062
        ]
      },
      "callScript": {
        "name": "callScript",
        "kind": "function",
        "description": "Runs a script in FreeCAD with optional parameters.\nSends a script command along with parameters and handles the script execution response.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The script to run.",
            "name": "script"
          },
          {
            "type": {
              "names": [
                "string",
                "array"
              ]
            },
            "description": "Parameters to pass to the script.",
            "name": "param"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Timeout in milliseconds to wait for a response.",
            "name": "timeout"
          }
        ],
        "async": true,
        "source_filename": "freecad-link.js",
        "source_lineno": 329,
        "source_range": [
          10426,
          10953
        ]
      },
      "getArea": {
        "name": "getArea",
        "kind": "function",
        "description": "Retrieves the area of the selected object in FreeCAD.\nSends a measure area command and parses the response to extract the area value.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Timeout in milliseconds to wait for a response.",
            "name": "timeout"
          }
        ],
        "async": true,
        "source_filename": "freecad-link.js",
        "source_lineno": 352,
        "source_range": [
          11194,
          11570
        ]
      },
      "getVolume": {
        "name": "getVolume",
        "kind": "function",
        "description": "Retrieves the volume of the selected object in FreeCAD.\nSends a measure volume command and parses the response to extract the volume value.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Timeout in milliseconds to wait for a response.",
            "name": "timeout"
          }
        ],
        "async": true,
        "source_filename": "freecad-link.js",
        "source_lineno": 372,
        "source_range": [
          11817,
          12196
        ]
      }
    },
    "om_link": {
      "start": {
        "name": "start",
        "kind": "function",
        "description": "Starts the interaction with an external executable by initializing the necessary environment and parameters.\nLaunches the executable with the appropriate command-line arguments for interaction via ZMQ.\nWaits for a port file to be created to establish the ZMQ communication.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Path to the executable to be run, defaults to the OpenModelica compiler if not provided.",
            "name": "exe"
          }
        ],
        "async": true,
        "source_filename": "om-link.js",
        "source_lineno": 34,
        "source_range": [
          1055,
          3230
        ]
      },
      "sendExpression": {
        "name": "sendExpression",
        "kind": "function",
        "description": "Sends an expression to be evaluated by the external executable through the ZMQ connection and waits for the result.\nParses the response using a dedicated expression parser.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The expression to be evaluated.",
            "name": "expr"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<any>"
              ]
            },
            "description": "- A promise that resolves with the parsed result of the expression evaluation."
          }
        ],
        "async": true,
        "source_filename": "om-link.js",
        "source_lineno": 116,
        "source_range": [
          3672,
          3981
        ]
      },
      "ModelicaSystem": {
        "name": "ModelicaSystem",
        "kind": "function",
        "description": "Initializes and configures a Modelica system with the specified parameters and libraries.\nLoads necessary files and prepares the environment for simulation.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The path to the Modelica file.",
            "name": "filename"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The name of the Modelica model.",
            "name": "modelname"
          },
          {
            "type": {
              "names": [
                "Array.<string>"
              ]
            },
            "optional": true,
            "defaultvalue": "[]",
            "description": "An array of library paths to load.",
            "name": "libraries"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "defaultvalue": "''",
            "description": "Additional command-line options for the simulation.",
            "name": "command_line_options"
          }
        ],
        "async": true,
        "source_filename": "om-link.js",
        "source_lineno": 135,
        "source_range": [
          4470,
          5960
        ]
      },
      "BuildModelicaModel": {
        "name": "BuildModelicaModel",
        "kind": "function",
        "description": "Builds the Modelica model by sending the appropriate build command and parsing the resulting XML file.",
        "params": [],
        "async": true,
        "source_filename": "om-link.js",
        "source_lineno": 180,
        "source_range": [
          6086,
          6474
        ]
      },
      "getWorkDirectory": {
        "name": "getWorkDirectory",
        "kind": "function",
        "description": "Retrieves the working directory used for temporary files and simulations.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "- The path to the working directory."
          }
        ],
        "source_filename": "om-link.js",
        "source_lineno": 196,
        "source_range": [
          6631,
          6685
        ]
      },
      "xmlparse": {
        "name": "xmlparse",
        "kind": "function",
        "description": "Parses the XML file generated by the Modelica compiler to extract simulation parameters and variables.",
        "params": [],
        "source_filename": "om-link.js",
        "source_lineno": 203,
        "source_range": [
          6809,
          8313
        ]
      },
      "processVariable": {
        "name": "processVariable",
        "kind": "function",
        "description": "Processes a scalar variable from the XML file and categorizes it based on its properties.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The scalar variable to process.",
            "name": "scalar"
          }
        ],
        "source_filename": "om-link.js",
        "source_lineno": 246,
        "source_range": [
          8488,
          9458
        ]
      },
      "getQuantities": {
        "name": "getQuantities",
        "kind": "function",
        "description": "Retrieves a list of quantities based on the provided arguments.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<string>"
              ]
            },
            "optional": true,
            "description": "An array of quantity names to retrieve. If omitted, returns all quantities.",
            "name": "args"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<Object>"
              ]
            },
            "description": "- An array of quantity objects."
          }
        ],
        "source_filename": "om-link.js",
        "source_lineno": 283,
        "source_range": [
          9710,
          10123
        ]
      },
      "getLinearQuantities": {
        "name": "getLinearQuantities",
        "kind": "function",
        "description": "Retrieves a list of linearized quantities based on the provided arguments.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<string>"
              ]
            },
            "optional": true,
            "description": "An array of linear quantity names to retrieve. If omitted, returns all linear quantities.",
            "name": "args"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<Object>"
              ]
            },
            "description": "- An array of linear quantity objects."
          }
        ],
        "source_filename": "om-link.js",
        "source_lineno": 304,
        "source_range": [
          10407,
          10846
        ]
      },
      "getParameters": {
        "name": "getParameters",
        "kind": "function",
        "description": "Retrieves simulation parameters based on the provided arguments.",
        "params": [
          {
            "type": {
              "names": [
                "string",
                "Array.<string>"
              ]
            },
            "optional": true,
            "description": "A single parameter name or an array of parameter names to retrieve. If omitted, returns all parameters.",
            "name": "args"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object",
                "any"
              ]
            },
            "description": "- An object containing the requested parameters or a single parameter value."
          }
        ],
        "source_filename": "om-link.js",
        "source_lineno": 325,
        "source_range": [
          11181,
          11552
        ]
      },
      "getInputs": {
        "name": "getInputs",
        "kind": "function",
        "description": "Retrieves input variables based on the provided arguments.",
        "params": [
          {
            "type": {
              "names": [
                "string",
                "Array.<string>"
              ]
            },
            "optional": true,
            "description": "A single input name or an array of input names to retrieve. If omitted, returns all inputs.",
            "name": "args"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object",
                "any"
              ]
            },
            "description": "- An object containing the requested inputs or a single input value."
          }
        ],
        "source_filename": "om-link.js",
        "source_lineno": 346,
        "source_range": [
          11861,
          12219
        ]
      },
      "getOutputs": {
        "name": "getOutputs",
        "kind": "function",
        "description": "Retrieves output variables based on the provided arguments.",
        "params": [
          {
            "type": {
              "names": [
                "string",
                "Array.<string>"
              ]
            },
            "optional": true,
            "description": "A single output name or an array of output names to retrieve. If omitted, returns all outputs.",
            "name": "args"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object",
                "any"
              ]
            },
            "description": "- An object containing the requested outputs or a single output value."
          }
        ],
        "source_filename": "om-link.js",
        "source_lineno": 367,
        "source_range": [
          12534,
          12899
        ]
      },
      "getContinuous": {
        "name": "getContinuous",
        "kind": "function",
        "description": "Retrieves continuous variables based on the provided arguments.",
        "params": [
          {
            "type": {
              "names": [
                "string",
                "Array.<string>"
              ]
            },
            "optional": true,
            "description": "A single continuous variable name or an array of names to retrieve. If omitted, returns all continuous variables.",
            "name": "args"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object",
                "any"
              ]
            },
            "description": "- An object containing the requested continuous variables or a single value."
          }
        ],
        "source_filename": "om-link.js",
        "source_lineno": 388,
        "source_range": [
          13243,
          13632
        ]
      },
      "getSimulationOptions": {
        "name": "getSimulationOptions",
        "kind": "function",
        "description": "Retrieves simulation options based on the provided arguments.",
        "params": [
          {
            "type": {
              "names": [
                "string",
                "Array.<string>"
              ]
            },
            "optional": true,
            "description": "A single simulation option name or an array of names to retrieve. If omitted, returns all simulation options.",
            "name": "args"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object",
                "any"
              ]
            },
            "description": "- An object containing the requested simulation options or a single option value."
          }
        ],
        "source_filename": "om-link.js",
        "source_lineno": 409,
        "source_range": [
          13975,
          14380
        ]
      },
      "getLinearizationOptions": {
        "name": "getLinearizationOptions",
        "kind": "function",
        "description": "Retrieves linearization options based on the provided arguments.",
        "params": [
          {
            "type": {
              "names": [
                "string",
                "Array.<string>"
              ]
            },
            "optional": true,
            "description": "A single linearization option name or an array of names to retrieve. If omitted, returns all linearization options.",
            "name": "args"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object",
                "any"
              ]
            },
            "description": "- An object containing the requested linearization options or a single option value."
          }
        ],
        "source_filename": "om-link.js",
        "source_lineno": 430,
        "source_range": [
          14735,
          15131
        ]
      },
      "setParameters": {
        "name": "setParameters",
        "kind": "function",
        "description": "Sets simulation parameters based on the provided arguments.",
        "params": [
          {
            "type": {
              "names": [
                "string",
                "Array.<string>"
              ]
            },
            "description": "A single parameter assignment (e.g., \"param=5\") or an array of assignments.",
            "name": "args"
          }
        ],
        "source_filename": "om-link.js",
        "source_lineno": 450,
        "source_range": [
          15327,
          15823
        ]
      },
      "setSimulationOptions": {
        "name": "setSimulationOptions",
        "kind": "function",
        "description": "Sets simulation options based on the provided arguments.",
        "params": [
          {
            "type": {
              "names": [
                "string",
                "Array.<string>"
              ]
            },
            "description": "A single simulation option assignment (e.g., \"stepSize=0.01\") or an array of assignments.",
            "name": "args"
          }
        ],
        "source_filename": "om-link.js",
        "source_lineno": 472,
        "source_range": [
          16030,
          16546
        ]
      },
      "setLinearizationOptions": {
        "name": "setLinearizationOptions",
        "kind": "function",
        "description": "Sets linearization options based on the provided arguments.",
        "params": [
          {
            "type": {
              "names": [
                "string",
                "Array.<string>"
              ]
            },
            "description": "A single linearization option assignment or an array of assignments.",
            "name": "args"
          }
        ],
        "source_filename": "om-link.js",
        "source_lineno": 494,
        "source_range": [
          16735,
          17203
        ]
      },
      "setInputs": {
        "name": "setInputs",
        "kind": "function",
        "description": "Sets input variables based on the provided arguments.",
        "params": [
          {
            "type": {
              "names": [
                "string",
                "Array.<string>"
              ]
            },
            "description": "A single input assignment (e.g., \"input1=10\") or an array of assignments.",
            "name": "args"
          }
        ],
        "source_filename": "om-link.js",
        "source_lineno": 515,
        "source_range": [
          17391,
          17857
        ]
      },
      "createcsvData": {
        "name": "createcsvData",
        "kind": "function",
        "description": "Creates a CSV file containing input data for the simulation.",
        "params": [],
        "source_filename": "om-link.js",
        "source_lineno": 536,
        "source_range": [
          17941,
          19616
        ]
      },
      "simulate": {
        "name": "simulate",
        "kind": "function",
        "description": "Runs the simulation with optional result file and simulation flags.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "defaultvalue": "''",
            "description": "The name of the result file to generate.",
            "name": "resultfile"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "defaultvalue": "''",
            "description": "Additional simulation flags.",
            "name": "sim_flags"
          }
        ],
        "async": true,
        "source_filename": "om-link.js",
        "source_lineno": 602,
        "source_range": [
          19854,
          21322
        ]
      },
      "linearize": {
        "name": "linearize",
        "kind": "function",
        "description": "Performs linearization of the model and retrieves the linear matrices.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<Object>"
              ]
            },
            "description": "- An array containing the A, B, C, and D matrices."
          }
        ],
        "async": true,
        "source_filename": "om-link.js",
        "source_lineno": 643,
        "source_range": [
          21497,
          23680
        ]
      },
      "getLinearMatrix": {
        "name": "getLinearMatrix",
        "kind": "function",
        "description": "Retrieves the linear A, B, C, and D matrices.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<Object>"
              ]
            },
            "description": "- An array containing the A, B, C, and D matrices."
          }
        ],
        "source_filename": "om-link.js",
        "source_lineno": 697,
        "source_range": [
          23830,
          24487
        ]
      },
      "getLinearMatrixValues": {
        "name": "getLinearMatrixValues",
        "kind": "function",
        "description": "Converts linear matrix data into a two-dimensional array format.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The linear matrix object to convert.",
            "name": "matrix_name"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<Array.<number>>",
                "number"
              ]
            },
            "description": "- The converted matrix as a 2D array or 0 if empty."
          }
        ],
        "source_filename": "om-link.js",
        "source_lineno": 728,
        "source_range": [
          24733,
          25410
        ]
      },
      "getlinear_inputs": {
        "name": "getlinear_inputs",
        "kind": "function",
        "description": "Retrieves the linear input variables.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "string",
                "boolean"
              ]
            },
            "description": "- The linear input variables or false if the model is not linearized."
          }
        ],
        "source_filename": "om-link.js",
        "source_lineno": 753,
        "source_range": [
          25572,
          25765
        ]
      },
      "getlinear_outputs": {
        "name": "getlinear_outputs",
        "kind": "function",
        "description": "Retrieves the linear output variables.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "string",
                "boolean"
              ]
            },
            "description": "- The linear output variables or false if the model is not linearized."
          }
        ],
        "source_filename": "om-link.js",
        "source_lineno": 766,
        "source_range": [
          25929,
          26125
        ]
      },
      "getlinear_states": {
        "name": "getlinear_states",
        "kind": "function",
        "description": "Retrieves the linear state variables.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "string",
                "boolean"
              ]
            },
            "description": "- The linear state variables or false if the model is not linearized."
          }
        ],
        "source_filename": "om-link.js",
        "source_lineno": 779,
        "source_range": [
          26287,
          26480
        ]
      },
      "getSolutions": {
        "name": "getSolutions",
        "kind": "function",
        "description": "Retrieves simulation solutions based on the provided arguments and result file.",
        "params": [
          {
            "type": {
              "names": [
                "string",
                "Array.<string>"
              ]
            },
            "optional": true,
            "description": "A single variable name or an array of names to retrieve solutions for. If omitted, retrieves all variables.",
            "name": "args"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "defaultvalue": "this.resultfile",
            "description": "The path to the result file.",
            "name": "resultfile"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<any>"
              ]
            },
            "description": "- A promise that resolves with the simulation results or an error message."
          }
        ],
        "async": true,
        "source_filename": "om-link.js",
        "source_lineno": 794,
        "source_range": [
          26915,
          27678
        ]
      },
      "createValidNames": {
        "name": "createValidNames",
        "kind": "function",
        "description": "Creates valid variable names by replacing invalid characters and categorizes them based on the structure name.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The original variable name.",
            "name": "name"
          },
          {
            "type": {
              "names": [
                "any"
              ]
            },
            "description": "The value of the variable.",
            "name": "value"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The structure name (e.g., 'continuous', 'parameter').",
            "name": "structname"
          }
        ],
        "source_filename": "om-link.js",
        "source_lineno": 819,
        "source_range": [
          28009,
          28537
        ]
      },
      "parseExpression": {
        "name": "parseExpression",
        "kind": "function",
        "description": "Parses a given expression string into structured data based on predefined formats.\nHandles various formats including single and nested lists, records, and single elements.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The expression string to parse.",
            "name": "args"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Object",
                "string"
              ]
            },
            "description": "- The parsed data which could be an array, an object, or a string."
          }
        ],
        "source_filename": "om-link.js",
        "source_lineno": 840,
        "source_range": [
          28900,
          30740
        ]
      },
      "close": {
        "name": "close",
        "kind": "function",
        "description": "Closes the current session safely by cleaning up resources such as temporary files and network connections.\nTerminates any active processes and removes temporary port files.",
        "params": [],
        "async": true,
        "source_filename": "om-link.js",
        "source_lineno": 904,
        "source_range": [
          30940,
          31181
        ]
      }
    },
    "tcp_client": {
      "setOnData": {
        "name": "setOnData",
        "kind": "function",
        "description": "Sets the callback function to handle incoming data events.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The function to be called when data is received.",
            "name": "callback"
          }
        ],
        "source_filename": "networking-tcp.js",
        "source_lineno": 96,
        "source_range": [
          2607,
          2787
        ]
      },
      "setOnError": {
        "name": "setOnError",
        "kind": "function",
        "description": "Sets the callback function to handle error events.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The function to be called when an error occurs.",
            "name": "callback"
          }
        ],
        "source_filename": "networking-tcp.js",
        "source_lineno": 108,
        "source_range": [
          2949,
          3071
        ]
      },
      "setKeepAlive": {
        "name": "setKeepAlive",
        "kind": "function",
        "description": "Enables or disables keep-alive functionality on the underlying socket.",
        "params": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "optional": true,
            "defaultvalue": true,
            "description": "Whether to enable keep-alive.",
            "name": "enable"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "Delay in milliseconds before the first keep-alive probe is sent.",
            "name": "initialDelay"
          }
        ],
        "source_filename": "networking-tcp.js",
        "source_lineno": 119,
        "source_range": [
          3343,
          3408
        ]
      },
      "setNoDelay": {
        "name": "setNoDelay",
        "kind": "function",
        "description": "Disables the Nagle algorithm, allowing data to be sent immediately.",
        "params": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "optional": true,
            "defaultvalue": true,
            "description": "Whether to disable the Nagle algorithm.",
            "name": "noDelay"
          }
        ],
        "source_filename": "networking-tcp.js",
        "source_lineno": 127,
        "source_range": [
          3582,
          3643
        ]
      },
      "setTimeout": {
        "name": "setTimeout",
        "kind": "function",
        "description": "Sets the socket timeout for inactivity.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Timeout in milliseconds.",
            "name": "timeout"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "optional": true,
            "description": "Optional callback triggered on timeout.",
            "name": "callback"
          }
        ],
        "source_filename": "networking-tcp.js",
        "source_lineno": 136,
        "source_range": [
          3843,
          3904
        ]
      },
      "read": {
        "name": "read",
        "kind": "function",
        "description": "Reads a specified number of bytes from the buffer.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": "Infinity",
            "description": "The number of bytes to read. Reads all available bytes if not specified.",
            "name": "N"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Buffer"
              ]
            },
            "description": "The data read from the buffer."
          }
        ],
        "source_filename": "networking-tcp.js",
        "source_lineno": 145,
        "source_range": [
          4146,
          4251
        ]
      },
      "write": {
        "name": "write",
        "kind": "function",
        "description": "Writes data to the TCP connection if the client is active.",
        "params": [
          {
            "type": {
              "names": [
                "Buffer",
                "string"
              ]
            },
            "description": "The data to send over the TCP connection.",
            "name": "data"
          }
        ],
        "source_filename": "networking-tcp.js",
        "source_lineno": 154,
        "source_range": [
          4416,
          4493
        ]
      },
      "availableBytes": {
        "name": "availableBytes",
        "kind": "function",
        "description": "Returns the number of bytes available in the buffer.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of available bytes."
          }
        ],
        "source_filename": "networking-tcp.js",
        "source_lineno": 164,
        "source_range": [
          4629,
          4684
        ]
      },
      "close": {
        "name": "close",
        "kind": "function",
        "description": "Closes the TCP connection and cleans up resources.",
        "params": [],
        "source_filename": "networking-tcp.js",
        "source_lineno": 171,
        "source_range": [
          4763,
          4857
        ]
      }
    },
    "tcp_server": {
      "setOnData": {
        "name": "setOnData",
        "kind": "function",
        "description": "Sets the callback function to handle incoming data events.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "Function called when data is received.",
            "name": "callback"
          }
        ],
        "source_filename": "networking-tcp.js",
        "source_lineno": 286,
        "source_range": [
          7777,
          7897
        ]
      },
      "setOnError": {
        "name": "setOnError",
        "kind": "function",
        "description": "Sets the callback function to handle error events.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "Function called when an error occurs.",
            "name": "callback"
          }
        ],
        "source_filename": "networking-tcp.js",
        "source_lineno": 296,
        "source_range": [
          8049,
          8171
        ]
      },
      "setOnDisconnect": {
        "name": "setOnDisconnect",
        "kind": "function",
        "description": "Sets the callback function to handle disconnection events.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "Function called when a socket disconnects.",
            "name": "callback"
          }
        ],
        "source_filename": "networking-tcp.js",
        "source_lineno": 306,
        "source_range": [
          8336,
          8468
        ]
      },
      "write": {
        "name": "write",
        "kind": "function",
        "description": "Writes data to a specific TCP connection.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The socket to write data to.",
            "name": "socket"
          },
          {
            "type": {
              "names": [
                "Buffer",
                "string"
              ]
            },
            "description": "The data to send over the TCP connection.",
            "name": "data"
          }
        ],
        "source_filename": "networking-tcp.js",
        "source_lineno": 317,
        "source_range": [
          8676,
          8805
        ]
      },
      "close": {
        "name": "close",
        "kind": "function",
        "description": "Closes the TCP server and all active connections.",
        "params": [],
        "source_filename": "networking-tcp.js",
        "source_lineno": 326,
        "source_range": [
          8883,
          9086
        ]
      }
    },
    "udp_client": {
      "write": {
        "name": "write",
        "kind": "function",
        "description": "Sends data over the UDP connection if the client is active.",
        "params": [
          {
            "type": {
              "names": [
                "Buffer",
                "string"
              ]
            },
            "description": "The data to send over the UDP connection.",
            "name": "data"
          }
        ],
        "source_filename": "networking-udp.js",
        "source_lineno": 56,
        "source_range": [
          1407,
          1480
        ]
      },
      "close": {
        "name": "close",
        "kind": "function",
        "description": "Closes the UDP connection and cleans up resources.",
        "params": [],
        "source_filename": "networking-udp.js",
        "source_lineno": 65,
        "source_range": [
          1554,
          1674
        ]
      }
    },
    "udp_server": {
      "setOnData": {
        "name": "setOnData",
        "kind": "function",
        "description": "Sets the callback function to handle incoming data events.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The function to be called when data is received.",
            "name": "callback"
          }
        ],
        "source_filename": "networking-udp.js",
        "source_lineno": 124,
        "source_range": [
          2951,
          3125
        ]
      },
      "read": {
        "name": "read",
        "kind": "function",
        "description": "Reads a specified number of bytes from the buffer.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": "Infinity",
            "description": "The maximum number of bytes to read. Reads all available bytes by default.",
            "name": "N"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "An array containing the first N bytes of buffered data."
          }
        ],
        "source_filename": "networking-udp.js",
        "source_lineno": 137,
        "source_range": [
          3388,
          3490
        ]
      },
      "availableBytes": {
        "name": "availableBytes",
        "kind": "function",
        "description": "Returns the number of bytes available in the buffer.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of bytes currently stored in the buffer."
          }
        ],
        "source_filename": "networking-udp.js",
        "source_lineno": 146,
        "source_range": [
          3641,
          3694
        ]
      },
      "close": {
        "name": "close",
        "kind": "function",
        "description": "Closes the UDP server and releases any resources.",
        "params": [],
        "source_filename": "networking-udp.js",
        "source_lineno": 153,
        "source_range": [
          3767,
          3862
        ]
      }
    },
    "video_call": {
      "setOnMessage": {
        "name": "setOnMessage",
        "kind": "function",
        "description": "Sets a callback function to handle incoming messages.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The function to call when a message is received.",
            "name": "callback"
          }
        ],
        "source_filename": "networking-videocall.js",
        "source_lineno": 309,
        "source_range": [
          8933,
          9045
        ]
      },
      "sendMessage": {
        "name": "sendMessage",
        "kind": "function",
        "description": "Sends a message to the connected peer.",
        "params": [
          {
            "type": {
              "names": [
                "any"
              ]
            },
            "description": "The data to send.",
            "name": "data"
          }
        ],
        "source_filename": "networking-videocall.js",
        "source_lineno": 319,
        "source_range": [
          9156,
          9246
        ]
      },
      "toggleAudio": {
        "name": "toggleAudio",
        "kind": "function",
        "description": "Toggles the local audio track on or off.",
        "params": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "If true, mutes the audio; otherwise, unmutes.",
            "name": "mute"
          }
        ],
        "source_filename": "networking-videocall.js",
        "source_lineno": 327,
        "source_range": [
          9391,
          9536
        ]
      },
      "toggleVideo": {
        "name": "toggleVideo",
        "kind": "function",
        "description": "Toggles the local video track on or off.",
        "params": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "If true, disables the video; otherwise, enables it.",
            "name": "disable"
          }
        ],
        "source_filename": "networking-videocall.js",
        "source_lineno": 337,
        "source_range": [
          9688,
          9839
        ]
      },
      "endCall": {
        "name": "endCall",
        "kind": "function",
        "description": "Ends the call by closing peer connections and media streams.",
        "params": [],
        "source_filename": "networking-videocall.js",
        "source_lineno": 346,
        "source_range": [
          9926,
          10485
        ]
      }
    },
    "mathjs": {
      "isComplex": {
        "name": "isComplex",
        "kind": "function",
        "description": "Test whether a value is a Complex number.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is a Complex number, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 15
      },
      "isBigNumber": {
        "name": "isBigNumber",
        "kind": "function",
        "description": "Test whether a value is a BigNumber.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is a BigNumber, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 24
      },
      "isFraction": {
        "name": "isFraction",
        "kind": "function",
        "description": "Test whether a value is a Fraction.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is a Fraction, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 33
      },
      "isUnit": {
        "name": "isUnit",
        "kind": "function",
        "description": "Test whether a value is a Unit.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is a Unit, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 42
      },
      "isMatrix": {
        "name": "isMatrix",
        "kind": "function",
        "description": "Test whether a value is a Matrix.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is a Matrix, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 51
      },
      "isCollection": {
        "name": "isCollection",
        "kind": "function",
        "description": "Test whether a value is a collection (Array or Matrix).",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is an Array or Matrix, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 60
      },
      "isDenseMatrix": {
        "name": "isDenseMatrix",
        "kind": "function",
        "description": "Test whether a value is a DenseMatrix.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is a DenseMatrix, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 69
      },
      "isSparseMatrix": {
        "name": "isSparseMatrix",
        "kind": "function",
        "description": "Test whether a value is a SparseMatrix.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is a SparseMatrix, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 78
      },
      "isRange": {
        "name": "isRange",
        "kind": "function",
        "description": "Test whether a value is a Range.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is a Range, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 87
      },
      "isIndex": {
        "name": "isIndex",
        "kind": "function",
        "description": "Test whether a value is an Index.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is an Index, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 96
      },
      "isBoolean": {
        "name": "isBoolean",
        "kind": "function",
        "description": "Test whether a value is a boolean.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is a boolean, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 105
      },
      "isResultSet": {
        "name": "isResultSet",
        "kind": "function",
        "description": "Test whether a value is a ResultSet.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is a ResultSet, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 114
      },
      "isHelp": {
        "name": "isHelp",
        "kind": "function",
        "description": "Test whether a value is a Help object.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is a Help object, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 123
      },
      "isDate": {
        "name": "isDate",
        "kind": "function",
        "description": "Test whether a value is a Date.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is a Date object, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 132
      },
      "isRegExp": {
        "name": "isRegExp",
        "kind": "function",
        "description": "Test whether a value is a RegExp.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is a RegExp object, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 141
      },
      "isAccessorNode": {
        "name": "isAccessorNode",
        "kind": "function",
        "description": "Test whether a value is an AccessorNode.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is an AccessorNode, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 150
      },
      "isArrayNode": {
        "name": "isArrayNode",
        "kind": "function",
        "description": "Test whether a value is an ArrayNode.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is an ArrayNode, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 159
      },
      "isAssignmentNode": {
        "name": "isAssignmentNode",
        "kind": "function",
        "description": "Test whether a value is an AssignmentNode.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is an AssignmentNode, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 168
      },
      "isBlockNode": {
        "name": "isBlockNode",
        "kind": "function",
        "description": "Test whether a value is a BlockNode.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is a BlockNode, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 177
      },
      "isConditionalNode": {
        "name": "isConditionalNode",
        "kind": "function",
        "description": "Test whether a value is a ConditionalNode.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is a ConditionalNode, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 186
      },
      "isConstantNode": {
        "name": "isConstantNode",
        "kind": "function",
        "description": "Test whether a value is a ConstantNode.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is a ConstantNode, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 195
      },
      "isFunctionAssignmentNode": {
        "name": "isFunctionAssignmentNode",
        "kind": "function",
        "description": "Test whether a value is a FunctionAssignmentNode.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is a FunctionAssignmentNode, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 204
      },
      "isFunctionNode": {
        "name": "isFunctionNode",
        "kind": "function",
        "description": "Test whether a value is a FunctionNode.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is a FunctionNode, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 213
      },
      "isIndexNode": {
        "name": "isIndexNode",
        "kind": "function",
        "description": "Test whether a value is an IndexNode.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is an IndexNode, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 222
      },
      "isNode": {
        "name": "isNode",
        "kind": "function",
        "description": "Test whether a value is a Node.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is a Node, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 231
      },
      "isObjectNode": {
        "name": "isObjectNode",
        "kind": "function",
        "description": "Test whether a value is an ObjectNode.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is an ObjectNode, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 240
      },
      "isOperatorNode": {
        "name": "isOperatorNode",
        "kind": "function",
        "description": "Test whether a value is an OperatorNode.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is an OperatorNode, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 249
      },
      "isParenthesisNode": {
        "name": "isParenthesisNode",
        "kind": "function",
        "description": "Test whether a value is a ParenthesisNode.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is a ParenthesisNode, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 258
      },
      "isRangeNode": {
        "name": "isRangeNode",
        "kind": "function",
        "description": "Test whether a value is a RangeNode.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is a RangeNode, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 267
      },
      "isRelationalNode": {
        "name": "isRelationalNode",
        "kind": "function",
        "description": "Test whether a value is a RelationalNode.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is a RelationalNode, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 276
      },
      "isSymbolNode": {
        "name": "isSymbolNode",
        "kind": "function",
        "description": "Test whether a value is a SymbolNode.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is a SymbolNode, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 285
      },
      "isChain": {
        "name": "isChain",
        "kind": "function",
        "description": "Test whether a value is a Chain.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if `x` is a Chain, false otherwise."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 294
      },
      "on": {
        "name": "on",
        "kind": "function",
        "description": "Subscribe to an event.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The event name to subscribe to.",
            "name": "event"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The callback function to execute when the event occurs.",
            "name": "callback"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "void"
              ]
            }
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 303
      },
      "off": {
        "name": "off",
        "kind": "function",
        "description": "Unsubscribe from an event.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The event name to unsubscribe from.",
            "name": "event"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "optional": true,
            "description": "The callback function to remove.",
            "name": "callback"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "void"
              ]
            }
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 313
      },
      "once": {
        "name": "once",
        "kind": "function",
        "description": "Subscribe to an event once.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The event name to subscribe to.",
            "name": "event"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The callback function to execute when the event occurs.",
            "name": "callback"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "void"
              ]
            }
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 323
      },
      "emit": {
        "name": "emit",
        "kind": "function",
        "description": "Emit an event, triggering all bound callbacks.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The event name to emit.",
            "name": "event"
          },
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "optional": true,
            "description": "The data to pass to the event handlers.",
            "name": "data"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "void"
              ]
            }
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 333
      },
      "expression": {
        "name": "expression",
        "kind": "member",
        "description": "An object containing functions for parsing and evaluating expressions.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 343
      },
      "import": {
        "name": "import",
        "kind": "function",
        "description": "Import functions or constants into math.js.",
        "params": [
          {
            "type": {
              "names": [
                "Object",
                "Array"
              ]
            },
            "description": "An object or array of objects with functions or constants to import.",
            "name": "object"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "description": "Optional import options.",
            "name": "options"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "void"
              ]
            }
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 350
      },
      "create": {
        "name": "create",
        "kind": "function",
        "description": "Create a new, isolated math.js instance.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "description": "Optional configuration options.",
            "name": "config"
          },
          {
            "type": {
              "names": [
                "Array.<function()>"
              ]
            },
            "optional": true,
            "description": "Optional list of factories to include.",
            "name": "factories"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATHJS_DOC"
              ]
            },
            "description": "Returns a new instance of math.js."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 360
      },
      "factory": {
        "name": "factory",
        "kind": "function",
        "description": "Factory function to create new functions.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The name of the function.",
            "name": "name"
          },
          {
            "type": {
              "names": [
                "Array.<string>"
              ]
            },
            "description": "Array of dependency names.",
            "name": "dependencies"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "Function to create the new function.",
            "name": "create"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "Returns the created function."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 370
      },
      "abs": {
        "name": "abs",
        "kind": "function",
        "description": "Calculate the absolute value of a number.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "A number or array with numbers.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Returns the absolute value of `x`."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 381
      },
      "AccessorNode": {
        "name": "AccessorNode",
        "kind": "function",
        "description": "A node representing access to a property or index.",
        "params": [
          {
            "type": {
              "names": [
                "Node"
              ]
            },
            "description": "The object being accessed.",
            "name": "object"
          },
          {
            "type": {
              "names": [
                "IndexNode"
              ]
            },
            "description": "The index used to access the object.",
            "name": "index"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "AccessorNode"
              ]
            },
            "description": "Returns a new AccessorNode."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 390
      },
      "acos": {
        "name": "acos",
        "kind": "function",
        "description": "Calculate the inverse cosine of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Function input.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The arc cosine of `x`."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 400
      },
      "acosh": {
        "name": "acosh",
        "kind": "function",
        "description": "Calculate the inverse hyperbolic cosine of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Function input.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The inverse hyperbolic cosine of `x`."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 409
      },
      "acot": {
        "name": "acot",
        "kind": "function",
        "description": "Calculate the inverse cotangent of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Function input.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The inverse cotangent of `x`."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 418
      },
      "acoth": {
        "name": "acoth",
        "kind": "function",
        "description": "Calculate the inverse hyperbolic cotangent of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Function input.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The inverse hyperbolic cotangent of `x`."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 427
      },
      "acsc": {
        "name": "acsc",
        "kind": "function",
        "description": "Calculate the inverse cosecant of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Function input.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The inverse cosecant of `x`."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 436
      },
      "acsch": {
        "name": "acsch",
        "kind": "function",
        "description": "Calculate the inverse hyperbolic cosecant of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Function input.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The inverse hyperbolic cosecant of `x`."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 445
      },
      "addScalar": {
        "name": "addScalar",
        "kind": "function",
        "description": "Add two scalar values, `x + y`.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Fraction",
                "Complex"
              ]
            },
            "description": "First value to add.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Fraction",
                "Complex"
              ]
            },
            "description": "Second value to add.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Fraction",
                "Complex"
              ]
            },
            "description": "Sum of `x` and `y`."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 454
      },
      "and": {
        "name": "and",
        "kind": "function",
        "description": "Logical AND. Returns true if both inputs are true.",
        "params": [
          {
            "type": {
              "names": [
                "boolean",
                "Array",
                "Matrix"
              ]
            },
            "description": "First input.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "boolean",
                "Array",
                "Matrix"
              ]
            },
            "description": "Second input.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean",
                "Array",
                "Matrix"
              ]
            },
            "description": "Returns true when both `x` and `y` are true."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 464
      },
      "apply": {
        "name": "apply",
        "kind": "function",
        "description": "Apply a function to each entry in a matrix or array.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The input array or matrix.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The dimension along which to apply the function.",
            "name": "dim"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The function to apply.",
            "name": "callback"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The result of applying the function along the specified dimension."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 474
      },
      "arg": {
        "name": "arg",
        "kind": "function",
        "description": "Calculate the argument of a complex number.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Function input.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Array",
                "Matrix"
              ]
            },
            "description": "The argument of `x`."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 485
      },
      "ArrayNode": {
        "name": "ArrayNode",
        "kind": "function",
        "description": "An array node representing an array in the expression tree.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<Node>"
              ]
            },
            "description": "An array of nodes.",
            "name": "items"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "ArrayNode"
              ]
            },
            "description": "Returns a new ArrayNode."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 494
      },
      "asec": {
        "name": "asec",
        "kind": "function",
        "description": "Calculate the inverse secant of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Function input.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The inverse secant of `x`."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 503
      },
      "asech": {
        "name": "asech",
        "kind": "function",
        "description": "Calculate the inverse hyperbolic secant of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Function input.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The inverse hyperbolic secant of `x`."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 512
      },
      "asin": {
        "name": "asin",
        "kind": "function",
        "description": "Calculate the inverse sine of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Function input.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The inverse sine of `x`."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 521
      },
      "asinh": {
        "name": "asinh",
        "kind": "function",
        "description": "Calculate the inverse hyperbolic sine of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Function input.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The inverse hyperbolic sine of `x`."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 530
      },
      "AssignmentNode": {
        "name": "AssignmentNode",
        "kind": "function",
        "description": "An assignment node representing variable assignment.",
        "params": [
          {
            "type": {
              "names": [
                "Node"
              ]
            },
            "description": "The symbol or AccessorNode to assign to.",
            "name": "object"
          },
          {
            "type": {
              "names": [
                "Node"
              ]
            },
            "description": "The value to assign.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "AssignmentNode"
              ]
            },
            "description": "Returns a new AssignmentNode."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 539
      },
      "atan": {
        "name": "atan",
        "kind": "function",
        "description": "Calculate the inverse tangent of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Function input.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The inverse tangent of `x`."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 549
      },
      "atan2": {
        "name": "atan2",
        "kind": "function",
        "description": "Calculate the inverse tangent of `y/x`.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "Dividend.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "Divisor.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "The inverse tangent of `y/x`."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 558
      },
      "atanh": {
        "name": "atanh",
        "kind": "function",
        "description": "Calculate the inverse hyperbolic tangent of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Function input.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The inverse hyperbolic tangent of `x`."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 568
      },
      "atomicMass": {
        "name": "atomicMass",
        "kind": "member",
        "description": "Atomic mass constant, expressed in kg.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 577
      },
      "avogadro": {
        "name": "avogadro",
        "kind": "member",
        "description": "Avogadro's number, approximately `6.022e23` mol<sup>-1</sup>.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 585
      },
      "bellNumbers": {
        "name": "bellNumbers",
        "kind": "function",
        "description": "Compute the Bell Numbers, `B(n)`.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The input value.",
            "name": "n"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Returns the nth Bell number."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 593
      },
      "BigNumber": {
        "name": "BigNumber",
        "kind": "function",
        "description": "BigNumber constructor.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "string",
                "BigNumber"
              ]
            },
            "description": "The numeric value.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "BigNumber"
              ]
            },
            "description": "Returns a new BigNumber instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 602
      },
      "bignumber": {
        "name": "bignumber",
        "kind": "function",
        "description": "Create a BigNumber with arbitrary precision.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "string",
                "BigNumber"
              ]
            },
            "description": "The numeric value.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "BigNumber"
              ]
            },
            "description": "Returns a BigNumber instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 611
      },
      "bin": {
        "name": "bin",
        "kind": "function",
        "description": "Format a number as binary.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "The number to format.",
            "name": "n"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The binary representation of `n`."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 620
      },
      "bitAnd": {
        "name": "bitAnd",
        "kind": "function",
        "description": "Bitwise AND operation.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "First value.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "Second value.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "Result of `x AND y`."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 629
      },
      "bitNot": {
        "name": "bitNot",
        "kind": "function",
        "description": "Bitwise NOT operation.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "Input value.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "Result of `NOT x`."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 639
      },
      "bitOr": {
        "name": "bitOr",
        "kind": "function",
        "description": "Bitwise OR operation.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "First value.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "Second value.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "Result of `x OR y`."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 648
      },
      "bitXor": {
        "name": "bitXor",
        "kind": "function",
        "description": "Bitwise XOR operation.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "First value.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "Second value.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "Result of `x XOR y`."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 658
      },
      "BlockNode": {
        "name": "BlockNode",
        "kind": "function",
        "description": "A node representing a block of statements.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<Object>"
              ]
            },
            "description": "An array of statements.",
            "name": "blocks"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "BlockNode"
              ]
            },
            "description": "Returns a new BlockNode."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 668
      },
      "bohrMagneton": {
        "name": "bohrMagneton",
        "kind": "member",
        "description": "The Bohr magneton in units of `J/T`.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 677
      },
      "bohrRadius": {
        "name": "bohrRadius",
        "kind": "member",
        "description": "The Bohr radius in meters.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 685
      },
      "boltzmann": {
        "name": "boltzmann",
        "kind": "member",
        "description": "The Boltzmann constant in `J/K`.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 693
      },
      "boolean": {
        "name": "boolean",
        "kind": "function",
        "description": "Parse a value into a boolean.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to parse.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "The parsed boolean value."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 701
      },
      "catalan": {
        "name": "catalan",
        "kind": "member",
        "description": "The Catalan's constant.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 710
      },
      "cbrt": {
        "name": "cbrt",
        "kind": "function",
        "description": "Calculate the cube root of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Function input.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The cube root of `x`."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 718
      },
      "ceil": {
        "name": "ceil",
        "kind": "function",
        "description": "Round a value towards plus infinity.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "Input value.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "The rounded value."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 727
      },
      "chain": {
        "name": "chain",
        "kind": "function",
        "description": "Create a chained operation, allowing to chain methods.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The initial value of the chain.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Chain"
              ]
            },
            "description": "A chain object."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 736
      },
      "Chain": {
        "name": "Chain",
        "kind": "function",
        "description": "Chain constructor.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The initial value.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Chain"
              ]
            },
            "description": "Returns a new Chain instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 745
      },
      "classicalElectronRadius": {
        "name": "classicalElectronRadius",
        "kind": "member",
        "description": "Classical electron radius in meters.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 754
      },
      "combinations": {
        "name": "combinations",
        "kind": "function",
        "description": "Calculate the number of combinations of n items taken k at a time.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "Total number of items.",
            "name": "n"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "Number of items to choose.",
            "name": "k"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "Number of possible combinations."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 762
      },
      "combinationsWithRep": {
        "name": "combinationsWithRep",
        "kind": "function",
        "description": "Calculate the number of combinations with replacement of n items taken k at a time.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "Total number of items.",
            "name": "n"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "Number of items to choose.",
            "name": "k"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "Number of possible combinations with replacement."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 772
      },
      "compare": {
        "name": "compare",
        "kind": "function",
        "description": "Compare two values numerically.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Fraction",
                "Complex",
                "Unit",
                "string",
                "Array",
                "Matrix"
              ]
            },
            "description": "First value to compare.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Fraction",
                "Complex",
                "Unit",
                "string",
                "Array",
                "Matrix"
              ]
            },
            "description": "Second value to compare.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Fraction",
                "Complex",
                "Unit",
                "string",
                "Array",
                "Matrix"
              ]
            },
            "description": "Returns 1 when x > y, -1 when x < y, and 0 when x == y."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 782
      },
      "compareNatural": {
        "name": "compareNatural",
        "kind": "function",
        "description": "Compare two strings using natural order.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "First string to compare.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Second string to compare.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Returns 1 when x > y, -1 when x < y, and 0 when x == y."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 792
      },
      "compareText": {
        "name": "compareText",
        "kind": "function",
        "description": "Compare two strings lexicographically.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "First string to compare.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Second string to compare.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Returns 1 when x > y, -1 when x < y, and 0 when x == y."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 802
      },
      "compile": {
        "name": "compile",
        "kind": "function",
        "description": "Compile an expression into a compiled function for faster evaluation.",
        "params": [
          {
            "type": {
              "names": [
                "string",
                "Object"
              ]
            },
            "description": "The expression to compile.",
            "name": "expr"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "A compiled expression that can be evaluated with `eval`."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 812
      },
      "complex": {
        "name": "complex",
        "kind": "function",
        "description": "Create a complex number.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "string",
                "Complex"
              ]
            },
            "optional": true,
            "description": "Real part or a string representation.",
            "name": "re"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "description": "Imaginary part.",
            "name": "im"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Complex"
              ]
            },
            "description": "Returns a Complex number."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 821
      },
      "Complex": {
        "name": "Complex",
        "kind": "function",
        "description": "Complex number constructor.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "string",
                "Complex"
              ]
            },
            "optional": true,
            "description": "Real part or a string representation.",
            "name": "re"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "description": "Imaginary part.",
            "name": "im"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Complex"
              ]
            },
            "description": "A new Complex number."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 831
      },
      "composition": {
        "name": "composition",
        "kind": "function",
        "description": "Calculate the composition count of n into k parts.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "Total number of items.",
            "name": "n"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "Number of parts.",
            "name": "k"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "Number of compositions."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 841
      },
      "concat": {
        "name": "concat",
        "kind": "function",
        "description": "Concatenate matrices or arrays along a specified dimension.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "First array or matrix.",
            "name": "a"
          },
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Other arrays or matrices.",
            "name": "b"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "Dimension along which to concatenate.",
            "name": "dim"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Concatenated array or matrix."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 851
      },
      "ConditionalNode": {
        "name": "ConditionalNode",
        "kind": "function",
        "description": "A node representing a conditional expression.",
        "params": [
          {
            "type": {
              "names": [
                "Node"
              ]
            },
            "description": "The condition expression.",
            "name": "condition"
          },
          {
            "type": {
              "names": [
                "Node"
              ]
            },
            "description": "Expression to evaluate when condition is true.",
            "name": "trueExpr"
          },
          {
            "type": {
              "names": [
                "Node"
              ]
            },
            "description": "Expression to evaluate when condition is false.",
            "name": "falseExpr"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "ConditionalNode"
              ]
            },
            "description": "A new ConditionalNode instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 862
      },
      "conductanceQuantum": {
        "name": "conductanceQuantum",
        "kind": "member",
        "description": "Conductance quantum in Siemens.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 873
      },
      "conj": {
        "name": "conj",
        "kind": "function",
        "description": "Compute the complex conjugate of a complex number.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Input value.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The complex conjugate of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 881
      },
      "ConstantNode": {
        "name": "ConstantNode",
        "kind": "function",
        "description": "A node representing a constant value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "string",
                "BigNumber",
                "Fraction"
              ]
            },
            "description": "The constant value.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "ConstantNode"
              ]
            },
            "description": "A new ConstantNode instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 890
      },
      "cos": {
        "name": "cos",
        "kind": "function",
        "description": "Calculate the cosine of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Unit",
                "Array",
                "Matrix"
              ]
            },
            "description": "Function input.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The cosine of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 899
      },
      "cosh": {
        "name": "cosh",
        "kind": "function",
        "description": "Calculate the hyperbolic cosine of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Function input.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The hyperbolic cosine of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 908
      },
      "cot": {
        "name": "cot",
        "kind": "function",
        "description": "Calculate the cotangent of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Unit",
                "Array",
                "Matrix"
              ]
            },
            "description": "Function input.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The cotangent of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 917
      },
      "coth": {
        "name": "coth",
        "kind": "function",
        "description": "Calculate the hyperbolic cotangent of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Function input.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The hyperbolic cotangent of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 926
      },
      "coulomb": {
        "name": "coulomb",
        "kind": "member",
        "description": "Coulomb's constant in Nm^2/C^2.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 935
      },
      "count": {
        "name": "count",
        "kind": "function",
        "description": "Count the number of elements in a matrix or array.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The input array or matrix.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of elements."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 943
      },
      "createUnit": {
        "name": "createUnit",
        "kind": "function",
        "description": "Create a user-defined unit and register it with the Unit system.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The name of the new unit.",
            "name": "name"
          },
          {
            "type": {
              "names": [
                "string",
                "Object"
              ]
            },
            "description": "Definition of the unit.",
            "name": "definition"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "description": "Configuration options.",
            "name": "options"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Unit"
              ]
            },
            "description": "The created unit."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 952
      },
      "csc": {
        "name": "csc",
        "kind": "function",
        "description": "Calculate the cosecant of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Unit",
                "Array",
                "Matrix"
              ]
            },
            "description": "Function input.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The cosecant of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 963
      },
      "csch": {
        "name": "csch",
        "kind": "function",
        "description": "Calculate the hyperbolic cosecant of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Function input.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The hyperbolic cosecant of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 972
      },
      "ctranspose": {
        "name": "ctranspose",
        "kind": "function",
        "description": "Compute the conjugate transpose of a matrix.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The matrix to transpose.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The conjugate transpose of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 981
      },
      "cube": {
        "name": "cube",
        "kind": "function",
        "description": "Compute the cube of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Unit",
                "Array",
                "Matrix"
              ]
            },
            "description": "Input value.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Unit",
                "Array",
                "Matrix"
              ]
            },
            "description": "The cube of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 990
      },
      "cumsum": {
        "name": "cumsum",
        "kind": "function",
        "description": "Compute the cumulative sum of a matrix or array.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The input array or matrix.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "optional": true,
            "description": "Dimension along which to calculate.",
            "name": "dim"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The cumulative sum."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 999
      },
      "deepEqual": {
        "name": "deepEqual",
        "kind": "function",
        "description": "Test element-wise whether two values are equal.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "First value to compare.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "Second value to compare.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if x and y are deep equal."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1009
      },
      "DenseMatrix": {
        "name": "DenseMatrix",
        "kind": "function",
        "description": "Dense matrix constructor.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The data for the matrix.",
            "name": "data"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "DenseMatrix"
              ]
            },
            "description": "A new DenseMatrix instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1019
      },
      "derivative": {
        "name": "derivative",
        "kind": "function",
        "description": "Take the derivative of an expression.",
        "params": [
          {
            "type": {
              "names": [
                "string",
                "Node"
              ]
            },
            "description": "The expression to differentiate.",
            "name": "expr"
          },
          {
            "type": {
              "names": [
                "string",
                "Node"
              ]
            },
            "description": "The variable with respect to which to differentiate.",
            "name": "variable"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "description": "Optional options object.",
            "name": "options"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Node"
              ]
            },
            "description": "The derivative of the expression."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1028
      },
      "deuteronMass": {
        "name": "deuteronMass",
        "kind": "member",
        "description": "Deuteron mass in kilograms.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1039
      },
      "diff": {
        "name": "diff",
        "kind": "function",
        "description": "Calculate the differences between adjacent values in a matrix or array.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Input array or matrix.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "Dimension along which to calculate the difference.",
            "name": "dim"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The differences."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1047
      },
      "divideScalar": {
        "name": "divideScalar",
        "kind": "function",
        "description": "Divide two scalar values, x / y.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Fraction",
                "Complex"
              ]
            },
            "description": "Numerator.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Fraction",
                "Complex"
              ]
            },
            "description": "Denominator.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Fraction",
                "Complex"
              ]
            },
            "description": "The result of division."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1057
      },
      "dotDivide": {
        "name": "dotDivide",
        "kind": "function",
        "description": "Divide two matrices element-wise.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Numerator matrix.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Denominator matrix.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The element-wise division."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1067
      },
      "dotMultiply": {
        "name": "dotMultiply",
        "kind": "function",
        "description": "Multiply two matrices element-wise.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "First matrix.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Second matrix.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The element-wise multiplication."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1077
      },
      "dotPow": {
        "name": "dotPow",
        "kind": "function",
        "description": "Exponentiate two matrices element-wise.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Base matrix.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Exponent matrix.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The element-wise exponentiation."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1087
      },
      "e": {
        "name": "e",
        "kind": "member",
        "description": "Euler's number, the base of natural logarithms.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1097
      },
      "efimovFactor": {
        "name": "efimovFactor",
        "kind": "member",
        "description": "Efimov factor.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1105
      },
      "eigs": {
        "name": "eigs",
        "kind": "function",
        "description": "Calculate eigenvalues and eigenvectors of a matrix.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "A square matrix.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "An object containing eigenvalues and eigenvectors."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1113
      },
      "electricConstant": {
        "name": "electricConstant",
        "kind": "member",
        "description": "Electric constant (vacuum permittivity) in F/m.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1122
      },
      "electronMass": {
        "name": "electronMass",
        "kind": "member",
        "description": "Electron mass in kilograms.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1130
      },
      "elementaryCharge": {
        "name": "elementaryCharge",
        "kind": "member",
        "description": "Elementary charge in coulombs.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1138
      },
      "equal": {
        "name": "equal",
        "kind": "function",
        "description": "Test whether two values are equal.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "First value to compare.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "Second value to compare.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if x equals y."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1146
      },
      "equalScalar": {
        "name": "equalScalar",
        "kind": "function",
        "description": "Test whether two scalar values are equal.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Fraction",
                "Complex"
              ]
            },
            "description": "First value.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Fraction",
                "Complex"
              ]
            },
            "description": "Second value.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if x equals y."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1156
      },
      "equalText": {
        "name": "equalText",
        "kind": "function",
        "description": "Test whether two strings are equal.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "First string.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Second string.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if x equals y."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1166
      },
      "erf": {
        "name": "erf",
        "kind": "function",
        "description": "Calculate the error function of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Input value.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The error function evaluated at x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1176
      },
      "exp": {
        "name": "exp",
        "kind": "function",
        "description": "Calculate the exponential of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Exponent.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The exponential of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1185
      },
      "expm1": {
        "name": "expm1",
        "kind": "function",
        "description": "Calculate exp(x) - 1.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex"
              ]
            },
            "description": "Input value.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex"
              ]
            },
            "description": "The result of exp(x) - 1."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1194
      },
      "factorial": {
        "name": "factorial",
        "kind": "function",
        "description": "Calculate the factorial of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "A non-negative integer.",
            "name": "n"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "The factorial of n."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1203
      },
      "false": {
        "name": "false",
        "kind": "member",
        "description": "Boolean value false.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1212
      },
      "faraday": {
        "name": "faraday",
        "kind": "member",
        "description": "Faraday constant in C/mol.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1220
      },
      "fermiCoupling": {
        "name": "fermiCoupling",
        "kind": "member",
        "description": "Fermi coupling constant in GeV^-2.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1228
      },
      "fft": {
        "name": "fft",
        "kind": "function",
        "description": "Compute the Fast Fourier Transform of a matrix or array.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Input array or matrix.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The FFT of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1236
      },
      "FibonacciHeap": {
        "name": "FibonacciHeap",
        "kind": "function",
        "description": "Fibonacci heap data structure.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "optional": true,
            "description": "Comparison function.",
            "name": "compare"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "FibonacciHeap"
              ]
            },
            "description": "A new FibonacciHeap instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1245
      },
      "filter": {
        "name": "filter",
        "kind": "function",
        "description": "Filter the items in an array or matrix.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The input array or matrix.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The test function.",
            "name": "test"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The filtered array or matrix."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1254
      },
      "fineStructure": {
        "name": "fineStructure",
        "kind": "member",
        "description": "Fine-structure constant.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1264
      },
      "firstRadiation": {
        "name": "firstRadiation",
        "kind": "member",
        "description": "First radiation constant in Wm^2.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1272
      },
      "fix": {
        "name": "fix",
        "kind": "function",
        "description": "Round a value towards zero.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "Input value.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "The rounded value."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1280
      },
      "flatten": {
        "name": "flatten",
        "kind": "function",
        "description": "Flatten a multi-dimensional array or matrix into a single dimension.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The input array or matrix.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The flattened array or matrix."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1289
      },
      "floor": {
        "name": "floor",
        "kind": "function",
        "description": "Round a value towards negative infinity.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "Input value.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "The rounded value."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1298
      },
      "forEach": {
        "name": "forEach",
        "kind": "function",
        "description": "Iterate over each element of a matrix or array.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The input array or matrix.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The function to execute on each element.",
            "name": "callback"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "void"
              ]
            }
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1307
      },
      "format": {
        "name": "format",
        "kind": "function",
        "description": "Format a value for display.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to format.",
            "name": "value"
          },
          {
            "type": {
              "names": [
                "Object",
                "function"
              ]
            },
            "optional": true,
            "description": "Formatting options or custom function.",
            "name": "options"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The formatted value."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1317
      },
      "fraction": {
        "name": "fraction",
        "kind": "function",
        "description": "Create a fraction.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "string",
                "Fraction"
              ]
            },
            "description": "Numerator.",
            "name": "numerator"
          },
          {
            "type": {
              "names": [
                "number",
                "string"
              ]
            },
            "optional": true,
            "description": "Denominator.",
            "name": "denominator"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Fraction"
              ]
            },
            "description": "A new Fraction instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1327
      },
      "Fraction": {
        "name": "Fraction",
        "kind": "function",
        "description": "Fraction constructor.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "string",
                "Fraction"
              ]
            },
            "description": "Numerator.",
            "name": "numerator"
          },
          {
            "type": {
              "names": [
                "number",
                "string"
              ]
            },
            "optional": true,
            "description": "Denominator.",
            "name": "denominator"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Fraction"
              ]
            },
            "description": "A new Fraction instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1337
      },
      "FunctionAssignmentNode": {
        "name": "FunctionAssignmentNode",
        "kind": "function",
        "description": "A node representing a function assignment in the expression tree.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The name of the function being assigned.",
            "name": "name"
          },
          {
            "type": {
              "names": [
                "Array.<string>"
              ]
            },
            "description": "An array of parameter names.",
            "name": "params"
          },
          {
            "type": {
              "names": [
                "Node"
              ]
            },
            "description": "The function expression.",
            "name": "expr"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "FunctionAssignmentNode"
              ]
            },
            "description": "A new FunctionAssignmentNode instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1347
      },
      "FunctionNode": {
        "name": "FunctionNode",
        "kind": "function",
        "description": "A node representing a function call in the expression tree.",
        "params": [
          {
            "type": {
              "names": [
                "string",
                "SymbolNode"
              ]
            },
            "description": "The name of the function or a SymbolNode.",
            "name": "name"
          },
          {
            "type": {
              "names": [
                "Array.<Node>"
              ]
            },
            "description": "An array of argument nodes.",
            "name": "args"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "FunctionNode"
              ]
            },
            "description": "A new FunctionNode instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1358
      },
      "gamma": {
        "name": "gamma",
        "kind": "function",
        "description": "Calculate the gamma function of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The input value.",
            "name": "n"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The gamma of n."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1368
      },
      "gasConstant": {
        "name": "gasConstant",
        "kind": "member",
        "description": "The molar gas constant, in units of J/(molK).",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1377
      },
      "gcd": {
        "name": "gcd",
        "kind": "function",
        "description": "Compute the greatest common divisor of two or more values.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "Two or more integer numbers.",
            "name": "args"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "The greatest common divisor."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1385
      },
      "getMatrixDataType": {
        "name": "getMatrixDataType",
        "kind": "function",
        "description": "Get the data type of a matrix.",
        "params": [
          {
            "type": {
              "names": [
                "Matrix"
              ]
            },
            "description": "The input matrix.",
            "name": "matrix"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The data type of the matrix elements."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1394
      },
      "gravitationConstant": {
        "name": "gravitationConstant",
        "kind": "member",
        "description": "Newtonian constant of gravitation, in m^3/(kg s^2).",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1403
      },
      "gravity": {
        "name": "gravity",
        "kind": "member",
        "description": "Acceleration due to gravity on Earth, in m/s^2.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1411
      },
      "hartreeEnergy": {
        "name": "hartreeEnergy",
        "kind": "member",
        "description": "Hartree energy, in joules.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1419
      },
      "hasNumericValue": {
        "name": "hasNumericValue",
        "kind": "function",
        "description": "Test whether a value is a numeric value.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if x is numeric."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1427
      },
      "Help": {
        "name": "Help",
        "kind": "function",
        "description": "Help object constructor.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The function or object to get help for.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Help"
              ]
            },
            "description": "A new Help instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1436
      },
      "hex": {
        "name": "hex",
        "kind": "function",
        "description": "Format a number as hexadecimal.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "The value to format.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The hexadecimal representation."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1445
      },
      "hypot": {
        "name": "hypot",
        "kind": "function",
        "description": "Calculate the hypotenuse of a list of values.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "The input values.",
            "name": "args"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "The hypotenuse."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1454
      },
      "i": {
        "name": "i",
        "kind": "member",
        "description": "The imaginary unit 'i'.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1463
      },
      "identity": {
        "name": "identity",
        "kind": "function",
        "description": "Create an identity matrix.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Array"
              ]
            },
            "description": "The size of the matrix.",
            "name": "size"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "description": "The matrix format.",
            "name": "format"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Matrix"
              ]
            },
            "description": "An identity matrix."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1471
      },
      "ifft": {
        "name": "ifft",
        "kind": "function",
        "description": "Compute the inverse Fast Fourier Transform.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Input array or matrix.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The inverse FFT of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1481
      },
      "im": {
        "name": "im",
        "kind": "function",
        "description": "Get the imaginary part of a complex number.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Input value.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "The imaginary part of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1490
      },
      "ImmutableDenseMatrix": {
        "name": "ImmutableDenseMatrix",
        "kind": "function",
        "description": "Immutable dense matrix constructor.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The data for the matrix.",
            "name": "data"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "ImmutableDenseMatrix"
              ]
            },
            "description": "A new ImmutableDenseMatrix instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1499
      },
      "Index": {
        "name": "Index",
        "kind": "function",
        "description": "Index constructor for matrices.",
        "params": [
          {
            "type": {
              "names": [
                "Range",
                "number"
              ]
            },
            "description": "Ranges or indices.",
            "name": "ranges"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Index"
              ]
            },
            "description": "A new Index instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1508
      },
      "IndexNode": {
        "name": "IndexNode",
        "kind": "function",
        "description": "A node representing an index operation in the expression tree.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<Node>"
              ]
            },
            "description": "The indices.",
            "name": "dimensions"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "IndexNode"
              ]
            },
            "description": "A new IndexNode instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1517
      },
      "intersect": {
        "name": "intersect",
        "kind": "function",
        "description": "Compute the intersection of two sets.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "First set.",
            "name": "a"
          },
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Second set.",
            "name": "b"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The intersection of a and b."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1526
      },
      "inverseConductanceQuantum": {
        "name": "inverseConductanceQuantum",
        "kind": "member",
        "description": "Inverse conductance quantum, in ohms.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1536
      },
      "invmod": {
        "name": "invmod",
        "kind": "function",
        "description": "Calculate the modular inverse of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "The value.",
            "name": "a"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "The modulus.",
            "name": "m"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "The modular inverse."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1544
      },
      "isInteger": {
        "name": "isInteger",
        "kind": "function",
        "description": "Test whether a value is an integer.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if x is an integer."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1554
      },
      "isNegative": {
        "name": "isNegative",
        "kind": "function",
        "description": "Test whether a value is negative.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if x is negative."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1563
      },
      "isPositive": {
        "name": "isPositive",
        "kind": "function",
        "description": "Test whether a value is positive.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if x is positive."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1572
      },
      "isPrime": {
        "name": "isPrime",
        "kind": "function",
        "description": "Test whether a number is prime.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if x is prime."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1581
      },
      "isZero": {
        "name": "isZero",
        "kind": "function",
        "description": "Test whether a value is zero.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "The value to test.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if x is zero."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1590
      },
      "kldivergence": {
        "name": "kldivergence",
        "kind": "function",
        "description": "Calculate the Kullback-Leibler divergence between two distributions.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "First probability distribution.",
            "name": "p"
          },
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Second probability distribution.",
            "name": "q"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The KL divergence D<sub>KL</sub>(p || q)."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1599
      },
      "klitzing": {
        "name": "klitzing",
        "kind": "member",
        "description": "Von Klitzing constant, in ohms.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1609
      },
      "kron": {
        "name": "kron",
        "kind": "function",
        "description": "Compute the Kronecker product of two matrices.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "First matrix.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Second matrix.",
            "name": "B"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Matrix"
              ]
            },
            "description": "The Kronecker product of A and B."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1617
      },
      "LN10": {
        "name": "LN10",
        "kind": "member",
        "description": "Natural logarithm of 10.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1627
      },
      "LN2": {
        "name": "LN2",
        "kind": "member",
        "description": "Natural logarithm of 2.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1635
      },
      "LOG10E": {
        "name": "LOG10E",
        "kind": "member",
        "description": "Base 10 logarithm of e.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1643
      },
      "LOG2E": {
        "name": "LOG2E",
        "kind": "member",
        "description": "Base 2 logarithm of e.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1651
      },
      "larger": {
        "name": "larger",
        "kind": "function",
        "description": "Test whether value x is larger than y.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Fraction",
                "Complex",
                "Unit",
                "string",
                "Array",
                "Matrix"
              ]
            },
            "description": "First value.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Fraction",
                "Complex",
                "Unit",
                "string",
                "Array",
                "Matrix"
              ]
            },
            "description": "Second value.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean",
                "Array",
                "Matrix"
              ]
            },
            "description": "Returns true if x > y."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1659
      },
      "largerEq": {
        "name": "largerEq",
        "kind": "function",
        "description": "Test whether value x is larger than or equal to y.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Fraction",
                "Complex",
                "Unit",
                "string",
                "Array",
                "Matrix"
              ]
            },
            "description": "First value.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Fraction",
                "Complex",
                "Unit",
                "string",
                "Array",
                "Matrix"
              ]
            },
            "description": "Second value.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean",
                "Array",
                "Matrix"
              ]
            },
            "description": "Returns true if x >= y."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1669
      },
      "lcm": {
        "name": "lcm",
        "kind": "function",
        "description": "Compute the least common multiple of two or more values.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "Two or more integer numbers.",
            "name": "args"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "The least common multiple."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1679
      },
      "leafCount": {
        "name": "leafCount",
        "kind": "function",
        "description": "Count the number of leaf nodes in an expression tree.",
        "params": [
          {
            "type": {
              "names": [
                "Node"
              ]
            },
            "description": "The root node of the expression tree.",
            "name": "node"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of leaf nodes."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1688
      },
      "leftShift": {
        "name": "leftShift",
        "kind": "function",
        "description": "Bitwise left shift operation.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "Value to be shifted.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "Amount of bits to shift.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "The shifted value."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1697
      },
      "lgamma": {
        "name": "lgamma",
        "kind": "function",
        "description": "Compute the natural logarithm of the gamma function.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The input value.",
            "name": "n"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The natural logarithm of the gamma function at n."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1707
      },
      "log": {
        "name": "log",
        "kind": "function",
        "description": "Calculate the natural logarithm of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Value for which to calculate the logarithm.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex"
              ]
            },
            "optional": true,
            "defaultvalue": "e",
            "description": "Base of the logarithm.",
            "name": "base"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The logarithm of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1716
      },
      "log10": {
        "name": "log10",
        "kind": "function",
        "description": "Calculate the base-10 logarithm of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Value for which to calculate the logarithm.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The base-10 logarithm of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1726
      },
      "log1p": {
        "name": "log1p",
        "kind": "function",
        "description": "Calculate the natural logarithm of 1 plus a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "Input value.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "The result of log(1 + x)."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1735
      },
      "log2": {
        "name": "log2",
        "kind": "function",
        "description": "Calculate the base-2 logarithm of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Value for which to calculate the logarithm.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The base-2 logarithm of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1744
      },
      "loschmidt": {
        "name": "loschmidt",
        "kind": "member",
        "description": "Loschmidt constant at 0°C and 1 atm, in m^-3.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1753
      },
      "lsolve": {
        "name": "lsolve",
        "kind": "function",
        "description": "Solve a linear system A * x = b where A is a lower triangular matrix.",
        "params": [
          {
            "type": {
              "names": [
                "Matrix",
                "Array"
              ]
            },
            "description": "A lower triangular matrix.",
            "name": "L"
          },
          {
            "type": {
              "names": [
                "Matrix",
                "Array"
              ]
            },
            "description": "A column vector.",
            "name": "b"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Matrix",
                "Array"
              ]
            },
            "description": "The solution vector x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1761
      },
      "lsolveAll": {
        "name": "lsolveAll",
        "kind": "function",
        "description": "Find all solutions of a linear system A * x = b where A is a lower triangular matrix.",
        "params": [
          {
            "type": {
              "names": [
                "Matrix",
                "Array"
              ]
            },
            "description": "A lower triangular matrix.",
            "name": "L"
          },
          {
            "type": {
              "names": [
                "Matrix",
                "Array"
              ]
            },
            "description": "A column vector.",
            "name": "b"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "An array of solutions."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1771
      },
      "lup": {
        "name": "lup",
        "kind": "function",
        "description": "Compute the LU decomposition with partial pivoting.",
        "params": [
          {
            "type": {
              "names": [
                "Matrix",
                "Array"
              ]
            },
            "description": "A square matrix.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": "1e-10",
            "description": "Tolerance threshold.",
            "name": "threshold"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "An object containing L, U, and P matrices."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1781
      },
      "lusolve": {
        "name": "lusolve",
        "kind": "function",
        "description": "Solve a linear system using LU decomposition.",
        "params": [
          {
            "type": {
              "names": [
                "Matrix",
                "Array"
              ]
            },
            "description": "Coefficient matrix.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "Matrix",
                "Array"
              ]
            },
            "description": "Right-hand side vector or matrix.",
            "name": "b"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "description": "Matrix storage order.",
            "name": "order"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Matrix",
                "Array"
              ]
            },
            "description": "The solution vector or matrix."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1791
      },
      "lyap": {
        "name": "lyap",
        "kind": "function",
        "description": "Solve the Lyapunov equation A*X + X*A' = Q.",
        "params": [
          {
            "type": {
              "names": [
                "Matrix",
                "Array"
              ]
            },
            "description": "A square matrix.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "Matrix",
                "Array"
              ]
            },
            "description": "A square matrix.",
            "name": "Q"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Matrix"
              ]
            },
            "description": "Solution X of the Lyapunov equation."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1802
      },
      "mad": {
        "name": "mad",
        "kind": "function",
        "description": "Compute the median absolute deviation of a set of values.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Input array.",
            "name": "array"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "optional": true,
            "description": "Dimension along which to compute.",
            "name": "dim"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "The median absolute deviation."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1812
      },
      "magneticConstant": {
        "name": "magneticConstant",
        "kind": "member",
        "description": "Magnetic constant (vacuum permeability), in N/A^2.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1822
      },
      "magneticFluxQuantum": {
        "name": "magneticFluxQuantum",
        "kind": "member",
        "description": "Magnetic flux quantum, in Wb.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1830
      },
      "map": {
        "name": "map",
        "kind": "function",
        "description": "Map a function over the elements of a matrix or array.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The input array or matrix.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The function to apply.",
            "name": "callback"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The result after applying the callback."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1838
      },
      "matrix": {
        "name": "matrix",
        "kind": "function",
        "description": "Create a matrix.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "optional": true,
            "description": "The data for the matrix.",
            "name": "data"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "description": "The matrix format.",
            "name": "format"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Matrix"
              ]
            },
            "description": "A new Matrix instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1848
      },
      "Matrix": {
        "name": "Matrix",
        "kind": "function",
        "description": "Matrix constructor.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "optional": true,
            "description": "The data for the matrix.",
            "name": "data"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "description": "The matrix format.",
            "name": "format"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Matrix"
              ]
            },
            "description": "A new Matrix instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1858
      },
      "matrixFromColumns": {
        "name": "matrixFromColumns",
        "kind": "function",
        "description": "Create a matrix from given columns.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Columns to construct the matrix.",
            "name": "columns"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Matrix"
              ]
            },
            "description": "The constructed matrix."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1868
      },
      "matrixFromFunction": {
        "name": "matrixFromFunction",
        "kind": "function",
        "description": "Create a matrix using a provided function.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The size of the matrix.",
            "name": "size"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "Function to generate matrix entries.",
            "name": "callback"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Matrix"
              ]
            },
            "description": "The generated matrix."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1877
      },
      "matrixFromRows": {
        "name": "matrixFromRows",
        "kind": "function",
        "description": "Create a matrix from given rows.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Rows to construct the matrix.",
            "name": "rows"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Matrix"
              ]
            },
            "description": "The constructed matrix."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1887
      },
      "mean": {
        "name": "mean",
        "kind": "function",
        "description": "Compute the arithmetic mean of a set of values.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Input array.",
            "name": "array"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "optional": true,
            "description": "Dimension along which to compute.",
            "name": "dim"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "The mean value."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1896
      },
      "median": {
        "name": "median",
        "kind": "function",
        "description": "Compute the median of a set of values.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Input array.",
            "name": "array"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "optional": true,
            "description": "Dimension along which to compute.",
            "name": "dim"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "The median value."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1906
      },
      "mod": {
        "name": "mod",
        "kind": "function",
        "description": "Calculate the modulus of two numbers.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "Dividend.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "Divisor.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "The remainder after division."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1916
      },
      "mode": {
        "name": "mode",
        "kind": "function",
        "description": "Compute the mode of a set of values.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Input array.",
            "name": "array"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The mode(s) of the array."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1926
      },
      "molarMass": {
        "name": "molarMass",
        "kind": "member",
        "description": "Molar mass constant, in kg/mol.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1935
      },
      "molarMassC12": {
        "name": "molarMassC12",
        "kind": "member",
        "description": "Molar mass of carbon-12, in kg/mol.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1943
      },
      "molarPlanckConstant": {
        "name": "molarPlanckConstant",
        "kind": "member",
        "description": "Molar Planck constant, in J·s/mol.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1951
      },
      "molarVolume": {
        "name": "molarVolume",
        "kind": "member",
        "description": "Molar volume of an ideal gas at 1 atm and 0°C, in m³/mol.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1959
      },
      "multinomial": {
        "name": "multinomial",
        "kind": "function",
        "description": "Compute the multinomial coefficient of a list of integers.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Array"
              ]
            },
            "description": "Integer numbers.",
            "name": "args"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The multinomial coefficient."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1967
      },
      "multiplyScalar": {
        "name": "multiplyScalar",
        "kind": "function",
        "description": "Multiply two scalar values, x * y.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Fraction",
                "Complex"
              ]
            },
            "description": "First value.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Fraction",
                "Complex"
              ]
            },
            "description": "Second value.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Fraction",
                "Complex"
              ]
            },
            "description": "The product of x and y."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1976
      },
      "neutronMass": {
        "name": "neutronMass",
        "kind": "member",
        "description": "Neutron mass, in kilograms.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1986
      },
      "not": {
        "name": "not",
        "kind": "function",
        "description": "Logical NOT operation.",
        "params": [
          {
            "type": {
              "names": [
                "boolean",
                "Array",
                "Matrix"
              ]
            },
            "description": "Input value.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean",
                "Array",
                "Matrix"
              ]
            },
            "description": "The logical negation of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 1994
      },
      "nthRoot": {
        "name": "nthRoot",
        "kind": "function",
        "description": "Calculate the nth root of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The value.",
            "name": "a"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "optional": true,
            "defaultvalue": 2,
            "description": "The root.",
            "name": "root"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The nth root of a."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2003
      },
      "nthRoots": {
        "name": "nthRoots",
        "kind": "function",
        "description": "Calculate the nth roots of a complex number.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Complex"
              ]
            },
            "description": "The value.",
            "name": "a"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "The degree of the root.",
            "name": "n"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "An array of the n roots."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2013
      },
      "nuclearMagneton": {
        "name": "nuclearMagneton",
        "kind": "member",
        "description": "Nuclear magneton, in J/T.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2023
      },
      "null": {
        "name": "null",
        "kind": "member",
        "description": "JavaScript null value.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2031
      },
      "number": {
        "name": "number",
        "kind": "function",
        "description": "Parse a value into a number.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to parse.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The numeric value."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2039
      },
      "numeric": {
        "name": "numeric",
        "kind": "function",
        "description": "Convert a math.js data type to a numeric type.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to convert.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex"
              ]
            },
            "description": "The numeric representation."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2048
      },
      "ObjectNode": {
        "name": "ObjectNode",
        "kind": "function",
        "description": "A node representing an object in the expression tree.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Object properties as nodes.",
            "name": "properties"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "ObjectNode"
              ]
            },
            "description": "A new ObjectNode instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2057
      },
      "oct": {
        "name": "oct",
        "kind": "function",
        "description": "Format a number as octal.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "The value to format.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The octal representation."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2066
      },
      "OperatorNode": {
        "name": "OperatorNode",
        "kind": "function",
        "description": "A node representing an operator in the expression tree.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The operator symbol.",
            "name": "op"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The function name.",
            "name": "fn"
          },
          {
            "type": {
              "names": [
                "Array.<Node>"
              ]
            },
            "description": "An array of argument nodes.",
            "name": "args"
          },
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "optional": true,
            "defaultvalue": false,
            "description": "Is the operator implicit?",
            "name": "implicit"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "OperatorNode"
              ]
            },
            "description": "A new OperatorNode instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2075
      },
      "or": {
        "name": "or",
        "kind": "function",
        "description": "Logical OR operation.",
        "params": [
          {
            "type": {
              "names": [
                "boolean",
                "Array",
                "Matrix"
              ]
            },
            "description": "First value.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "boolean",
                "Array",
                "Matrix"
              ]
            },
            "description": "Second value.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean",
                "Array",
                "Matrix"
              ]
            },
            "description": "The logical OR of x and y."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2087
      },
      "ParenthesisNode": {
        "name": "ParenthesisNode",
        "kind": "function",
        "description": "A node representing parentheses in the expression tree.",
        "params": [
          {
            "type": {
              "names": [
                "Node"
              ]
            },
            "description": "The node encapsulated by the parentheses.",
            "name": "content"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "ParenthesisNode"
              ]
            },
            "description": "A new ParenthesisNode instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2097
      },
      "parse": {
        "name": "parse",
        "kind": "function",
        "description": "Parse and evaluate an expression.",
        "params": [
          {
            "type": {
              "names": [
                "string",
                "Object"
              ]
            },
            "description": "The expression to parse.",
            "name": "expr"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Node",
                "Array.<Node>"
              ]
            },
            "description": "The parsed expression node(s)."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2106
      },
      "parser": {
        "name": "parser",
        "kind": "function",
        "description": "Create a parser with its own scope and functions.",
        "returns": [
          {
            "type": {
              "names": [
                "Parser"
              ]
            },
            "description": "A new Parser instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2115
      },
      "Parser": {
        "name": "Parser",
        "kind": "function",
        "description": "Parser constructor.",
        "returns": [
          {
            "type": {
              "names": [
                "Parser"
              ]
            },
            "description": "A new Parser instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2123
      },
      "partitionSelect": {
        "name": "partitionSelect",
        "kind": "function",
        "description": "Select an element from a matrix or array based on its sorted position.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The input array or matrix.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The kth smallest value to select.",
            "name": "k"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "optional": true,
            "description": "Optional comparison function.",
            "name": "compare"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Fraction",
                "Complex"
              ]
            },
            "description": "The selected element."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2131
      },
      "permutations": {
        "name": "permutations",
        "kind": "function",
        "description": "Calculate the number of permutations of n items taken k at a time.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "Total number of items.",
            "name": "n"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "optional": true,
            "description": "Number of items to choose.",
            "name": "k"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "Number of possible permutations."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2142
      },
      "phi": {
        "name": "phi",
        "kind": "member",
        "description": "The golden ratio, approximately 1.618.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2152
      },
      "pi": {
        "name": "pi",
        "kind": "member",
        "description": "The mathematical constant pi.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2160
      },
      "pickRandom": {
        "name": "pickRandom",
        "kind": "function",
        "description": "Randomly pick one or more values from a list.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "Array to pick values from.",
            "name": "array"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "description": "Number of values to pick.",
            "name": "number"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "*",
                "Array"
              ]
            },
            "description": "Picked value(s)."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2168
      },
      "pinv": {
        "name": "pinv",
        "kind": "function",
        "description": "Compute the pseudoinverse of a matrix.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "A matrix.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Matrix"
              ]
            },
            "description": "The pseudoinverse of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2178
      },
      "planckCharge": {
        "name": "planckCharge",
        "kind": "member",
        "description": "Planck charge, in coulombs.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2187
      },
      "planckConstant": {
        "name": "planckConstant",
        "kind": "member",
        "description": "Planck constant, in joule seconds.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2195
      },
      "planckLength": {
        "name": "planckLength",
        "kind": "member",
        "description": "Planck length, in meters.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2203
      },
      "planckMass": {
        "name": "planckMass",
        "kind": "member",
        "description": "Planck mass, in kilograms.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2211
      },
      "planckTemperature": {
        "name": "planckTemperature",
        "kind": "member",
        "description": "Planck temperature, in kelvin.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2219
      },
      "planckTime": {
        "name": "planckTime",
        "kind": "member",
        "description": "Planck time, in seconds.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2227
      },
      "polynomialRoot": {
        "name": "polynomialRoot",
        "kind": "function",
        "description": "Find roots of a univariate polynomial.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "Coefficients of the polynomial.",
            "name": "coefficients"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "An array of roots."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2235
      },
      "pow": {
        "name": "pow",
        "kind": "function",
        "description": "Calculate the power of x to y, x^y.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Base.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Exponent.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "x raised to the power y."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2244
      },
      "prod": {
        "name": "prod",
        "kind": "function",
        "description": "Compute the product of a set of values.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Input array.",
            "name": "array"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "optional": true,
            "description": "Dimension along which to compute the product.",
            "name": "dim"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "The product of all values."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2254
      },
      "protonMass": {
        "name": "protonMass",
        "kind": "member",
        "description": "Proton mass, in kilograms.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2264
      },
      "qr": {
        "name": "qr",
        "kind": "function",
        "description": "Compute the QR decomposition of a matrix.",
        "params": [
          {
            "type": {
              "names": [
                "Matrix",
                "Array"
              ]
            },
            "description": "A matrix.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "An object containing Q and R matrices."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2272
      },
      "quantileSeq": {
        "name": "quantileSeq",
        "kind": "function",
        "description": "Compute the quantile of a sequence.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Input data.",
            "name": "data"
          },
          {
            "type": {
              "names": [
                "number",
                "Array"
              ]
            },
            "description": "Probability or array of probabilities.",
            "name": "prob"
          },
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "optional": true,
            "defaultvalue": false,
            "description": "Is data sorted?",
            "name": "sorted"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Array"
              ]
            },
            "description": "The quantile(s)."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2281
      },
      "quantumOfCirculation": {
        "name": "quantumOfCirculation",
        "kind": "member",
        "description": "Quantum of circulation, in m^2/s.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2292
      },
      "randomInt": {
        "name": "randomInt",
        "kind": "function",
        "description": "Generate a random integer between min and max.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "optional": true,
            "description": "Minimum value, inclusive.",
            "name": "min"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "Maximum value, inclusive.",
            "name": "max"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "A random integer."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2300
      },
      "Range": {
        "name": "Range",
        "kind": "function",
        "description": "Create a range.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "Start of the range.",
            "name": "start"
          },
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "End of the range.",
            "name": "end"
          },
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "optional": true,
            "defaultvalue": 1,
            "description": "Step size.",
            "name": "step"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Range"
              ]
            },
            "description": "A new Range instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2310
      },
      "RangeNode": {
        "name": "RangeNode",
        "kind": "function",
        "description": "A node representing a range in the expression tree.",
        "params": [
          {
            "type": {
              "names": [
                "Node"
              ]
            },
            "description": "Start node.",
            "name": "start"
          },
          {
            "type": {
              "names": [
                "Node"
              ]
            },
            "description": "End node.",
            "name": "end"
          },
          {
            "type": {
              "names": [
                "Node"
              ]
            },
            "optional": true,
            "description": "Step node.",
            "name": "step"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "RangeNode"
              ]
            },
            "description": "A new RangeNode instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2321
      },
      "rationalize": {
        "name": "rationalize",
        "kind": "function",
        "description": "Rationalize an expression.",
        "params": [
          {
            "type": {
              "names": [
                "string",
                "Node"
              ]
            },
            "description": "The expression to rationalize.",
            "name": "expr"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "description": "Scope of variables.",
            "name": "scope"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "description": "Options object.",
            "name": "options"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "An object with expression and denominator."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2332
      },
      "re": {
        "name": "re",
        "kind": "function",
        "description": "Get the real part of a complex number.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Input value.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "The real part of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2343
      },
      "reducedPlanckConstant": {
        "name": "reducedPlanckConstant",
        "kind": "member",
        "description": "Reduced Planck constant, in joule seconds.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2352
      },
      "RelationalNode": {
        "name": "RelationalNode",
        "kind": "function",
        "description": "A node representing a relational operation.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Relational condition.",
            "name": "condition"
          },
          {
            "type": {
              "names": [
                "Node"
              ]
            },
            "description": "Parameters.",
            "name": "params"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "RelationalNode"
              ]
            },
            "description": "A new RelationalNode instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2360
      },
      "replacer": {
        "name": "replacer",
        "kind": "function",
        "description": "Replacer function for JSON serialization.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Property name.",
            "name": "key"
          },
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "Property value.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The transformed value."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2370
      },
      "resize": {
        "name": "resize",
        "kind": "function",
        "description": "Resize a matrix.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The input matrix.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The new size.",
            "name": "size"
          },
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "Default value for new entries.",
            "name": "defaultValue"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The resized matrix."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2380
      },
      "resolve": {
        "name": "resolve",
        "kind": "function",
        "description": "Resolve the value of a symbol or function.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The name to resolve.",
            "name": "name"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The resolved value."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2391
      },
      "ResultSet": {
        "name": "ResultSet",
        "kind": "function",
        "description": "ResultSet constructor.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The entries in the result set.",
            "name": "entries"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "ResultSet"
              ]
            },
            "description": "A new ResultSet instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2400
      },
      "reviver": {
        "name": "reviver",
        "kind": "function",
        "description": "Reviver function for JSON deserialization.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Property name.",
            "name": "key"
          },
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "Property value.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The transformed value."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2409
      },
      "rightArithShift": {
        "name": "rightArithShift",
        "kind": "function",
        "description": "Bitwise right arithmetic shift operation.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "The value to shift.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "The amount to shift.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "The shifted value."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2419
      },
      "rightLogShift": {
        "name": "rightLogShift",
        "kind": "function",
        "description": "Bitwise right logical shift operation.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "The value to shift.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "The amount to shift.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "The shifted value."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2429
      },
      "rotate": {
        "name": "rotate",
        "kind": "function",
        "description": "Rotate the elements of a matrix.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The input matrix.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "optional": true,
            "defaultvalue": 1,
            "description": "Number of 90-degree rotations.",
            "name": "turns"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The rotated matrix."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2439
      },
      "rotationMatrix": {
        "name": "rotationMatrix",
        "kind": "function",
        "description": "Create a 2D rotation matrix.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "Rotation angle in radians.",
            "name": "theta"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Matrix"
              ]
            },
            "description": "The rotation matrix."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2449
      },
      "rydberg": {
        "name": "rydberg",
        "kind": "member",
        "description": "Rydberg constant, in m^-1.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2458
      },
      "SQRT1_2": {
        "name": "SQRT1_2",
        "kind": "member",
        "description": "Square root of 1/2.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2466
      },
      "SQRT2": {
        "name": "SQRT2",
        "kind": "member",
        "description": "Square root of 2.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2474
      },
      "sackurTetrode": {
        "name": "sackurTetrode",
        "kind": "member",
        "description": "Sackur-Tetrode constant at 1 atm, in J/K.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2482
      },
      "schur": {
        "name": "schur",
        "kind": "function",
        "description": "Compute the Schur decomposition of a matrix.",
        "params": [
          {
            "type": {
              "names": [
                "Matrix",
                "Array"
              ]
            },
            "description": "A square matrix.",
            "name": "A"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "An object containing matrices U and T."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2490
      },
      "sec": {
        "name": "sec",
        "kind": "function",
        "description": "Calculate the secant of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Unit",
                "Array",
                "Matrix"
              ]
            },
            "description": "Function input.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The secant of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2499
      },
      "sech": {
        "name": "sech",
        "kind": "function",
        "description": "Calculate the hyperbolic secant of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Function input.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The hyperbolic secant of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2508
      },
      "secondRadiation": {
        "name": "secondRadiation",
        "kind": "member",
        "description": "Second radiation constant, in m·K.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2517
      },
      "setCartesian": {
        "name": "setCartesian",
        "kind": "function",
        "description": "Create the Cartesian product of two or more sets.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The sets to compute the product of.",
            "name": "sets"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The Cartesian product."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2525
      },
      "setDifference": {
        "name": "setDifference",
        "kind": "function",
        "description": "Compute the difference between two sets.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "First set.",
            "name": "a"
          },
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Second set.",
            "name": "b"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The difference a \\ b."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2534
      },
      "setDistinct": {
        "name": "setDistinct",
        "kind": "function",
        "description": "Remove duplicate elements from a set.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Input set.",
            "name": "a"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "A set with distinct elements."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2544
      },
      "setIntersect": {
        "name": "setIntersect",
        "kind": "function",
        "description": "Compute the intersection of two or more sets.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "First set.",
            "name": "a"
          },
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Second set.",
            "name": "b"
          },
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "optional": true,
            "description": "Additional sets.",
            "name": "others"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The intersection of the sets."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2553
      },
      "setIsSubset": {
        "name": "setIsSubset",
        "kind": "function",
        "description": "Test whether a set is a subset of another set.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Potential subset.",
            "name": "a"
          },
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Superset.",
            "name": "b"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if a is a subset of b."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2564
      },
      "setMultiplicity": {
        "name": "setMultiplicity",
        "kind": "function",
        "description": "Count the multiplicity of an element in a multiset.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "Element to count.",
            "name": "e"
          },
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The multiset.",
            "name": "multiset"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The multiplicity of e."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2574
      },
      "setPowerset": {
        "name": "setPowerset",
        "kind": "function",
        "description": "Compute the power set of a set.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The input set.",
            "name": "set"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The power set."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2584
      },
      "setSize": {
        "name": "setSize",
        "kind": "function",
        "description": "Get the size of a set.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The input set.",
            "name": "set"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of elements."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2593
      },
      "setSymDifference": {
        "name": "setSymDifference",
        "kind": "function",
        "description": "Compute the symmetric difference of two sets.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "First set.",
            "name": "a"
          },
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Second set.",
            "name": "b"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The symmetric difference."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2602
      },
      "setUnion": {
        "name": "setUnion",
        "kind": "function",
        "description": "Compute the union of two or more sets.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "First set.",
            "name": "a"
          },
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Second set.",
            "name": "b"
          },
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "optional": true,
            "description": "Additional sets.",
            "name": "others"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The union of the sets."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2612
      },
      "sign": {
        "name": "sign",
        "kind": "function",
        "description": "Compute the sign of a number.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Fraction",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Input value.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Fraction",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The sign of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2623
      },
      "simplify": {
        "name": "simplify",
        "kind": "function",
        "description": "Simplify an expression.",
        "params": [
          {
            "type": {
              "names": [
                "string",
                "Node"
              ]
            },
            "description": "The expression to simplify.",
            "name": "expr"
          },
          {
            "type": {
              "names": [
                "Object",
                "Array",
                "function"
              ]
            },
            "optional": true,
            "description": "Simplification rules.",
            "name": "rules"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "description": "Scope for variables.",
            "name": "scope"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Node"
              ]
            },
            "description": "The simplified expression."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2632
      },
      "simplifyConstant": {
        "name": "simplifyConstant",
        "kind": "function",
        "description": "Simplify an expression containing constants.",
        "params": [
          {
            "type": {
              "names": [
                "Node"
              ]
            },
            "description": "The expression to simplify.",
            "name": "expr"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "description": "Simplification options.",
            "name": "options"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Node"
              ]
            },
            "description": "The simplified expression."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2643
      },
      "simplifyCore": {
        "name": "simplifyCore",
        "kind": "function",
        "description": "Perform core simplifications on an expression.",
        "params": [
          {
            "type": {
              "names": [
                "Node"
              ]
            },
            "description": "The expression to simplify.",
            "name": "expr"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Node"
              ]
            },
            "description": "The simplified expression."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2653
      },
      "sin": {
        "name": "sin",
        "kind": "function",
        "description": "Calculate the sine of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Unit",
                "Array",
                "Matrix"
              ]
            },
            "description": "Function input.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The sine of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2662
      },
      "sinh": {
        "name": "sinh",
        "kind": "function",
        "description": "Calculate the hyperbolic sine of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Function input.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The hyperbolic sine of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2671
      },
      "slu": {
        "name": "slu",
        "kind": "function",
        "description": "Sparse Linear Solver using LU decomposition.",
        "params": [
          {
            "type": {
              "names": [
                "Matrix",
                "Array"
              ]
            },
            "description": "A sparse matrix.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Ordering and analysis control parameter.",
            "name": "order"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Partial pivoting threshold.",
            "name": "threshold"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The LU decomposition."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2680
      },
      "smaller": {
        "name": "smaller",
        "kind": "function",
        "description": "Test whether value x is smaller than y.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Fraction",
                "Complex",
                "Unit",
                "string",
                "Array",
                "Matrix"
              ]
            },
            "description": "First value.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Fraction",
                "Complex",
                "Unit",
                "string",
                "Array",
                "Matrix"
              ]
            },
            "description": "Second value.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean",
                "Array",
                "Matrix"
              ]
            },
            "description": "Returns true if x < y."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2691
      },
      "smallerEq": {
        "name": "smallerEq",
        "kind": "function",
        "description": "Test whether value x is smaller than or equal to y.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Fraction",
                "Complex",
                "Unit",
                "string",
                "Array",
                "Matrix"
              ]
            },
            "description": "First value.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Fraction",
                "Complex",
                "Unit",
                "string",
                "Array",
                "Matrix"
              ]
            },
            "description": "Second value.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean",
                "Array",
                "Matrix"
              ]
            },
            "description": "Returns true if x <= y."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2701
      },
      "Spa": {
        "name": "Spa",
        "kind": "function",
        "description": "Compute the Sparse LU decomposition of a matrix.",
        "params": [
          {
            "type": {
              "names": [
                "Matrix",
                "Array"
              ]
            },
            "description": "A sparse matrix.",
            "name": "A"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The LU decomposition."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2711
      },
      "sparse": {
        "name": "sparse",
        "kind": "function",
        "description": "Create a sparse matrix.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "optional": true,
            "description": "The data for the matrix.",
            "name": "data"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "description": "The data type.",
            "name": "datatype"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "SparseMatrix"
              ]
            },
            "description": "A new SparseMatrix instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2720
      },
      "SparseMatrix": {
        "name": "SparseMatrix",
        "kind": "function",
        "description": "Sparse matrix constructor.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "description": "The data for the matrix.",
            "name": "data"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "SparseMatrix"
              ]
            },
            "description": "A new SparseMatrix instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2730
      },
      "speedOfLight": {
        "name": "speedOfLight",
        "kind": "member",
        "description": "Speed of light in vacuum, in m/s.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2739
      },
      "splitUnit": {
        "name": "splitUnit",
        "kind": "function",
        "description": "Split a unit into its numeric value and unit string.",
        "params": [
          {
            "type": {
              "names": [
                "Unit"
              ]
            },
            "description": "The unit to split.",
            "name": "unit"
          },
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "Array of units to split into.",
            "name": "parts"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "Array of units."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2747
      },
      "sqrt": {
        "name": "sqrt",
        "kind": "function",
        "description": "Calculate the square root of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Unit",
                "Array",
                "Matrix"
              ]
            },
            "description": "Value for which to calculate the square root.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Unit",
                "Array",
                "Matrix"
              ]
            },
            "description": "The square root of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2757
      },
      "sqrtm": {
        "name": "sqrtm",
        "kind": "function",
        "description": "Calculate the principal square root of a matrix.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "A square matrix.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Matrix"
              ]
            },
            "description": "The principal square root of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2766
      },
      "square": {
        "name": "square",
        "kind": "function",
        "description": "Compute the square of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Unit",
                "Array",
                "Matrix"
              ]
            },
            "description": "Input value.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Complex",
                "Unit",
                "Array",
                "Matrix"
              ]
            },
            "description": "The square of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2775
      },
      "squeeze": {
        "name": "squeeze",
        "kind": "function",
        "description": "Remove singleton dimensions from an array or matrix.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The input array or matrix.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The squeezed array or matrix."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2784
      },
      "std": {
        "name": "std",
        "kind": "function",
        "description": "Compute the standard deviation of a set of values.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Input array.",
            "name": "array"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "defaultvalue": "'unbiased'",
            "description": "Normalization mode.",
            "name": "normalization"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "optional": true,
            "description": "Dimension along which to compute.",
            "name": "dim"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "The standard deviation."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2793
      },
      "stefanBoltzmann": {
        "name": "stefanBoltzmann",
        "kind": "member",
        "description": "Stefan-Boltzmann constant, in W/(m^2K^4).",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2804
      },
      "stirlingS2": {
        "name": "stirlingS2",
        "kind": "function",
        "description": "Stirling numbers of the second kind.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "Total number of objects.",
            "name": "n"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "Number of non-empty subsets.",
            "name": "k"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "The Stirling number."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2812
      },
      "string": {
        "name": "string",
        "kind": "function",
        "description": "Parse a value into a string.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to convert.",
            "name": "value"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The string representation of value."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2822
      },
      "subset": {
        "name": "subset",
        "kind": "function",
        "description": "Get or set a subset of a matrix or array.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "The input matrix.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "Index"
              ]
            },
            "description": "The index.",
            "name": "index"
          },
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "optional": true,
            "description": "The replacement value.",
            "name": "replacement"
          },
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "optional": true,
            "description": "Default value for missing entries.",
            "name": "defaultValue"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The subset or updated matrix."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2831
      },
      "sylvester": {
        "name": "sylvester",
        "kind": "function",
        "description": "Solve the Sylvester equation A*X + X*B = C.",
        "params": [
          {
            "type": {
              "names": [
                "Matrix",
                "Array"
              ]
            },
            "description": "A square matrix.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "Matrix",
                "Array"
              ]
            },
            "description": "A square matrix.",
            "name": "B"
          },
          {
            "type": {
              "names": [
                "Matrix",
                "Array"
              ]
            },
            "description": "A matrix.",
            "name": "C"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Matrix"
              ]
            },
            "description": "Solution X of the Sylvester equation."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2843
      },
      "SymbolNode": {
        "name": "SymbolNode",
        "kind": "function",
        "description": "A node representing a symbol in the expression tree.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The symbol name.",
            "name": "name"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "SymbolNode"
              ]
            },
            "description": "A new SymbolNode instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2854
      },
      "symbolicEqual": {
        "name": "symbolicEqual",
        "kind": "function",
        "description": "Test whether two expressions are symbolically equal.",
        "params": [
          {
            "type": {
              "names": [
                "Node"
              ]
            },
            "description": "First expression.",
            "name": "expr1"
          },
          {
            "type": {
              "names": [
                "Node"
              ]
            },
            "description": "Second expression.",
            "name": "expr2"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "description": "Comparison options.",
            "name": "options"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Returns true if expressions are symbolically equal."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2863
      },
      "tan": {
        "name": "tan",
        "kind": "function",
        "description": "Calculate the tangent of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Unit",
                "Array",
                "Matrix"
              ]
            },
            "description": "Function input.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The tangent of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2874
      },
      "tanh": {
        "name": "tanh",
        "kind": "function",
        "description": "Calculate the hyperbolic tangent of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "Function input.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "Complex",
                "Array",
                "Matrix"
              ]
            },
            "description": "The hyperbolic tangent of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2883
      },
      "tau": {
        "name": "tau",
        "kind": "member",
        "description": "The constant tau, equal to 2pi.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2892
      },
      "thomsonCrossSection": {
        "name": "thomsonCrossSection",
        "kind": "member",
        "description": "Thomson cross section, in m^2.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2900
      },
      "to": {
        "name": "to",
        "kind": "function",
        "description": "Convert a unit to another unit.",
        "params": [
          {
            "type": {
              "names": [
                "Unit"
              ]
            },
            "description": "The unit to be converted.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "Unit",
                "string"
              ]
            },
            "description": "Target unit.",
            "name": "unit"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Unit"
              ]
            },
            "description": "The converted unit."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2908
      },
      "true": {
        "name": "true",
        "kind": "member",
        "description": "Boolean value true.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2918
      },
      "typeOf": {
        "name": "typeOf",
        "kind": "function",
        "description": "Get the type of a variable.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The variable.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The type of x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2926
      },
      "typed": {
        "name": "typed",
        "kind": "function",
        "description": "Create a typed-function.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Function name.",
            "name": "name"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Function signatures.",
            "name": "signatures"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The typed function."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2935
      },
      "unaryMinus": {
        "name": "unaryMinus",
        "kind": "function",
        "description": "Invert the sign of a value.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Fraction",
                "Complex",
                "Unit",
                "Array",
                "Matrix"
              ]
            },
            "description": "Input value.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Fraction",
                "Complex",
                "Unit",
                "Array",
                "Matrix"
              ]
            },
            "description": "The negated value."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2945
      },
      "unaryPlus": {
        "name": "unaryPlus",
        "kind": "function",
        "description": "Unary plus operation.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Fraction",
                "Complex",
                "Unit",
                "Array",
                "Matrix"
              ]
            },
            "description": "Input value.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Fraction",
                "Complex",
                "Unit",
                "Array",
                "Matrix"
              ]
            },
            "description": "The input value."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2954
      },
      "unequal": {
        "name": "unequal",
        "kind": "function",
        "description": "Test whether two values are unequal.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "First value.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "Second value.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean",
                "Array",
                "Matrix"
              ]
            },
            "description": "Returns true if x is not equal to y."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2963
      },
      "Unit": {
        "name": "Unit",
        "kind": "function",
        "description": "Unit constructor.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "The numeric value.",
            "name": "value"
          },
          {
            "type": {
              "names": [
                "string",
                "Unit"
              ]
            },
            "description": "The unit string or Unit object.",
            "name": "unit"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Unit"
              ]
            },
            "description": "A new Unit instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2973
      },
      "unit": {
        "name": "unit",
        "kind": "function",
        "description": "Create a unit.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "The numeric value.",
            "name": "value"
          },
          {
            "type": {
              "names": [
                "string",
                "Unit"
              ]
            },
            "description": "The unit string or Unit object.",
            "name": "unit"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Unit"
              ]
            },
            "description": "A new Unit instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2983
      },
      "E": {
        "name": "E",
        "kind": "member",
        "description": "The base of natural logarithms, e.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 2993
      },
      "PI": {
        "name": "PI",
        "kind": "member",
        "description": "The mathematical constant pi.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 3001
      },
      "usolve": {
        "name": "usolve",
        "kind": "function",
        "description": "Solve a linear system A * x = b where A is an upper triangular matrix.",
        "params": [
          {
            "type": {
              "names": [
                "Matrix",
                "Array"
              ]
            },
            "description": "An upper triangular matrix.",
            "name": "U"
          },
          {
            "type": {
              "names": [
                "Matrix",
                "Array"
              ]
            },
            "description": "A column vector.",
            "name": "b"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Matrix",
                "Array"
              ]
            },
            "description": "The solution vector x."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 3009
      },
      "usolveAll": {
        "name": "usolveAll",
        "kind": "function",
        "description": "Find all solutions of a linear system A * x = b where A is an upper triangular matrix.",
        "params": [
          {
            "type": {
              "names": [
                "Matrix",
                "Array"
              ]
            },
            "description": "An upper triangular matrix.",
            "name": "U"
          },
          {
            "type": {
              "names": [
                "Matrix",
                "Array"
              ]
            },
            "description": "A column vector.",
            "name": "b"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "An array of solutions."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 3019
      },
      "vacuumImpedance": {
        "name": "vacuumImpedance",
        "kind": "member",
        "description": "Vacuum impedance, in ohms.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 3029
      },
      "variance": {
        "name": "variance",
        "kind": "function",
        "description": "Compute the variance of a set of values.",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "Matrix"
              ]
            },
            "description": "Input array.",
            "name": "array"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "defaultvalue": "'unbiased'",
            "description": "Normalization mode.",
            "name": "normalization"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "optional": true,
            "description": "Dimension along which to compute.",
            "name": "dim"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber",
                "Array",
                "Matrix"
              ]
            },
            "description": "The variance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 3037
      },
      "weakMixingAngle": {
        "name": "weakMixingAngle",
        "kind": "member",
        "description": "Weak mixing angle.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 3048
      },
      "wienDisplacement": {
        "name": "wienDisplacement",
        "kind": "member",
        "description": "Wien displacement constant, in m·K.",
        "source_filename": "mathjs-doc.js",
        "source_lineno": 3056
      },
      "xgcd": {
        "name": "xgcd",
        "kind": "function",
        "description": "Extended greatest common divisor for integers.",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "An integer.",
            "name": "a"
          },
          {
            "type": {
              "names": [
                "number",
                "BigNumber"
              ]
            },
            "description": "An integer.",
            "name": "b"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "An array [gcd, x, y] satisfying gcd = a*x + b*y."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 3064
      },
      "xor": {
        "name": "xor",
        "kind": "function",
        "description": "Logical XOR operation.",
        "params": [
          {
            "type": {
              "names": [
                "boolean",
                "Array",
                "Matrix"
              ]
            },
            "description": "First value.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "boolean",
                "Array",
                "Matrix"
              ]
            },
            "description": "Second value.",
            "name": "y"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean",
                "Array",
                "Matrix"
              ]
            },
            "description": "The logical XOR of x and y."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 3074
      },
      "ArgumentsError": {
        "name": "ArgumentsError",
        "kind": "function",
        "description": "Error thrown when an incorrect number of arguments is passed.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "Function name.",
            "name": "fn"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Actual argument count.",
            "name": "count"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Minimum required arguments.",
            "name": "min"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "description": "Maximum allowed arguments.",
            "name": "max"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "ArgumentsError"
              ]
            },
            "description": "A new ArgumentsError instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 3084
      },
      "DimensionError": {
        "name": "DimensionError",
        "kind": "function",
        "description": "Error thrown when matrix dimensions mismatch.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Actual dimension.",
            "name": "actual"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Expected dimension.",
            "name": "expected"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "description": "Relation between dimensions.",
            "name": "relation"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "DimensionError"
              ]
            },
            "description": "A new DimensionError instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 3096
      },
      "IndexError": {
        "name": "IndexError",
        "kind": "function",
        "description": "Error thrown when an index is out of range.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The invalid index.",
            "name": "index"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Minimum allowed index.",
            "name": "min"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Maximum allowed index.",
            "name": "max"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "IndexError"
              ]
            },
            "description": "A new IndexError instance."
          }
        ],
        "source_filename": "mathjs-doc.js",
        "source_lineno": 3107
      }
    },
    "rcmiga": {
      "run": {
        "name": "run",
        "kind": "function",
        "description": "Executes the optimization process.",
        "params": [],
        "async": true,
        "source_filename": "optim-rcmiga.js",
        "source_lineno": 59,
        "source_range": [
          1691,
          4118
        ]
      },
      "checkInputs": {
        "name": "checkInputs",
        "kind": "function",
        "description": "Validates the input parameters and options.",
        "params": [],
        "source_filename": "optim-rcmiga.js",
        "source_lineno": 139,
        "source_range": [
          4185,
          5353
        ]
      },
      "creationFcn": {
        "name": "creationFcn",
        "kind": "function",
        "description": "Creates the initial population.",
        "params": [],
        "source_filename": "optim-rcmiga.js",
        "source_lineno": 174,
        "source_range": [
          5408,
          5467
        ]
      },
      "selectionFcn": {
        "name": "selectionFcn",
        "kind": "function",
        "description": "Selects individuals from the population.",
        "params": [],
        "source_filename": "optim-rcmiga.js",
        "source_lineno": 181,
        "source_range": [
          5533,
          5598
        ]
      },
      "crossoverFcn": {
        "name": "crossoverFcn",
        "kind": "function",
        "description": "Performs crossover between selected parents.",
        "params": [],
        "source_filename": "optim-rcmiga.js",
        "source_lineno": 188,
        "source_range": [
          5668,
          5729
        ]
      },
      "mutationFcn": {
        "name": "mutationFcn",
        "kind": "function",
        "description": "Mutates individuals in the population.",
        "params": [],
        "source_filename": "optim-rcmiga.js",
        "source_lineno": 195,
        "source_range": [
          5793,
          5850
        ]
      },
      "createPlotFcn": {
        "name": "createPlotFcn",
        "kind": "function",
        "description": "Initializes the plotting function.",
        "params": [],
        "source_filename": "optim-rcmiga.js",
        "source_lineno": 202,
        "source_range": [
          5906,
          5932
        ]
      },
      "plotFcn": {
        "name": "plotFcn",
        "kind": "function",
        "description": "Updates the graphical plot with current optimization status.",
        "params": [],
        "source_filename": "optim-rcmiga.js",
        "source_lineno": 209,
        "source_range": [
          6016,
          6055
        ]
      },
      "displayPlot": {
        "name": "displayPlot",
        "kind": "function",
        "description": "Renders the optimization plot.",
        "params": [],
        "source_filename": "optim-rcmiga.js",
        "source_lineno": 216,
        "source_range": [
          6107,
          6127
        ]
      },
      "buttonCallback": {
        "name": "buttonCallback",
        "kind": "function",
        "description": "Handles button events to stop the optimization process.",
        "params": [],
        "source_filename": "optim-rcmiga.js",
        "source_lineno": 223,
        "source_range": [
          6204,
          6247
        ]
      },
      "outputFcn": {
        "name": "outputFcn",
        "kind": "function",
        "description": "Manages the output display based on configuration.",
        "params": [],
        "source_filename": "optim-rcmiga.js",
        "source_lineno": 230,
        "source_range": [
          6324,
          6431
        ]
      },
      "displayOutput": {
        "name": "displayOutput",
        "kind": "function",
        "description": "Displays the current state of optimization.",
        "params": [],
        "source_filename": "optim-rcmiga.js",
        "source_lineno": 239,
        "source_range": [
          6498,
          9045
        ]
      },
      "creationMixedUniform": {
        "name": "creationMixedUniform",
        "kind": "function",
        "description": "Creates the initial population with mixed uniform distribution.",
        "params": [],
        "source_filename": "optim-rcmiga.js",
        "source_lineno": 310,
        "source_range": [
          9132,
          9807
        ]
      },
      "binaryTournamentSelection": {
        "name": "binaryTournamentSelection",
        "kind": "function",
        "description": "Performs binary tournament selection of parents.",
        "params": [],
        "source_filename": "optim-rcmiga.js",
        "source_lineno": 333,
        "source_range": [
          9879,
          10411
        ]
      },
      "laplaceMixedCrossover": {
        "name": "laplaceMixedCrossover",
        "kind": "function",
        "description": "Executes Laplace mixed crossover to generate offspring.",
        "params": [],
        "source_filename": "optim-rcmiga.js",
        "source_lineno": 350,
        "source_range": [
          10490,
          11951
        ]
      },
      "powerMixedMutation": {
        "name": "powerMixedMutation",
        "kind": "function",
        "description": "Applies power mixed mutation to selected individuals.",
        "params": [],
        "source_filename": "optim-rcmiga.js",
        "source_lineno": 383,
        "source_range": [
          12028,
          13422
        ]
      },
      "gaussianMutation": {
        "name": "gaussianMutation",
        "kind": "function",
        "description": "Applies Gaussian mutation to selected individuals.",
        "params": [],
        "source_filename": "optim-rcmiga.js",
        "source_lineno": 421,
        "source_range": [
          13496,
          13525
        ]
      },
      "integerRestriction": {
        "name": "integerRestriction",
        "kind": "function",
        "description": "Ensures integer constraints are met for specific variables.",
        "params": [],
        "source_filename": "optim-rcmiga.js",
        "source_lineno": 428,
        "source_range": [
          13608,
          14183
        ]
      },
      "checkBounds": {
        "name": "checkBounds",
        "kind": "function",
        "description": "Checks and enforces variable bounds within the population.",
        "params": [],
        "source_filename": "optim-rcmiga.js",
        "source_lineno": 448,
        "source_range": [
          14265,
          14424
        ]
      },
      "stoppingCriteria": {
        "name": "stoppingCriteria",
        "kind": "function",
        "description": "Evaluates whether stopping criteria have been met.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Code indicating the reason to stop or continue."
          }
        ],
        "source_filename": "optim-rcmiga.js",
        "source_lineno": 457,
        "source_range": [
          14569,
          16269
        ]
      },
      "initPopulation": {
        "name": "initPopulation",
        "kind": "function",
        "description": "Initializes the population for the optimization process.",
        "params": [],
        "source_filename": "optim-rcmiga.js",
        "source_lineno": 505,
        "source_range": [
          16349,
          16505
        ]
      },
      "initState": {
        "name": "initState",
        "kind": "function",
        "description": "Initializes the internal state of the algorithm.",
        "params": [],
        "source_filename": "optim-rcmiga.js",
        "source_lineno": 516,
        "source_range": [
          16577,
          18868
        ]
      },
      "updateState": {
        "name": "updateState",
        "kind": "function",
        "description": "Updates the current state of the algorithm based on evaluations.",
        "params": [],
        "async": true,
        "source_filename": "optim-rcmiga.js",
        "source_lineno": 572,
        "source_range": [
          18956,
          19624
        ]
      },
      "updatePenalty": {
        "name": "updatePenalty",
        "kind": "function",
        "description": "Updates penalty values based on constraint violations.",
        "params": [],
        "source_filename": "optim-rcmiga.js",
        "source_lineno": 594,
        "source_range": [
          19702,
          20828
        ]
      },
      "evalFitnessFcn": {
        "name": "evalFitnessFcn",
        "kind": "function",
        "description": "Evaluates the fitness function for the current population.",
        "params": [],
        "async": true,
        "source_filename": "optim-rcmiga.js",
        "source_lineno": 624,
        "source_range": [
          20910,
          22299
        ]
      },
      "evalConstraintsFcn": {
        "name": "evalConstraintsFcn",
        "kind": "function",
        "description": "Evaluates constraint functions for the current population.",
        "params": [],
        "async": true,
        "source_filename": "optim-rcmiga.js",
        "source_lineno": 667,
        "source_range": [
          22381,
          24088
        ]
      },
      "normConstraintsFcn": {
        "name": "normConstraintsFcn",
        "kind": "function",
        "description": "Normalizes constraint values to maintain consistent scaling.",
        "params": [],
        "source_filename": "optim-rcmiga.js",
        "source_lineno": 717,
        "source_range": [
          24172,
          25494
        ]
      }
    },
    "space_search": {
      "dispElementSize": {
        "name": "dispElementSize",
        "kind": "function",
        "description": "Displays the size of elements based on bounds and subdivisions.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "Array of [min, max] for each dimension.",
            "name": "bounds"
          },
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "Subdivision factors per depth and dimension.",
            "name": "subdivisionPerDepth"
          }
        ],
        "source_filename": "geometry-spacesearch.js",
        "source_lineno": 19,
        "source_range": [
          517,
          1369
        ]
      },
      "splitSearchSpace": {
        "name": "splitSearchSpace",
        "kind": "function",
        "description": "Splits the search space into smaller intervals for parallel processing.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "The limits of the search space, where each sub-array represents [start, end] for a dimension.",
            "name": "x_lim"
          },
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "The parameters to optimize.",
            "name": "k"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The number of processors to divide the work among.",
            "name": "N_proc"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "An array containing the split search spaces and the adjusted parameters."
          }
        ],
        "source_filename": "geometry-spacesearch.js",
        "source_lineno": 46,
        "source_range": [
          1865,
          2212
        ]
      },
      "runParallel": {
        "name": "runParallel",
        "kind": "function",
        "description": "Executes a provided function in parallel across the split search spaces.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "The limits of the search space, where each sub-array represents [start, end] for a dimension.",
            "name": "x_lim"
          },
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "The parameters to optimize.",
            "name": "k"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The execution context containing necessary configurations and states.",
            "name": "context"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The setup function to initialize the parallel environment.",
            "name": "setup"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The function to execute in parallel on each split of the search space.",
            "name": "fun"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<Array.<Array.<number>>>"
              ]
            },
            "description": "A promise that resolves to arrays of input and output results from the parallel execution."
          }
        ],
        "async": true,
        "source_filename": "geometry-spacesearch.js",
        "source_lineno": 68,
        "source_range": [
          2946,
          3750
        ]
      },
      "run": {
        "name": "run",
        "kind": "function",
        "description": "Executes the space search algorithm.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "Array of [min, max] for each dimension.",
            "name": "bounds"
          },
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "Subdivision factors for each depth and dimension.",
            "name": "subdivisionPerDepth"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "Function that determines if a point satisfies the condition.",
            "name": "conditionFunction"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "- Arrays of points inside and outside the condition."
          }
        ],
        "source_filename": "geometry-spacesearch.js",
        "source_lineno": 95,
        "source_range": [
          4175,
          5538
        ]
      },
      "makeNodesND": {
        "name": "makeNodesND",
        "kind": "function",
        "description": "Recursively creates nodes in N dimensions based on subdivisions.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Starting coordinates for the current grid.",
            "name": "startCoordinates"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Values at the boundary points of the current hypercube.",
            "name": "boundaryValues"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Current depth of the recursion.",
            "name": "currentDepth"
          },
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "Step sizes for each depth.",
            "name": "stepSizesPerDepth"
          },
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "Subdivision factors for each depth.",
            "name": "subdivisionPerDepth"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "User-defined condition function.",
            "name": "conditionFunction"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "- Arrays of points inside and outside the condition."
          }
        ],
        "source_filename": "geometry-spacesearch.js",
        "source_lineno": 147,
        "source_range": [
          6194,
          9264
        ]
      },
      "generateCornerShifts": {
        "name": "generateCornerShifts",
        "kind": "function",
        "description": "Generates all corner shifts for a hypercube in N dimensions.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Number of dimensions.",
            "name": "numDimensions"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "- Array of shifts for each corner."
          }
        ],
        "source_filename": "geometry-spacesearch.js",
        "source_lineno": 250,
        "source_range": [
          9467,
          9778
        ]
      },
      "getCornerIndices": {
        "name": "getCornerIndices",
        "kind": "function",
        "description": "Retrieves the indices of corner points in the grid.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Shape of the grid.",
            "name": "gridShape"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "- List of corner indices."
          }
        ],
        "source_filename": "geometry-spacesearch.js",
        "source_lineno": 268,
        "source_range": [
          9958,
          10185
        ]
      },
      "generateIndicesList": {
        "name": "generateIndicesList",
        "kind": "function",
        "description": "Generates a list of indices for nodes that need to be calculated.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Shape of the grid.",
            "name": "gridShape"
          },
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "N-dimensional array indicating nodes to compute.",
            "name": "nf"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "- List of node indices where nf is 1."
          }
        ],
        "source_filename": "geometry-spacesearch.js",
        "source_lineno": 280,
        "source_range": [
          10465,
          10952
        ]
      },
      "generateInnerCubeIndicesList": {
        "name": "generateInnerCubeIndicesList",
        "kind": "function",
        "description": "Generates a list of starting indices for inner hypercubes.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Shape of the grid.",
            "name": "gridShape"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<Array.<number>>"
              ]
            },
            "description": "- List of inner cube starting indices."
          }
        ],
        "source_filename": "geometry-spacesearch.js",
        "source_lineno": 304,
        "source_range": [
          11152,
          11689
        ]
      },
      "getCubeCorners": {
        "name": "getCubeCorners",
        "kind": "function",
        "description": "Retrieves the corner coordinates and values of a hypercube.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "N-dimensional grid.",
            "name": "N"
          },
          {
            "type": {
              "names": [
                "Array.<number>"
              ]
            },
            "description": "Starting indices of the hypercube.",
            "name": "indices"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "- Array of corner coordinates and values."
          }
        ],
        "source_filename": "geometry-spacesearch.js",
        "source_lineno": 331,
        "source_range": [
          11946,
          12279
        ]
      }
    },
    "map": {
      "createWindow": {
        "name": "createWindow",
        "kind": "function",
        "description": "Opens a window with Leaflet and initializes the map.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<void>"
              ]
            }
          }
        ],
        "async": true,
        "source_filename": "geography-map.js",
        "source_lineno": 69,
        "source_range": [
          2458,
          3369
        ]
      },
      "setCenter": {
        "name": "setCenter",
        "kind": "function",
        "description": "Sets the center of the map to the specified latitude and longitude.\rThis will update the internal state and move the Leaflet map if it is ready.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Latitude.",
            "name": "lat"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Longitude.",
            "name": "lon"
          }
        ],
        "source_filename": "geography-map.js",
        "source_lineno": 98,
        "source_range": [
          3625,
          3798
        ]
      },
      "setZoom": {
        "name": "setZoom",
        "kind": "function",
        "description": "Sets the zoom level of the map.\rThis will update the internal state and adjust the Leaflet map if it is ready.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The zoom level.",
            "name": "zoom"
          }
        ],
        "source_filename": "geography-map.js",
        "source_lineno": 111,
        "source_range": [
          3988,
          4119
        ]
      },
      "addMarker": {
        "name": "addMarker",
        "kind": "function",
        "description": "Adds a marker to the map at the specified latitude and longitude.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Latitude.",
            "name": "lat"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Longitude.",
            "name": "lon"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_GEOGRAPHY_MAP_MARKER",
                "null"
              ]
            },
            "description": "- The marker instance or null if map is not ready."
          }
        ],
        "source_filename": "geography-map.js",
        "source_lineno": 124,
        "source_range": [
          4395,
          4496
        ]
      }
    },
    "map_3d": {
      "createWindow": {
        "name": "createWindow",
        "kind": "function",
        "description": "Opens a window with Cesium and initializes 3D map.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<void>"
              ]
            }
          }
        ],
        "async": true,
        "source_filename": "geography-map-3d.js",
        "source_lineno": 36,
        "source_range": [
          810,
          1995
        ]
      },
      "setView": {
        "name": "setView",
        "kind": "function",
        "description": "Sets the camera view to the specified latitude, longitude, and height.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Latitude.",
            "name": "lat"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Longitude.",
            "name": "lon"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Height in meters.",
            "name": "height"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 0,
            "description": "Heading in degrees.",
            "name": "heading"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": -30,
            "description": "Pitch in degrees.",
            "name": "pitch"
          }
        ],
        "source_filename": "geography-map-3d.js",
        "source_lineno": 77,
        "source_range": [
          2330,
          2883
        ]
      },
      "addEntity": {
        "name": "addEntity",
        "kind": "function",
        "description": "Adds a new entity to the 3D map.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The data representing the entity to add.",
            "name": "data"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_GEOGRAPHY_MAP_3D_ENTITY"
              ]
            },
            "description": "The newly created map entity."
          }
        ],
        "source_filename": "geography-map-3d.js",
        "source_lineno": 101,
        "source_range": [
          3096,
          3192
        ]
      },
      "removeAllEntities": {
        "name": "removeAllEntities",
        "kind": "function",
        "description": "Removes all entities from the 3D map viewer.",
        "params": [],
        "source_filename": "geography-map-3d.js",
        "source_lineno": 108,
        "source_range": [
          3265,
          3330
        ]
      },
      "flyTo": {
        "name": "flyTo",
        "kind": "function",
        "description": "Animates the camera to fly to the specified entity.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The entity to fly to.",
            "name": "entity"
          }
        ],
        "source_filename": "geography-map-3d.js",
        "source_lineno": 116,
        "source_range": [
          3463,
          3567
        ]
      }
    },
    "Gamepad": {
      "setOnData": {
        "name": "setOnData",
        "kind": "function",
        "description": "Sets the callback function to handle incoming gamepad data.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "Function to execute when data is received.",
            "name": "callback"
          }
        ],
        "source_filename": "device-gamepad.js",
        "source_lineno": 126,
        "source_range": [
          3018,
          3134
        ]
      },
      "setOnConnect": {
        "name": "setOnConnect",
        "kind": "function",
        "description": "Sets the callback function for gamepad connection events.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "Function to execute on connection.",
            "name": "callback"
          }
        ],
        "source_filename": "device-gamepad.js",
        "source_lineno": 136,
        "source_range": [
          3284,
          3472
        ]
      },
      "setOnDisconnect": {
        "name": "setOnDisconnect",
        "kind": "function",
        "description": "Sets the callback function for gamepad disconnection events.",
        "params": [
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "Function to execute on disconnection.",
            "name": "callback"
          }
        ],
        "source_filename": "device-gamepad.js",
        "source_lineno": 149,
        "source_range": [
          3628,
          3756
        ]
      },
      "close": {
        "name": "close",
        "kind": "function",
        "description": "Cleans up the gamepad instance and stops data reading.",
        "params": [],
        "source_filename": "device-gamepad.js",
        "source_lineno": 158,
        "source_range": [
          3832,
          4025
        ]
      }
    }
  },
  "lib": {
    "parallel": {
      "getProcessorsNum": {
        "name": "getProcessorsNum",
        "kind": "function",
        "description": "Retrieves the number of logical processors available.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Number of processors."
          }
        ],
        "source_filename": "parallel.js",
        "source_lineno": 29,
        "source_range": [
          662,
          734
        ]
      },
      "workerFunction": {
        "name": "workerFunction",
        "kind": "function",
        "description": "Generates the worker's internal script.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "defaultvalue": "{}",
            "description": "Optional context to pass to the work_function.",
            "name": "context"
          },
          {
            "type": {
              "names": [
                "function",
                "String"
              ]
            },
            "description": "The work function to execute.",
            "name": "work_function_str"
          },
          {
            "type": {
              "names": [
                "function",
                "String"
              ]
            },
            "optional": true,
            "description": "Optional setup function to execute on init.",
            "name": "setup_function_str"
          }
        ],
        "source_filename": "parallel.js",
        "source_lineno": 39,
        "source_range": [
          1057,
          2035
        ]
      },
      "init": {
        "name": "init",
        "kind": "function",
        "description": "Initializes the worker pool with the specified number of workers.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Number of workers to initialize.",
            "name": "num_workers"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "defaultvalue": "{}",
            "description": "Optional context to pass to the work_function.",
            "name": "context"
          },
          {
            "type": {
              "names": [
                "function",
                "String"
              ]
            },
            "optional": true,
            "description": "Optional setup function to execute on init.",
            "name": "setup_function_str"
          }
        ],
        "source_filename": "parallel.js",
        "source_lineno": 77,
        "source_range": [
          2370,
          3140
        ]
      },
      "assignTasksToWorkers": {
        "name": "assignTasksToWorkers",
        "kind": "function",
        "description": "Assigns tasks from the queue to available workers.",
        "params": [],
        "source_filename": "parallel.js",
        "source_lineno": 109,
        "source_range": [
          3212,
          4394
        ]
      },
      "run": {
        "name": "run",
        "kind": "function",
        "description": "Enqueues a task to be executed by the worker pool.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "Context variables to assign in the worker.",
            "name": "context"
          },
          {
            "type": {
              "names": [
                "function",
                "String"
              ]
            },
            "optional": true,
            "description": "Optional setup function to execute on init.",
            "name": "setup_function",
            "defaultvalue": null
          },
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "Arguments to pass to the work_function.",
            "name": "args"
          },
          {
            "type": {
              "names": [
                "function",
                "String"
              ]
            },
            "description": "The work function to execute.",
            "name": "work_function"
          },
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Wether to reset all workers or not.",
            "name": "reset_workers",
            "defaultvalue": false
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise"
              ]
            },
            "description": "- Resolves with the result of the work_function."
          }
        ],
        "source_filename": "parallel.js",
        "source_lineno": 162,
        "source_range": [
          4923,
          5716
        ]
      },
      "parfor": {
        "name": "parfor",
        "kind": "function",
        "description": "Executes a parallel for loop by dividing the iteration range among workers.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The initial value of the loop counter.",
            "name": "start"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The terminating value of the loop counter.",
            "name": "end"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 1,
            "description": "The amount by which to increment the loop counter each iteration.",
            "name": "step"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": "this.getProcessorsNum()",
            "description": "The number of workers to use.",
            "name": "num_workers"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "defaultvalue": "{}",
            "description": "Optional context to pass to the work_function.",
            "name": "context"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "optional": true,
            "defaultvalue": null,
            "description": "Optional setup function to execute before work_function.",
            "name": "setup_function"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "The function to execute on each iteration.",
            "name": "work_function"
          },
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "Wether to reset all workers or not.",
            "name": "reset_workers",
            "defaultvalue": false
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<Array>"
              ]
            },
            "description": "- A promise that resolves to an array of results."
          }
        ],
        "async": true,
        "source_filename": "parallel.js",
        "source_lineno": 202,
        "source_range": [
          6569,
          8692
        ]
      },
      "terminate": {
        "name": "terminate",
        "kind": "function",
        "description": "Terminates all workers and resets the worker pool.",
        "params": [],
        "source_filename": "parallel.js",
        "source_lineno": 274,
        "source_range": [
          8764,
          8943
        ]
      }
    },
    "mat": {
      "new": {
        "name": "new",
        "kind": "function",
        "description": "Creates a new matrix.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The matrix data.",
            "name": "A"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Number of rows.",
            "name": "rows"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Number of columns.",
            "name": "cols"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "A new matrix instance."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 29,
        "source_range": [
          697,
          780
        ]
      },
      "fill": {
        "name": "fill",
        "kind": "function",
        "description": "Creates a matrix filled with a specific value.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The value to fill the matrix with.",
            "name": "v"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Number of rows.",
            "name": "rows"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": "rows",
            "description": "Number of columns.",
            "name": "cols"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The filled matrix."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 40,
        "source_range": [
          1059,
          1238
        ]
      },
      "NaNs": {
        "name": "NaNs",
        "kind": "function",
        "description": "Creates a matrix filled with NaN values.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Number of rows.",
            "name": "rows"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": "rows",
            "description": "Number of columns.",
            "name": "cols"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The NaN-filled matrix."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 54,
        "source_range": [
          1457,
          1559
        ]
      },
      "ones": {
        "name": "ones",
        "kind": "function",
        "description": "Creates a matrix filled with ones.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Number of rows.",
            "name": "rows"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": "rows",
            "description": "Number of columns.",
            "name": "cols"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The ones-filled matrix."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 67,
        "source_range": [
          1773,
          1873
        ]
      },
      "zeros": {
        "name": "zeros",
        "kind": "function",
        "description": "Creates a matrix filled with zeros.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "Number of rows.",
            "name": "rows"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": "rows",
            "description": "Number of columns.",
            "name": "cols"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The zeros-filled matrix."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 80,
        "source_range": [
          2089,
          2190
        ]
      },
      "diag": {
        "name": "diag",
        "kind": "function",
        "description": "Creates a diagonal matrix from an array.",
        "params": [
          {
            "type": {
              "names": [
                "Array"
              ]
            },
            "description": "The array to create the diagonal matrix from.",
            "name": "A"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The diagonal matrix."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 92,
        "source_range": [
          2379,
          2497
        ]
      },
      "eye": {
        "name": "eye",
        "kind": "function",
        "description": "Creates an identity matrix of a given size.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The size of the identity matrix.",
            "name": "size"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The identity matrix."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 102,
        "source_range": [
          2680,
          2812
        ]
      },
      "concatRow": {
        "name": "concatRow",
        "kind": "function",
        "description": "Concatenates multiple matrices vertically (row-wise).",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "variable": true,
            "description": "Matrices to concatenate.",
            "name": "args"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The concatenated matrix."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 112,
        "source_range": [
          3015,
          3465
        ]
      },
      "concatCol": {
        "name": "concatCol",
        "kind": "function",
        "description": "Concatenates multiple matrices horizontally (column-wise).",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "variable": true,
            "description": "Matrices to concatenate.",
            "name": "args"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_MATRIX"
              ]
            },
            "description": "The concatenated matrix."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 135,
        "source_range": [
          3671,
          3815
        ]
      },
      "isMatrix": {
        "name": "isMatrix",
        "kind": "function",
        "description": "Checks if the provided object is a matrix.",
        "params": [
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "description": "The object to check.",
            "name": "A"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            },
            "description": "True if A is a matrix, else false."
          }
        ],
        "source_filename": "matrix-math.js",
        "source_lineno": 146,
        "source_range": [
          3984,
          4044
        ]
      }
    },
    "vec": {
      "new": {
        "name": "new",
        "kind": "function",
        "description": "Creates a new vector with specified x, y, z components.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The x-component of the vector.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The y-component of the vector.",
            "name": "y"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The z-component of the vector.",
            "name": "z"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VECTOR"
              ]
            },
            "description": "A new vector instance."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 29,
        "source_range": [
          767,
          838
        ]
      },
      "polar": {
        "name": "polar",
        "kind": "function",
        "description": "Creates a vector from polar coordinates.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The length of the vector.",
            "name": "length"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The angle in radians.",
            "name": "radian"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VECTOR"
              ]
            },
            "description": "The resulting vector."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 39,
        "source_range": [
          1066,
          1245
        ]
      },
      "spherical": {
        "name": "spherical",
        "kind": "function",
        "description": "Creates a vector from spherical coordinates.",
        "params": [
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The length (magnitude) of the vector.",
            "name": "length"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The azimuth angle in radians (angle from the X-axis in the XY plane).",
            "name": "azimuth"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "description": "The elevation angle in radians (angle from the XY plane towards Z).",
            "name": "elevation"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_VECTOR"
              ]
            },
            "description": "The resulting vector."
          }
        ],
        "source_filename": "vector-math.js",
        "source_lineno": 53,
        "source_range": [
          1639,
          1907
        ]
      }
    },
    "sym": {
      "load": {
        "name": "load",
        "kind": "function",
        "description": "Loads the symbolic math libraries (SymPy and NumPy) using Pyodide.\nInitializes the Python environment for symbolic computations.",
        "params": [],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<void>"
              ]
            },
            "description": "A promise that resolves when the libraries are loaded."
          }
        ],
        "async": true,
        "source_filename": "sym-math.js",
        "source_lineno": 33,
        "source_range": [
          810,
          1218
        ]
      },
      "getSymbolName": {
        "name": "getSymbolName",
        "kind": "function",
        "description": "Retrieves the name of a symbolic variable.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL",
                "string"
              ]
            },
            "description": "The symbolic variable or its name.",
            "name": "symbol"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The name of the symbolic variable."
          }
        ],
        "source_filename": "sym-math.js",
        "source_lineno": 77,
        "source_range": [
          2257,
          2451
        ]
      },
      "checkLoaded": {
        "name": "checkLoaded",
        "kind": "function",
        "description": "Checks if the symbolic libraries are loaded. Throws an error if not.",
        "params": [],
        "source_filename": "sym-math.js",
        "source_lineno": 89,
        "source_range": [
          2606,
          2711
        ]
      },
      "eval": {
        "name": "eval",
        "kind": "function",
        "description": "Evaluates a Python code string within the symbolic math environment.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The Python code to evaluate.",
            "name": "code"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The result of the evaluated code."
          }
        ],
        "source_filename": "sym-math.js",
        "source_lineno": 101,
        "source_range": [
          2978,
          3267
        ]
      },
      "sym": {
        "name": "sym",
        "kind": "function",
        "description": "Creates a single symbolic variable.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The name of the symbolic variable.",
            "name": "name"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL"
              ]
            },
            "description": "The created symbolic variable."
          }
        ],
        "source_filename": "sym-math.js",
        "source_lineno": 119,
        "source_range": [
          3468,
          3598
        ]
      },
      "syms": {
        "name": "syms",
        "kind": "function",
        "description": "Creates multiple symbolic variables.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<string>"
              ]
            },
            "description": "An array of names for the symbolic variables.",
            "name": "names"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Array.<PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL>"
              ]
            },
            "description": "An array of created symbolic variables."
          }
        ],
        "source_filename": "sym-math.js",
        "source_lineno": 131,
        "source_range": [
          3825,
          4099
        ]
      },
      "mat": {
        "name": "mat",
        "kind": "function",
        "description": "Creates a symbolic matrix from a nested array expression.",
        "params": [
          {
            "type": {
              "names": [
                "Array.<Array.<(PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL|string|number)>>"
              ]
            },
            "description": "The nested array representing the matrix.",
            "name": "expr"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL"
              ]
            },
            "description": "The symbolic matrix."
          }
        ],
        "source_filename": "sym-math.js",
        "source_lineno": 149,
        "source_range": [
          4372,
          4680
        ]
      },
      "mul": {
        "name": "mul",
        "kind": "function",
        "description": "Multiplies multiple symbolic expressions.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL",
                "string",
                "number"
              ]
            },
            "description": "The symbolic expressions to multiply.",
            "name": "args",
            "variable": true
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL"
              ]
            },
            "description": "The resulting symbolic expression after multiplication."
          }
        ],
        "source_filename": "sym-math.js",
        "source_lineno": 167,
        "source_range": [
          4957,
          5290
        ]
      },
      "div": {
        "name": "div",
        "kind": "function",
        "description": "Divides multiple symbolic expressions.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL",
                "string",
                "number"
              ]
            },
            "description": "The symbolic expressions to divide.",
            "name": "args",
            "variable": true
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL"
              ]
            },
            "description": "The resulting symbolic expression after division."
          }
        ],
        "source_filename": "sym-math.js",
        "source_lineno": 189,
        "source_range": [
          5554,
          5887
        ]
      },
      "plus": {
        "name": "plus",
        "kind": "function",
        "description": "Adds multiple symbolic expressions.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL",
                "string",
                "number"
              ]
            },
            "description": "The symbolic expressions to add.",
            "name": "args",
            "variable": true
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL"
              ]
            },
            "description": "The resulting symbolic expression after addition."
          }
        ],
        "source_filename": "sym-math.js",
        "source_lineno": 211,
        "source_range": [
          6145,
          6479
        ]
      },
      "minus": {
        "name": "minus",
        "kind": "function",
        "description": "Subtracts multiple symbolic expressions.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL",
                "string",
                "number"
              ]
            },
            "description": "The symbolic expressions to subtract.",
            "name": "args",
            "variable": true
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL"
              ]
            },
            "description": "The resulting symbolic expression after subtraction."
          }
        ],
        "source_filename": "sym-math.js",
        "source_lineno": 233,
        "source_range": [
          6750,
          7085
        ]
      },
      "pow": {
        "name": "pow",
        "kind": "function",
        "description": "Raises a symbolic expression to a power.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL",
                "string",
                "number"
              ]
            },
            "description": "The base expression.",
            "name": "expr"
          },
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL",
                "string",
                "number"
              ]
            },
            "description": "The exponent.",
            "name": "n"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL"
              ]
            },
            "description": "The resulting symbolic expression after exponentiation."
          }
        ],
        "source_filename": "sym-math.js",
        "source_lineno": 256,
        "source_range": [
          7419,
          7697
        ]
      },
      "transp": {
        "name": "transp",
        "kind": "function",
        "description": "Transposes a symbolic matrix expression.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL",
                "string"
              ]
            },
            "description": "The matrix expression to transpose.",
            "name": "expr"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL"
              ]
            },
            "description": "The transposed matrix expression."
          }
        ],
        "source_filename": "sym-math.js",
        "source_lineno": 275,
        "source_range": [
          7937,
          8178
        ]
      },
      "inv": {
        "name": "inv",
        "kind": "function",
        "description": "Computes the inverse of a symbolic matrix expression.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL",
                "string"
              ]
            },
            "description": "The matrix expression to invert.",
            "name": "expr"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL"
              ]
            },
            "description": "The inverse of the matrix expression."
          }
        ],
        "source_filename": "sym-math.js",
        "source_lineno": 293,
        "source_range": [
          8434,
          8678
        ]
      },
      "det": {
        "name": "det",
        "kind": "function",
        "description": "Computes the determinant of a symbolic matrix expression.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL",
                "string"
              ]
            },
            "description": "The matrix expression whose determinant is to be computed.",
            "name": "expr"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL"
              ]
            },
            "description": "The determinant of the matrix expression."
          }
        ],
        "source_filename": "sym-math.js",
        "source_lineno": 311,
        "source_range": [
          8968,
          9212
        ]
      },
      "diff": {
        "name": "diff",
        "kind": "function",
        "description": "Differentiates a symbolic expression with respect to a variable.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL",
                "string"
              ]
            },
            "description": "The expression to differentiate.",
            "name": "expr"
          },
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL",
                "string"
              ]
            },
            "description": "The variable with respect to which differentiation is performed.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "number"
              ]
            },
            "optional": true,
            "defaultvalue": 1,
            "description": "The order of differentiation.",
            "name": "n"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL"
              ]
            },
            "description": "The differentiated expression."
          }
        ],
        "source_filename": "sym-math.js",
        "source_lineno": 331,
        "source_range": [
          9653,
          9916
        ]
      },
      "intg": {
        "name": "intg",
        "kind": "function",
        "description": "Integrates a symbolic expression with respect to a variable.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL",
                "string"
              ]
            },
            "description": "The expression to integrate.",
            "name": "expr"
          },
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL",
                "string"
              ]
            },
            "description": "The variable with respect to which integration is performed.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "Array.<(PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL|string)>",
                "undefined"
              ]
            },
            "description": "The limits of integration as [lower, upper]. If undefined, indefinite integration is performed.",
            "name": "lims"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL"
              ]
            },
            "description": "The integrated expression."
          }
        ],
        "source_filename": "sym-math.js",
        "source_lineno": 351,
        "source_range": [
          10453,
          11021
        ]
      },
      "subs": {
        "name": "subs",
        "kind": "function",
        "description": "Substitutes a value into a symbolic expression.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL",
                "string"
              ]
            },
            "description": "The expression in which to substitute.",
            "name": "expr"
          },
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL",
                "string"
              ]
            },
            "description": "The variable to substitute.",
            "name": "x"
          },
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL",
                "string",
                "number",
                "Array"
              ]
            },
            "description": "The value or array of values to substitute.",
            "name": "val"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL"
              ]
            },
            "description": "The expression after substitution."
          }
        ],
        "source_filename": "sym-math.js",
        "source_lineno": 381,
        "source_range": [
          11473,
          12230
        ]
      },
      "simplify": {
        "name": "simplify",
        "kind": "function",
        "description": "Simplifies a symbolic expression.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL",
                "string"
              ]
            },
            "description": "The expression to simplify.",
            "name": "expr"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL"
              ]
            },
            "description": "The simplified expression."
          }
        ],
        "source_filename": "sym-math.js",
        "source_lineno": 416,
        "source_range": [
          12450,
          12701
        ]
      },
      "showLatex": {
        "name": "showLatex",
        "kind": "function",
        "description": "Displays the LaTeX representation of a symbolic expression.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL",
                "string"
              ]
            },
            "description": "The expression to display in LaTeX format.",
            "name": "expr"
          }
        ],
        "source_filename": "sym-math.js",
        "source_lineno": 433,
        "source_range": [
          12887,
          13002
        ]
      },
      "dispLatex": {
        "name": "dispLatex",
        "kind": "function",
        "description": "Displays the LaTeX string of a symbolic expression.",
        "params": [
          {
            "type": {
              "names": [
                "PRDC_JSLAB_SYMBOLIC_MATH_SYMBOL",
                "string"
              ]
            },
            "description": "The expression to convert to a LaTeX string.",
            "name": "expr"
          }
        ],
        "source_filename": "sym-math.js",
        "source_lineno": 442,
        "source_range": [
          13182,
          13292
        ]
      },
      "clear": {
        "name": "clear",
        "kind": "function",
        "description": "Clears all symbolic variables and resets the symbolic math environment.",
        "params": [],
        "source_filename": "sym-math.js",
        "source_lineno": 450,
        "source_range": [
          13387,
          13630
        ]
      }
    }
  }
}